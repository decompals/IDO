#EDIR DATA#
LANG="C"Software PackagerUser's GuideDocument Number 007-2503-002CONTRIBUTORSWritten by Beth Fryer and Terri WankeEdited by Christina CaryProduction by Derrald VogtEngineering contributions by Kirk Erickson and David Fenstemaker, and Richard Wright© Copyright 1996, Silicon Graphics, Inc.name='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]' All Rights ReservedThe contents of this document may not be copied or duplicated in any form, in whole or in part, without the prior written permission of Silicon Graphics, Inc.RESTRICTED RIGHTS LEGENDUse, duplication, or disclosure of the technical data contained in this document by the Government is subject to restrictions as set forth in subdivision (c) (1) (ii) of the Rights in Technical Data and Computer Software clause at DFARS 52.227-7013 and/or in similar or successor clauses in the FAR, or in the DOD or NASA FAR Supplement. Unpublished rights reserved under the Copyright Laws of the United States. Contractor/manufacturer is Silicon Graphics, Inc., 2011 N. Shoreline Blvd., Mountain View, CA 94043-1389.Silicon Graphics and IRIS are registered trademarks, and IRIS and Indigo Magic are trademarks of Silicon Graphics, Inc.About This GuideThis book describes how to use Software Packager (swpkg), a graphical tool for packaging software for installation on Silicon Graphics® workstations. Products packaged with Software Packager can be installed with Software Manager (swmgr), an Indigo Magicname='trade' font=symbol charset=fontspecific code=228 
	descr='[trade]' Desktop utility for installing software.LBL="" HELPID=""What This Guide ContainsThis book contains the following chapters:IDREF="63889" TYPE="TITLE"Chapter 1, "Packaging Software for Installation: An Overview," provides an overview to Software Packager.IDREF="88726" TYPE="TITLE"Chapter 2, "The swpkg Tutorial," contains a brief tutorial of packaging an application using Software Packager.IDREF="63587" TYPE="TITLE"Chapter 3, "Creating a Product Hierarchy," describes how to create a product hierarchy.IDREF="21309" TYPE="TITLE"Chapter 4, "Tagging the Files," describes how to tag files for inclusion in the product and assign the files to subsystems in your product.IDREF="23502" TYPE="TITLE"Chapter 5, "Editing Permissions and Destinations," describes how to set the destination, names, and permissions of the files installed.IDREF="18487" TYPE="TITLE"Chapter 6, "Adding Attributes," describes how to set attributes for the files installed, including how to execute commands before and after installation, how to modify configuration files, and how to specify which files to install on different hardware configurations.IDREF="41962" TYPE="TITLE"Chapter 7, "Building the Product," shows how to build the installable product. It also discusses how to change a product that you've built, how to merge two or more existing products into a single product, and how to divide an existing product into two or more separate products.IDREF="47044" TYPE="TITLE"Chapter 8, "Creating a Patch Product," shows how to package a patch product.IDREF="12412" TYPE="TITLE"Appendix A, "Writing Mapping Expressions," describes how to create optional mapping expression for complex cases of assigning files to subsystems.IDREF="93723" TYPE="TITLE"Appendix B, "Troubleshooting," provides tips for troubleshooting common Software Packager problems.LBL="" HELPID=""What You Should Know Before Reading This GuideThis guide assumes that you are familiar with installing software using Software Manager. For more information on Software Manager and software installation, see the Personal System Administration Guide and the Software Installation Administrator's Guide.Silicon Graphics provides both these manuals online. You can view them from the IRIS InSight Viewer. To use the IRIS InSight Viewer, select "On-line Books" from the Help toolchest.LBL="" HELPID=""Font Conventions in this GuideThese style conventions are used in this guide:Boldfaced text indicates that a term is an option flag, a data type, a keyword, a function, or an X resource.Italics indicates that a term is a file name, a button name, a variable, an IRIX command, a document title, or an image or subsystem name."Quoted text" indicates menu items.Screen type is used for code examples and screen displays.Bold screen type is used for user input and nonprinting keyboard keys.Regular text is used for menu and window names.LBL="1"ID="63889"Packaging Software for Installation: An OverviewThis chapter provides a brief overview of Software Packager (swpkg), a graphical tool for packaging software for installation on Silicon Graphics workstations. It contains these sections:IDREF="18123" TYPE="TITLE""About swpkg" provides an overview of swpkg and the Silicon Graphics installation process.IDREF="57366" TYPE="TITLE""Running swpkg" describes how to run swpkg.IDREF="99706" TYPE="TITLE""Using the swpkg Worksheets" gives an overview of the swpkg worksheets.IDREF="96526" TYPE="TITLE""Using the swpkg Menus" describes the swpkg menus.IDREF="65956" TYPE="TITLE""Using the Worksheet Selection Tabs" describes how to select swpkg worksheets.IDREF="17465" TYPE="TITLE""Using the Message Area" describes the use of the swpkg message area.NoteTo package your application for installation, you must install the inst_dev product, which contains swpkg, related utilities, and reference pages.LBL="" HELPID=""ID="18123"About swpkgThe swpkg application allows you to quickly and easily package your application for Software Manager (swmgr(1M)), the Silicon Graphics software installation program. swpkg takes your product's files and, using the additional information that you enter into the swpkg worksheets, creates compressed software images, readable by Software Manager. swpkg also creates the two other files required by Software Manager, called the spec and IDB files. (spec and IDB files are the files in which swpkg stores all the information about your product installation that you enter into the swpkg worksheets. For a definition of spec files, see IDREF="87148" TYPE="TITLE""What's a Spec File?". For a definition of IDB files, see IDREF="87631" TYPE="TITLE""What's an IDB File?").LBL="" HELPID=""ID="57366"Running swpkgInvoke swpkg by typing:swpkg LBL="" HELPID="Overview"ID="99706"Using the swpkg WorksheetsTo use swpkg, you enter information about your product in a series of worksheets. The swpkg window always displays one of the five available worksheets. To see a worksheet other than the one currently displayed, use the Worksheet Selection tabs, discussed in IDREF="65956" TYPE="TITLE""Using the Worksheet Selection Tabs". Here are the five swpkg worksheets, listed in the order in which you should fill them out:Create Product HierarchyIDREF="93088" TYPE="TITLE""Creating a Product Hierarchy: The Basic Steps" lists the steps for filling out this worksheet.Tag FilesIDREF="47279" TYPE="TITLE""Tagging the Files: The Basic Steps" lists the steps for filling out this worksheet.Edit Permissions and DestinationsIDREF="49236" TYPE="TITLE""Editing Permissions and Destinations: The Basic Steps" lists the steps for filling out this worksheet.Add AttributesIDREF="37152" TYPE="TITLE""Adding Installation Attributes: The Basic Steps" lists the steps for filling out this worksheet.Build ProductIDREF="11306" TYPE="TITLE""Building the Product: The Basic Steps" lists the steps for filling out this worksheet.Work through the worksheets in order (beginning with the Create Product Hierarchy worksheet, which is the worksheet that's automatically selected when you start up swpkg). Fill in all necessary information before moving to the next worksheet. (It's necessary to work through the worksheets in order because the later worksheets depend on information entered in the earlier worksheets.)If you're new to packaging for Software Manager, you might want to read IDREF="88726" TYPE="TITLE"Chapter 2, "The swpkg Tutorial," before you try to use swpkg to package your own application.LBL="" HELPID="menu.bar"ID="96526"Using the swpkg Menusswpkg has three pull-down menus located on the menu bar, the horizontal bar at the top of the swpkg window.The three pull-down menus are:The File Menu, which allows you to clear, open, save, and append spec and IDB files or to quit swpkgThe View Menu, which allows you to hide or show the Message AreaThe Help Menu, which provides your main entry point into swpkg's online helpThe rest of this section explains each of the three menus in more detail.LBL="" HELPID="menu.bar.file"ID="94029"Using the File MenuThe File pull-down menu, shown in IDREF="50696" TYPE="GRAPHIC"Figure 1-1, provides menu items that allow you to clear, open, save, and append spec and IDB files or to quit swpkg. (spec and IDB files are the files in which swpkg stores all the information about your product installation that you enter into the swpkg worksheets.)FILE="file.menu.gif" POSITION="MARGIN" SCALE="FALSE"LBL="1-1"Figure 1-1 ID="50696"The swpkg File MenuEach item on the File pull-down menu (except "Quit") has a rollover menu that allows you to choose whether you want the selected action performed on the spec file, the IDB file, or both. All of the File menu items log a message in the Message Area (located below the Worksheet Selection tabs).NoteWhen creating or renaming spec and IDB files, make sure that your spec filenames end with the .spec suffix and IDB filenames end with the .idb suffix.Here's a brief description of each of the items on the File pull-down menu:Use the "New" menu item to clear the spec and or/IDB file(s) for the current swpkg session of all entries. This overwrites any existing spec and/or IDB files for the current session. (swpkg posts a dialog asking if you want to abandon the current spec and IDB files before opening new ones. If you click the Cancel button, swpkg aborts creating a new spec and/or IDB file(s).)Use the "Open" menu item to open an existing spec and/or IDB file and load the information from the opened file(s) into the current swpkg session. This overwrites any existing spec and/or IDB files for the current session. (swpkg posts a dialog asking if you want to abandon the current spec and IDB files before opening new ones. If you click the Cancel button, swpkg aborts creating a new spec and/or IDB file(s).)Use the "Append" menu item to append an existing spec and/or IDB file onto the corresponding file(s) for the current swpkg session.Use the "Save" menu item to save the current spec file, IDB file, or both. These files contain the information you've entered into swpkg's worksheets during the current session. If you haven't yet opened or saved the spec and/or IDB file(s) for the current product, swpkg asks you to specify the filename(s). Use the "Save As" menu item to save all the information you've entered into the current swpkg session. (This information is saved in the spec and IDB files.) When you select the "Save As" menu item, brings up a file selection box for specifying an arbitrary path and filename for your files.Use the "Create Patch..." menu item to begin the process of creating a patch product. When you select this item, a dialog opens in which you name your patch product and select the files you want to include in the product. Before using this item, you need to "Open" the spec and IDB files for the original product. See IDREF="47044" TYPE="TITLE"Chapter 8, "Creating a Patch Product."Use the "Quit" menu item to quit swpkg. LBL="" HELPID="menu.bar.view"ID="63577"Using the View MenuThe View pull-down menu, shown in IDREF="65191" TYPE="GRAPHIC"Figure 1-2, contains "Show Messages" and "Show SGI Board Names." Here's a brief description:Check the "Show Messages" menu item when you want the Message Area (shown in IDREF="16111" TYPE="GRAPHIC"Figure 1-5) is displayed. When an important message is logged, the Message Area appears automatically.FILE="view.menu.gif" POSITION="MARGIN" SCALE="FALSE"LBL="1-2"Figure 1-2 ID="65191"The swpkg View MenuCheck the "Show SGI Board Names" when you want the board names displayed in the Add Attributes worksheet.LBL="" HELPID="menu.bar.help"Using the Help MenuThe Help pull-down menu, shown in IDREF="44712" TYPE="GRAPHIC"Figure 1-3, provides easy access to swpkg's online help.FILE="help.menu.gif" POSITION="INLINE" SCALE="FALSE"LBL="1-3"Figure 1-3 ID="44712"The swpkg Help MenuTo display help:Select the "Click for Help" menu item to get help on a specific area of a worksheet. When you select "Click for Help" the cursor turns into a question mark. Position this question-mark cursor over the area that you want information about, then click the left mouse button. A help card appears. If you prefer, you can get the question-mark cursor by holding down the <Shift> key and pressing the <F1> key.Select the "Overview" menu item to see a brief overview of swpkg.Select the "Tutorial" menu item to see the swpkg tutorial.Select any of the listed help topics for help on that topic.Select the "Index" menu item, to see a list of available help cards. Select the "Keys and Shortcuts" menu item, to see a list of swpkg's keys and shortcuts.Select the "Product Info" menu item to see a brief product information message.LBL="" HELPID="worksheet.selection.tabs"ID="65956"Using the Worksheet Selection TabsUse the five Worksheet Selection tabs, shown in IDREF="72820" TYPE="GRAPHIC"Figure 1-4, to work through swpkg's five main worksheets. You can view only one worksheet at a time. Access each worksheet by clicking the left mouse button on the tab associated with that worksheet. FILE="selection.tabs.gif" POSITION="INLINE" SCALE="FALSE"LBL="1-4"Figure 1-4 ID="72820"The Worksheet Selection TabsYou can tell which worksheet you're in by looking at which tab is selected. In IDREF="72820" TYPE="GRAPHIC"Figure 1-4, the Create Product Hierarchy tab is selected.LBL="" HELPID="message.log"ID="17465"Using the Message AreaThe Message Area, shown in IDREF="16111" TYPE="GRAPHIC"Figure 1-5, is a scrollable text area containing messages from swpkg. In particular, the Message Area shows you error messages and provides feedback during the build process. FILE="message.area.gif" POSITION="INLINE" SCALE="FALSE"LBL="1-5"Figure 1-5 ID="16111"The Message AreaIf you prefer not to see this window, use the View pull-down menu on the menu bar to hide the Message Area.LBL="2"ID="88726"The swpkg TutorialThis chapter provides a brief (ten-minute) tutorial that takes you through the basic steps for installing a simple product. When you've finished, you'll have packaged an example application for installation. It's best to work along with the tutorial, completing the steps on your own workstation as you read through them.Noteswpkg is a versatile tool that allows you a great deal of freedom in creating installable files. Many of swpkg's features are not required to package an average product for installation. Rather than present all the features, this tutorial focuses on the basics needed to package an application. Don't worry that we don't use some of the buttons and text entry fields that appear in the worksheets. swpkg's more advanced features are discussed in the remaining chapters of this book.LBL="" HELPID="tutorial.setup"Step One: Setting Up the Example Application Used by This TutorialBefore you begin this tutorial, make sure you have the example application on your system. The example application is a loan calculator called finance. Given a term in years, the principle loan amount and interest rate, finance computes the monthly payment.   The files you use for this sample application are part of the swpkg product and include:Finance.adname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Application defaults file.Imakefilename='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'System independent imake description file.Finance.ftrname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'File typing rules file.README.financename='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'File describing the finance tutorial.finance.manname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Manual page (nroff source).main.cname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Calculator source program.Before you begin this tutorial, set up the finance application by following these steps:Become superuser:% su Change to the directory containing the finance files:# cd /usr/share/src/swpkg To create the Makefile, enter: # xmkmf To compile the finance application, enter:# make LBL="" HELPID="tutorial.running"Step Two: Running swpkgTo run swpkg, enter:# swpkg A small dialog box appears with a copyright notice, requesting that you wait while the system initializes. Then swpkg appears.When swpkg first appears, it displays the first of its five main worksheets: the Create Product Hierarchy worksheet, shown in IDREF="27553" TYPE="GRAPHIC"Figure 2-1.FILE="creat.prod.hierarchy.blank.ns.gif" POSITION="INLINE" SCALE="FALSE"LBL="2-1"Figure 2-1 ID="27553"The Create Product Hierarchy WorksheetLBL="" HELPID="tutorial.hierarchy"Step Three: Creating a Product HierarchyThe Create Product Hierarchy worksheet helps you structure your product into three levels: product, images, and subsystems. This is called creating a product hierarchy. swpkg stores this product structure information in the spec file. (If you want more information now about spec files and product hierarchies, see IDREF="87148" TYPE="TITLE""What's a Spec File?", and IDREF="90360" TYPE="TITLE""About Product Hierarchies".)For our example program, finance, we're just going to use the simplest product hierarchy: a software image and a reference page image with one subsystem each. We enter this information into the Create Product Hierarchy worksheet and tell swpkg to save it in the spec file. To create the product hierarchy, follow these steps:In the text field labeled Product Name, replace "my_product" with "finance." (See IDREF="83246" TYPE="TITLE""Setting the Product Name" for more detailed instructions on setting product names.)In the text field labeled Product Description, replace "My Product Description" with "Mortgage Calculation Program." (See IDREF="33498" TYPE="TITLE""Setting the Product Description" for more detailed information on setting product descriptions.)NoteRemember to enclose the description in quotes. You can use either single or double quotes.Click the Assign arrow button. If you neglect to click the Assign arrow button, swpkg ignores your changes. After you click the Assign arrow button, the name of the node originally labeled "my_product" reads "finance."That's it. You've created a product structure for your product. Your completed worksheet should look like the one shown in IDREF="82872" TYPE="GRAPHIC"Figure 2-2.FILE="creat.prod.hierarchy.tutorial.gif" POSITION="INLINE" SCALE="FALSE"LBL="2-2"Figure 2-2 ID="82872"The Completed Product Hierarchy WorksheetNoteThe template in the Product Hierarchy graph follows Silicon Graphics conventions for structuring and naming a product. Silicon Graphics strongly recommends that you follow these conventions. Users are presented with this structure when they use Software Manager. The descriptions you provide for your product, images, and subsystems are the first information about your product that users see. LBL="" HELPID="tutorial.tagging"Step Four: Tagging the Files The next step is tagging the files, so that swpkg knows which files belong in which subsystem. To keep track of this information, swpkg stores this information in an installation database file (IDB file). swpkg uses the IDB file to keep track of all sorts of information about the files that comprise your product, such as which files are included in which subsystem, where the files are located, and where Software Manager should put the files when it installs them. (IDB files can include other information tooname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'for a more detailed explanation of IDB files, see IDREF="87631" TYPE="TITLE""What's an IDB File?"). For now, we'll use the Tag Files worksheet to create a simplest-case IDB file. First, switch to the Tag Files worksheet by clicking the tab labeled "Tag Files" (the second of the five Worksheet Selection Tabs at the top of the worksheet). When you do this, the Create Product Hierarchy worksheet is replaced by the Tag Files worksheet, shown in IDREF="57413" TYPE="GRAPHIC"Figure 2-3. FILE="tag.files.tutorial.gif" POSITION="INLINE" SCALE="FALSE"LBL="2-3"Figure 2-3 ID="57413"The Tag Files WorksheetTo create a simple IDB file for the Finance product, follow these steps:In the field labeled File Browser, replace the text in the text:/usr/share/src/swpkg Press the <Enter> key. The contents of the /usr/share/src/swpkg directory appear in the File Browser.Select the files named finance, Finance.ad, finance.ftr, and finance.man. Using the scroll bar, scroll through the list of files until you find the finance.Click the left mouse button on finance. The line listing finance is highlighted in black. Hold down the <Ctrl> key and click the left mouse button on Finance.ad,finance.ftr, and finance.man.Click the Add arrow button (located just to the right of the File Browser). These lines appear in the IDB File Viewer:finance.sw.base usr/share/src/swpkg/Finance.ad
finance.sw.base usr/share/src/swpkg/finance
finance.sw.base usr/share/src/swpkg/finance.ftr
finance.sw.base usr/share/src/swpkg/finance.man(Don't worry about the lack of the slash before the usr directory. swpkg strips the source root from the pathname and uses the root that you specify in the Source Tree Root text field in the Edit Permissions & Destinations worksheet. The default source root is slash [/].)Notice that the lines listing the finance, Finance.ad, finance.ftr, and finance.man files now appear in bold in the File Browser. Files that are listed in the IDB File Viewer appear in bold in the File Browser so that they're easier to spot. Notice also that swpkg has assigned all four of these files to the finance.sw.base subsystem. This is because, when we added the files to the IDB File Viewer, the tag finance.sw.base was selected in the Tags Browser. The finance, finance.ftr, and Finance.ad files do belong in the finance.sw.base subsystem, but we'll need to switch the finance.man file to the finance.man.manpages subsystem. Click the left mouse button on the entry for finance.man in the IDB files list.In the Tags Browser, click the left mouse button on the finance.man.manpages tag. The line listing finance.man.manpages is highlighted in black.Click the left mouse button on the Assign arrow button.The IDB File Viewer now shows this line for the finance.man file: finance.man.manpages usr/share/src/swpkg/finance.manNow the finance.man file is assigned to the finance.man.manpages subsystem.Now swpkg knows which files belong in which subsystems. Your completed Tag Files worksheet should look like the one shown in IDREF="82212" TYPE="GRAPHIC"Figure 2-4.FILE="tag.files.tutorial2.gif" POSITION="INLINE" SCALE="FALSE"LBL="2-4"Figure 2-4 ID="82212"The Completed Tag Files WorksheetLBL="" HELPID="tutorial.permissions"Step Five: Setting Permissions and Destinationsswpkg now knows which files are in which subsystems and where to find each file, but it doesn't know where you want the files installed or what the permissions should be. You provide this information using the Edit Permissions & Destinations worksheet, and swpkg stores it in the IDB file. Open the Edit Permissions & Destinations worksheet by clicking the worksheet selection tab labeled "Edit Permissions & Destinations." The Tag Files worksheet is replaced by the Edit Permissions & Destinations worksheet, shown in IDREF="94583" TYPE="GRAPHIC"Figure 2-5.FILE="permiss.destin.1.tutorial.gif" POSITION="INLINE" SCALE="FALSE"LBL="2-5"Figure 2-5 ID="94583"The Edit Permissions & Destinations WorksheetIn the Edit Permissions & Destinations worksheet, you enter permissions and destination information for each file in your product. swpkg stores the information you enter in this worksheet in the IDB file. Later, when users install your product, Software Manager uses these lines to figure out where to install the files and how to set the file modes, owners, and groups. To edit the permissions information for the Finance.ad file, follow these steps:In the IDB File Viewer, double-click on the Finance.ad file. The current values for all the fields in the worksheet appear.In the Mode text field replace the value with:444 In the Owner text field replace the value with:root In the Owner text field replace the value with:sys In the Destination Directory text field replace the value with:usr/lib/X11/app-defaults In the Destination Filename text field replace the value with:Finance Click the Assign arrow button.We're going to leave the Source Tree Root and Destination Tree Root text fields alone, since we want to use the default values (/). For information on setting source and destination tree roots, see IDREF="30276" TYPE="TITLE""Setting Source and Destination Tree Roots".You've finished filling in the worksheet for the Finance.ad file. The Edit Permissions & Destinations worksheet should now look like the one shown in IDREF="86488" TYPE="GRAPHIC"Figure 2-6. For more detailed information on working with the text fields in the Permissions and Destinations sheet, see IDREF="52602" TYPE="TITLE""Setting Permissions and Destination Directories".FILE="permiss.destin.2.tutorial.gif" POSITION="INLINE" SCALE="FALSE"LBL="2-6"Figure 2-6 ID="86488"The Completed Worksheet for the Finance.ad FileNow, using IDREF="80940" TYPE="TABLE"Table 2-1 as your guide, edit the permissions and destinations information for each of the remaining files:Double-click a file.Complete its data as shown in IDREF="80940" TYPE="TABLE"Table 2-1:Click the Assign arrow button.COLUMNS="6"LBL="2-1"Table 2-1 ID="80940" (continued)        Permissions and Destinations for Remaining FilesLEFT="0" WIDTH="55"FileLEFT="60" WIDTH="33"ModeLEFT="100" WIDTH="34"OwnerLEFT="140" WIDTH="32"GroupLEFT="180" WIDTH="111"Destination DirectoryLEFT="300" WIDTH="55"Destination 
FilenameLEFT="0" WIDTH="55"financeLEFT="60" WIDTH="33"775LEFT="100" WIDTH="34"rootLEFT="140" WIDTH="32"sysLEFT="180" WIDTH="111"usr/bin/X11LEFT="300" WIDTH="55"financeLEFT="0" WIDTH="55"finance.ftrLEFT="60" WIDTH="33"444LEFT="100" WIDTH="34"rootLEFT="140" WIDTH="32"sysLEFT="180" WIDTH="111"usr/lib/filetype/installLEFT="300" WIDTH="55"finance.ftrLEFT="0" WIDTH="55"finance.manLEFT="60" WIDTH="33"644LEFT="100" WIDTH="34"rootLEFT="140" WIDTH="32"sysLEFT="180" WIDTH="111"usr/man/u_man/man1LEFT="300" WIDTH="55"finance.1You've finished filling in the Edit Permissions & Destinations worksheet, now you're ready to add installation attributes to your product.LBL="" HELPID="tutorial.attributes"ID="74805"Step Six: Adding AttributesThe next step is to add any necessary installation attributes to the product's files. To add an installation attribute, you need to switch from the Edit Permissions & Destinations worksheet to the Add Attributes worksheet. Click the left mouse button on the Worksheet Selection Tab labeled "Add Attributes." The Add Attributes worksheet, shown in IDREF="77332" TYPE="GRAPHIC"Figure 2-7, appears.FILE="add.attr.blank.gif" POSITION="INLINE" SCALE="FALSE"LBL="2-7"Figure 2-7 ID="77332"The Add Attributes WorksheetThis worksheet allows you to set up certain installation attributes for the files in your product. In this example, we'll go with the simplest case: we'll use the exitop installation attribute to tell Software Manager to install the application's icon in the Icon Catalog after the user gives the quit command. Double-click the left mouse button on the first item in the IDB File Viewer, the Finance executable. Click the left mouse button on the exitop check button under "Software Attributes."In the text field under the exitop check button, type:"tag 0x000101A0 /usr/bin/X11/finance 
iconbookedit -add 'Category:File Name:/usr/bin/X11/finance' -syspage DesktopTools 
cd /usr/lib/filetype 
make -u" NoteThe entire list of commands is enclosed in a pair of double-quotes (" ").Click the Assign arrow button.For more information on the iconbookedit command, see section "Step Five: Installing Your Application in the Icon Catalog," and for more information on updating the Desktop database, see section "Step Four: Compiling the Source Files." Both sections are in Chapter 11 of the Indigo Magic Desktop Integration Guide.You've finished filling in the Add Attributes worksheet. The worksheet should now look like the one shown in IDREF="59842" TYPE="GRAPHIC"Figure 2-8.FILE="add.attr.tutorial.gif" POSITION="INLINE" SCALE="FALSE"LBL="2-8"Figure 2-8 ID="59842"The Completed Add Attributes WorksheetLBL="" HELPID="tutorial.building"Step Seven: Building the ProductTo build your product, you need to switch to the Build Product worksheet. Click the left mouse button on the Worksheet Selection Tab labeled "Build Product." The Build Product worksheet, shown in IDREF="82961" TYPE="GRAPHIC"Figure 2-9, appears.FILE="build.prod.blank.gif" POSITION="INLINE" SCALE="FALSE"LBL="2-9"Figure 2-9 ID="82961"The Build Product WorksheetThis worksheet lists the lines in the IDB file and shows the settings for the source root, the destination root, and the distribution directory. (The distribution directory is the directory where you want swpkg to put all the installable files it creates. This directory is often named dist, which is short for distribution.)For this simplest-case example, we're going to stick with the default distribution directory, /usr/dist and we won't select any of the Build Options check buttons (located below the distribution directory text field). For more information on the build options, see IDREF="81066" TYPE="TITLE""Selecting Build Options".Before building the product, it's a good idea to try a test and see if any problems crop up without having swpkg actually try to build the product.Click the left mouse button on the button labeled Test Build at the bottom right corner of the worksheet. If you haven't already saved your spec and idb files, swpkg displays a Save dialog asking where you want them saved. Click the OK button in the Save dialog for both files.If swpkg runs into problems, it lists them in the Message Area near the top of the worksheet.If no problems are listed, you're ready to build the product. To build the product:Click the left mouse button on the Build All button at the bottom of the worksheet.As swpkg builds your product, it displays any error messages in Message Area. When it's finished, it displays a message to that effect in the Message Area. Now you're ready to quit swpkg. Quit by selecting the "Quit" menu item from the File pull-down menu (described in IDREF="94029" TYPE="TITLE""Using the File Menu").LBL="" HELPID="tutorial.installing"Step Eight: Installing and Running the ProductAfter you've built the product, use Software Manager to install it on your local workstation. Look at the short and long names Software Manager lists for your product, images, and subsystemsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'are they clear and distinct? After your product is installed, quit Software Manager. Were all the files installed in the correct places? Does the icon appear in the Icon Catalog?LBL="3"ID="63587"Creating a Product HierarchyThis chapter explains the first step for packaging your application for installation: creating a product hierarchyname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'an installation structurename='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'for your product. This chapter contains these sections:IDREF="66989" TYPE="TITLE""Creating a Product Hierarchy: Before You Begin" provides some background information and lists the prerequisites for creating a product hierarchy. IDREF="93088" TYPE="TITLE""Creating a Product Hierarchy: The Basic Steps" lists the basic steps for creating a product hierarchy and explains where to find more detailed instructions for each step. IDREF="81488" TYPE="TITLE""Using the Create Product Hierarchy Worksheet" describes the features of the worksheet and explains how to use these features to create your product hierarchy.LBL="" HELPID=""ID="66989"Creating a Product Hierarchy: Before You BeginThis section lists the prerequisites for creating a product hierarchy and defines spec files and product hierarchies. LBL="" HELPID=""PrerequisitesTo package an application successfully, you need knowwhat objects need to be builthow these objects should be grouped within the productwhere the objects are locatedwhere they should be installed on the users' workstationswhat permissions they should have on the users' workstationsLBL="" HELPID=""About ID="90360"Product Hierarchiesswpkg requires that you organize your application's files into a three-level hierarchy. The highest level is the product level, the second level is the image level, and the third level is the subsystem level. At the product level, software is grouped into distinct products. At the image level, a single product's files are grouped according to type: for example, one image for the software, and another for reference pages. At the subsystem level, the files in each image are organized into groups of files that are installed as a unit. The purpose is to create subsystems consisting of related files that your users might want to install (or decline to install) as a group. For example, if your application provides several optional templates, you might group them together into a single subsystem. That way, users who are short on disk space, or who don't think they need the optional templates, can choose not to install that particular subsystem. Similarly, if all your documentation files (reference pages, release notes, online help, online books, and so on) are grouped into a single image, users can choose to install them all together, rather than subsystem by subsystem. So, if you choose your product structure carefully, you can make the installation process much easier for your users.LBL="" HELPID=""An Example Product HierarchyHere's an example of how you might create a product hierarchy for a simple application. Suppose you want to package a paint application called magritte. Let's say that the magritte application includes the basic application software, some clip art, a reference page, and some release notes. Here's a good way to structure your files for installation:Separate the software files (the application software and the clip art) and the documentation (the reference page and release notes) into two separate images, called sw and man, respectively. Divide the software image (sw) into two subsystems: one, called base, containing the base application software; and the other, called optional, containing the clip art. Divide your documentation image (man) into two subsystems: one, called manpages, containing the reference page and the other, called relnotes, containing the release notes. In this example, our product hierarchy would be one product (magritte) containing two images (sw and man), with each image containing two subsystems (base and optional, and manpages and relnotes, respectively). IDREF="75267" TYPE="GRAPHIC"Figure 3-1 illustrates the structure of this example product hierarchy.FILE="examp.prod.hier.gif" POSITION="INLINE" SCALE="FALSE"LBL="3-1"Figure 3-1 ID="75267"Example Product HierarchyLBL="" HELPID=""ID="80913"Naming Images and SubsystemsImage and subsystem names must reflect the product hierarchy by following these naming conventions:Each image has a name of the form:product.imageFor example, if the name of the product is magritte, and the image is sw, then the full image name would be:magritte.swEach subsystem has a name of the form:product.image.subsystemFor example, if the name of the product is magritte, the image is sw, and the subsystem is base, then the full subsystem name would be:magritte.sw.baseIDREF="37851" TYPE="GRAPHIC"Figure 3-2 shows the correct product, image, and subsystem names, for the example introduced in IDREF="90360" TYPE="TITLE""About Product Hierarchies". FILE="prod.hier.names.gif" POSITION="INLINE" SCALE="FALSE"LBL="3-2"Figure 3-2 ID="37851"Example Product Hierarchy NamesLBL="" HELPID=""ID="19628"Silicon Graphics Conventions for Product HierarchyThis section lists the Silicon Graphics conventions for structuring your product hierarchy. Silicon Graphics conventions strongly recommend that:Your product must contain an image named sw that contains all the software subsystems for your product.The sw image must contain a subsystem named base that contains the base software for your product. (You might put optional software in a subsystem named optional, but this is not required.)If your product contains reference pages or release notes, it must also include an image named man that contains the subsystems that include the reference pages and release notes.The subsystem containing the reference pages must be named manpages and the subsystem containing the release notes must be named relnotes.You are not required to follow these conventions, but Silicon Graphics strongly recommends that you do.LBL="" HELPID=""ID="87148"What's a Spec File?swpkg stores information about the product hierarchy in the product specification (spec) file for your product. When you enter information about your product hierarchy in the Create Product Hierarchy worksheet, you are actually creating a spec file for your product. In general, here's what goes in a spec file:product, image, and subsystem namesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'these names appear in Software Manager and versions listingsproduct, image, and subsystem descriptionsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'these descriptions appear in Software Manager and versions listingsinstallation orderinitial installation informationinstallation prerequisites and incompatibilitiesautomatic removal of obsolete subsystemsthe version numberLBL="" HELPID="create.product.hier.worksheet"ID="93088"Creating a Product Hierarchy: The Basic StepsThese are the steps for creating a product hierarchy:Edit the nodes in the template displayed in the Product Hierarchy graph so that the graph has the right number of images, each containing the right number of subsystems.If the template in the Product Hierarchy graph does not provide the right number of images and/or subsystems for your product hierarchy, add or delete existing images or subsystems as necessary. (See IDREF="96373" TYPE="TITLE""Adding and Deleting Nodes" for instructions.)Edit the Product Specification sheet to set the product name and description. (See IDREF="94368" TYPE="TITLE""Entering Product Specifications" for instructions.)Edit the Image Specification sheet to set image names and descriptions and, if necessary, to specify any of these installation options:installation orderversion number (instead of using the default value)(See IDREF="35329" TYPE="TITLE""Entering Image Specifications" for instructions.)Edit the Subsystem Specification sheet to set subsystem names and descriptions and, if necessary, to specify any of these installation options:default installationminiroot installationYou might also need to specify:prerequisite subsystemsincompatible subsystemsreplacement subsystems(See IDREF="72183" TYPE="TITLE""Entering Subsystem Specifications" for instructions.)Save the spec file by selecting "Spec" from the "Save" rollover menu in swpkg's File menu.LBL="" HELPID=""ID="81488"Using the Create Product Hierarchy WorksheetWhen swpkg first appears, it displays the Create Product Hierarchy worksheet, shown in IDREF="70093" TYPE="GRAPHIC"Figure 3-3. This section describes the features of the worksheet and explains how to use it to create a product hierarchy.FILE="creat.prod.hierarchy.blank.online.gif" POSITION="INLINE" SCALE="FALSE"LBL="3-3"Figure 3-3 ID="70093"The Create Product Hierarchy WorksheetLBL="" HELPID="spec.graph"ID="36655"Creating a Product StructureThe Product Hierarchy graph, shown in IDREF="32982" TYPE="GRAPHIC"Figure 3-4, displays a template for a standard product hierarchy. You can alter this template to reflect a new product hierarchy. If you open an existing spec file, the Product Hierarchy graph displays the product hierarchy for that spec file. (To open an existing spec file, use the "Open" item in the File menu.)FILE="product.struct.graph.online.gif" POSITION="INLINE" SCALE="FALSE"LBL="3-4"Figure 3-4 ID="32982"The Product Hierarchy GraphUse the Product Hierarchy graph to create a structure for your product hierarchyname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'that is, arrange the nodes in the graph so that the graph has the right number of images, each containing the right number of subsystems. (For an explanation of nodes, see IDREF="13438" TYPE="TITLE""Selecting Nodes".) Add or delete nodes as necessary (see IDREF="96373" TYPE="TITLE""Adding and Deleting Nodes" for instructions). For a general discussion of product hierarchies, along with guidelines on structuring your product, refer to IDREF="90360" TYPE="TITLE""About Product Hierarchies".LBL="" HELPID="spec.graph.nodes"ID="13438"Selecting NodesThe Product Hierarchy graph provides a graphical display of your product hierarchy, in which products, images, and subsystems are shown as rectangles (or nodes) and relationships as connecting lines (or arcs). (If the graph is larger than the viewing area, scroll bars are enabled.)When you select a node, the Specification sheet associated with that node appears to the right of the Product Hierarchy Graph. (The Specification sheets are groups of text fields and/or check buttons that you can use to provide the relevant installation information about each product, image, and subsystem in your installation plan.) To select a node, click it with the left mouse button. The Specification sheet for that node appears to the right of the Product Hierarchy Graph. The Create Product Hierarchy worksheet has three different types of Specification sheets: the Product Specification sheet (described in IDREF="94368" TYPE="TITLE""Entering Product Specifications"), the Image Specification sheet (described in IDREF="35329" TYPE="TITLE""Entering Image Specifications"), and the Subsystem Specification sheet (described inIDREF="72183" TYPE="TITLE""Entering Subsystem Specifications").LBL="" HELPID="spec.graph.pathname"The Spec File Path LabelThe spec file path label shows the current spec file pathname. If no valid spec file is identified, the path is left blank. For information on creating a spec file or changing the spec file path, see IDREF="94029" TYPE="TITLE""Using the File Menu". For a definition of a spec file, read IDREF="87148" TYPE="TITLE""What's a Spec File?".LBL="" HELPID="spec.graph.add.delete"ID="96373"Adding and Deleting NodesUse the Add button (located at the top of the product hierarchy graph) to add products, images, and subsystems to your product hierarchy (spec file):To add a new product, make sure no nodes are selected (by clicking the background of the Product Hierarchy Graph), then click the Add button.To add a new image, select the node for the product to which the image will belong, then click the Add button.To add a new subsystem, select the node for the image to which the subsystem will belong, then click the Add button.Use the Delete button to delete a product, image or subsystem by selecting the relevant node and clicking the Delete button.LBL="" HELPID="spec.graph.controls"Selecting Display Options for the Product Hierarchy GraphThe product hierarchy graph has a control area containing a row of graph controls, shown in IDREF="38166" TYPE="GRAPHIC"Figure 3-5.FILE="graph.control.area.online.gif" POSITION="INLINE" SCALE="FALSE"LBL="3-5"Figure 3-5 ID="38166"Graph Display ControlsThese graphical view controls are:Zoom menu Shows the current scale of the graph. If clicked, a popup menu appears displaying other available scales. The scaling range is between 15% and 300% of the normal (100%) size.Zoom Out buttonResets the scale of the graph to the next available smaller size in the range.Zoom In buttonResets the scale of the graph to the next available larger size in the range.NoteIf you drag a node into a new position and then use one of the Zoom buttons, the node returns to its initial position.Overview buttonDisplays the Overview window, which lets you view the entire graph at a reduced scale. The Overview window has a movable viewport that lets you select the portion of the graph displayed in the main window. The Overview window also has an Admin menu with these three selections:"Scale to Fit" scales the graph to match the aspect ratio of the overview window."Show Arcs" displays or hides the arcs between the nodes. "Close" closes the Overview window.Multiple Arcs buttonToggles between single and multiple arc mode. (This button is not useful in the Product Hierarchy Graph.)Realign buttonRedraws the graph, restoring the positions of any nodes that were repositioned.Rotate buttonFlips the orientation of the graph between horizontal (calling nodes at the left) and vertical (calling nodes at the top).NoteIf you reposition the nodes by dragging and then change orientation, the nodes will return to their initial positioning relative to each other.LBL="" HELPID="spec.productsheet"ID="94368"Entering Product SpecificationsUse the Product Specification sheet to enter your product's name and description. The Product Specification sheet, shown in IDREF="42324" TYPE="GRAPHIC"Figure 3-6, is visible whenever a product node is selected in the Product Hierarchy graph. For example, if you click the left mouse button on the node labeled my_product in the product hierarchy graph, the Product Specification sheet for the my_product product appears to the right of the product hierarchy graph. FILE="product.spec.sheet.gif" POSITION="INLINE" SCALE="FALSE"LBL="3-6"Figure 3-6 ID="42324"The Product Specification SheetTo enter information in the text fields, just delete the existing text, type in the new text, and click the Assign arrow button. If you don't click the Assign arrow button, your changes will be lost when you select a different node.LBL="" HELPID="spec.detail.productname"ID="83246"Setting the Product NameTo name the product, follow these steps:Delete the existing text in the Product Name text field.Type in the new text.Click the Assign arrow button. The product name is the short name for the productname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'this is the "short" name that appears in Software Manager listings (the "long" name is the product description). Because the display length for both long and short names in Software Manager is typically 30 characters, the product name should be short so that subsystem names are less likely to overflow their column in versions and Software Manager listings. Short product names are also easier for users to enter. Do not choose a product name that begins with a digit.LBL="" HELPID="spec.detail.productid"ID="33498"Setting the Product DescriptionTo change the product description, follow these steps:Delete the existing text in the Product Description text field.Type in the new description.NoteAlways enclose your description within quotes. You can use either single or double quotes. You can use one type of quotes as part of your description if you use the other type of quotes to quote the description. For example, `Acme 1/2" Tape Support' is a valid description as long as you enclose it in single quotes.Click the Assign arrow button.The product description is a brief description of your product that begins with the product name. This description is the "long" name that appears in Software Manager listings (the description also appears in versions listings). The description should be brief but informative, since this might be the only information users have to help them to decide whether to install your software.In particular, the product description should begin with the marketing name of the product. Do not use the words "option," "version," "system," or "release," unless they are part of the name of the product (for example, Maintenance Release and Network File System).Here are some general guidelines for creating descriptions:Limit the string to 30 characters, if possible. Anything larger gets wrapped or truncated by Software Manager and versions.When abbreviating words, use only standard, easily understood abbreviations.Capitalize the first letter of each word, except prepositions.Do not use punctuation. Do not include part numbers or marketing codesInclude a market version number (version 1.2, for example)So, for example, assume your product is a mortgage calculation application called Mortgage Calculator, that this is the first version of the product, and that its marketing code is M3-486. A good product description would be: "Mortgage Calculator 1.0"name='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'a bad one would be: "Mort.Cal.M3-486."LBL="" HELPID="spec.imagesheet"ID="35329"Entering Image SpecificationsThe Image Specification sheet, shown in IDREF="16486" TYPE="GRAPHIC"Figure 3-7, is visible whenever an image node is selected in the Product Hierarchy graph. For example, if you click the left mouse button on the image labeled sw in the Product Hierarchy Graph, the Image Specification sheet for the sw image appears to the right of the Product Hierarchy Graph. FILE="image.spec.sheet.gif" POSITION="INLINE" SCALE="FALSE"LBL="3-7"Figure 3-7 ID="16486"The Image Specification SheetYou can select any image in this Specification sheet by clicking the image name in the list of images below the text fields.Use the Image Specification sheet to enter the image's name, description, version number, and installation order (each of these text fields is discussed in detail in this section). To enter information in the text fields, delete the existing text, type in the new text, and click the Assign arrow button. If you don't click the Assign arrow button, your changes will be lost when you select a different node.LBL="" HELPID="spec.detail.imagename"Naming the ImageTo change the name of an image, follow these steps:Select the appropriate image node in the Product Hierarchy graph.Delete the existing text in the Image Name text field.Type in the new name for the image.Click the Assign arrow button.Refer to IDREF="80913" TYPE="TITLE""Naming Images and Subsystems" for guidelines.LBL="" HELPID="spec.detail.imageid"Changing the Description of the ImageTo change the description of an image, follow these steps:Select the appropriate image node in the Product Hierarchy graph.Delete the existing text in the Description text field.Type in the new description for the image.Click the Assign arrow button. NoteAlways enclose your description within quotes. You can use either single or double quotes. You can use one type of quotes as part of your description if you use the other type of quotes to quote the description. For example, `Acme 1/2" Tape Support' is a valid description as long as you enclose it in single quotes.If the image in question is the sw or man image, you can just leave the description as it is in the corresponding (sw or man) template.The image description is a brief description of the image. Since this description appears in Software Manager listings, it's important that the description be informative and distinct from the product and subsystem descriptions. Like the product description, the image description should begin with the marketing name of the product. This is because Software Manager lists the products, images, and subsystem according to these descriptionsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'if your product, image, and subsystem names begin differently, they aren't listed together.Image descriptions should include the product name and a description of the image (for example, Software, Documentation, or Manual Pages). Do not include a version or release number. Here are some general guidelines for creating descriptions:Limit the string to 30 characters, if possible. Anything larger gets wrapped or truncated by Software Manager and versions.When abbreviating words, use only standard, easily understood abbreviations.Capitalize the first letter of each word, except prepositions.Do not use punctuation. Do not include part numbers or marketing codes.LBL="" HELPID="spec.detail.imageversion"Changing the Version Number of the ImageChoose a version number for your images. You can keep the existing, default value for the version number or you can create a version number of your own. Some rules and suggestions for selecting version numbers are:The version number can contain no more than ten digits.The version number cannot contain a decimal. Do not use your software release number as the version number.Start with a low version number. The version number of each software distribution you create for your product is higher than the last value. Over the lifetime of your product, 999999999 is the highest version number you can use. After that, you must change product or image names.Type the version number directly into the text field labeled "Version," then click the Assign arrow button.LBL="" HELPID="spec.detail.imageorder"Changing the Installation Order of the ImageThe number in the text field labeled Installation Order tells Software Manager the order in which to install the various images. If you want to specify that some of your images be installed before others, select the installation order numbers accordingly. (Remember to click the Assign arrow button after typing in each order number.)Installation order is specified by numbers in the range of 0 to 9999. The lower the order number, the earlier that image will be installed. If you do not specify an order number, the default is 9999 (the highest order, meaning the last to be installed). Images with equal order numbers are installed in alphabetical order.Software Manager installs products in alphabetical order by default. Within each product, images are also installed in alphabetical order. Similarly, the subsystems in each image are installed in alphabetical order. For example, suppose there are two products, a and b. Each of them contains two images, sw and man. Each image has two subsystems, x and y. The installation order of these subsystems is:a.man.x
a.man.y
a.sw.x
a.sw.y
b.man.x
b.man.y
b.sw.x
b.sw.yYou can control the order in which images are installed. In the example above, for instance, when you package the b product you can specify that the subsystems in the b.sw image should be installed before the subsystems in the a.sw image.In the example above, to force b.sw to be installed before a.sw, give the b.sw image an order number less than 9999. The installation order of the subsystems would then be:b.sw.x
b.sw.y
a.man.x
a.man.y
a.sw.x
a.sw.y
b.man.x
b.man.yLBL="" HELPID="spec.subsyssheet"ID="72183"Entering Subsystem SpecificationsThe Subsystem Specification sheet, shown in IDREF="50623" TYPE="GRAPHIC"Figure 3-8, is visible whenever a subsystem node is selected in the Product Hierarchy Graph. For example, if you click the left mouse button on the subsystem labeled optional in the Product Hierarchy Graph, the Subsystem Specification sheet for the optional subsystem appears to the right of the graph. FILE="subsys.spec.sheet.gif" POSITION="INLINE" SCALE="FALSE"LBL="3-8"Figure 3-8 ID="50623"The Subsystem Specification SheetUse the Subsystem Specification sheet to enter the subsystem's name, description, installation options, and mapping and rules information (each of these text fields is discussed in detail in this section). To select installation options, just click the left mouse button on the check button next to the option you want to select, then click the Assign arrow button. If you don't click the Assign arrow button, your changes will be lost when you select a different node.You can select as many installation options as you wish for each subsystem, but be careful not to select any of these options unnecessarily. For more information, see IDREF="34573" TYPE="TITLE""Setting Basic Installation Options for the Subsystem."LBL="" HELPID="spec.detail.subsysname"Naming the SubsystemTo change the name of the selected subsystem, follow these steps:Delete the existing text in the Subsystem Name text field. Type in the new text.Click the Assign arrow button. Refer to IDREF="80913" TYPE="TITLE""Naming Images and Subsystems" for guidelines.LBL="" HELPID="spec.detail.subsysid"Changing the Description of the SubsystemTo change the description of the selected subsystem, follow these steps:Delete the existing text in the Description text field.Type in the new description.Click the Assign arrow button. NoteAlways enclose your description within quotes. You can use either single or double quotes. You can use one type of quotes as part of your description if you use the other type of quotes to quote the description. For example, `Acme 1/2" Tape Support' is a valid description as long as you enclose it in single quotes.The subsystem description is a brief description of the image. Since this description appears in Software Manager listings, it's important that the description be informative and distinct from the product and image descriptions. Like the product and image descriptions, the subsystem description must begin with the marketing name of the product. This is because Software Manager lists the products, images, and subsystem according to these descriptionsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'if your product, image, and subsystem names begin differently, they aren't listed together. (The image description also appears in versions listings.)Here are some general guidelines for creating descriptions:Limit the string to 30 characters, if possible. Anything larger gets wrapped or truncated by Software Manager and versions.When abbreviating words, use only standard, easily understood abbreviations.Capitalize the first letter of each word, except prepositions.Do not use punctuation. Do not include part numbers or marketing codes.LBL="" HELPID="spec.detail.installoptions"ID="34573"Setting Basic Installation Options for the SubsystemThe Installation Options check buttons that appear in the Subsystem Specification sheet represent three installation options. The first two optionsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Default and Minirootname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'are user selected. The third optionname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Patchname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'is selected automatically when you create a patch through the "Create Patch..." menu item in the File menu. You can select none, one, or all of these options.LBL="" HELPID="spec.detail.installoptions.default"The Default OptionThe Default option specifies that each time a product is installed, some or all of the subsystems are automatically selected for installation (these subsystems are called "default" subsystems). Users can deselect these subsystems if they choose. If you have a lot of subsystems, some of which are not necessary for the average user, you might want to tag the essential subsystems as default.To set this option, click the left mouse button with the cursor over the option. After making your selection, click the Assign button to assign the option(s) to the selected subsystem.LBL="" HELPID="spec.detail.installoptions.miniroot"The Miniroot OptionThe Miniroot option specifies that a subsystem must be installed from the minirootname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'in other words, in order to install the subsystem, the user must bring the workstation or server down, install a miniroot, and run Software Manager from there. This option is only for subsystems that involve kernel code or other software that cannot be installed normally. Use the Miniroot button only when absolutely necessary!To set this option, click the left mouse button with the cursor over the option. After making your selection, click the Assign button to assign the option(s) to the selected subsystem.NoteWhen using Software Manager to install your product, this option is shown as a flag type of `b'.LBL="" HELPID="spec.detail.installoptions.patch"The Patch OptionThe Patch option specifies that a subsystem is part of a patch product and must have a follows rule. swpkg automatically assigns the Patch option to all subsystems that are part of a patch product. This option is insensitive to user selection. See IDREF="47044" TYPE="TITLE"Chapter 8, "Creating a Patch Product."LBL="" HELPID="spec.detail.rulesText"ID="30446"Setting Installation RulesThe Rules text field allows you to specify, for each subsystem in your product, those subsystems that: are prerequisites for installationare incompatible with the selected subsystemshould be replaced by the selected subsystemIn order to make these specifications, you need to use the special syntax required for writing these rules. The syntax is described in the sections below and examples are provided.To use the Rules text field, follow these steps:Select the appropriate subsystem node in the Product Hierarchy Graph.Type the correct rules specifications into the Rules text field. (The syntax is described in the sections below.)Click the Assign arrow button.Adding Replacement StatementsYou can tell Software Manager to remove a specified subsystem when it installs the currently selected subsystem. Essentially, this means telling Software Manager to replace one subsystem with another, usually newer, subsystem. You do this using the replaces statement.Replaces statements are powerful and flexiblename='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'taking the time now to learn how they work will help you later when you need to make changes to your product. The replaces line is critical when a product is repackaged (for example, when files in the product get moved around, when subsystems get new names, and so on).A replaces line simply specifies that you want to replace an older subsystem with a newer subsystem. Specify the name of the subsystem and the range of version numbers you want replaced. Here's the format of the replaces statement:replaces name lowvers highvers or      replaces selfwherenameis the name of the subsystem that is going to be replaced.lowversis the lower boundary of the range of versions of name that should be replaced. It can be 0, or any version number value that you supply.highversis the higher boundary of the range of versions to be replaced. highvers can be one of the following:oldvers, defined as the current version minus 1an actual version number that you supplyselfSoftware Manager always assumes that a subsystem replaces an older subsystem of the same name. Since this is the default case, you do not need to specify it explicitly.You can specify as many replaces statements as you need.For each subsystem that has a replaces line, Software Manager looks to see if the subsystem specified in the replaces line is installed and if its version falls in the range given in the replaces line. If the installed version is in the range, the new subsystem is selected for installation automatically. If the new subsystem is installed, the old version is removed automatically.There are four typical ways to use replaces:Specify that a subsystem replaces older versions of itself.Specify that a subsystem replaces maintenance versions of itself.Specify that a subsystem replaces different subsystems that are now obsolete.Specify replacement directions in complex repackaging situations where one subsystem has become several or several older subsystems have been restructured into several new ones.Here are some examples of replaces statements:A subsystem gets a name change. Suppose that the subsystem rfind.man.rfind is split into two subsystems, rfind.man.client and rfind.man.server. To make sure that rfind.man.rfind is replaced properly, you could create a replaces statement that looks like this: replaces rfind.man.rfind 0 oldvers Alternately, you could specify an exact old version number so that your replaces statement would look something like this:replaces rfind.man.rfind 0 1006000106 Or, suppose two or more subsystems get repackaged into a single subsystem. For example, say the rfind.sw.client subsystem and the rfind.sw.server subsystem are combined and the new subsystem is called rfind.sw.rfind. To replace the old client and server, you would use these replaces statements: replaces rfind.sw.client 0 oldvers 
replaces rfind.sw.server 0 oldvers If either of the old subsystems rfind.sw.client or rfind.sw.server is installed, rfind.sw.rfind will replace them.Finally, suppose you want to replace a maintenance release of rfind.sw.client with a new base release. You need to replace both the maintenance release and the previous base release. Your replacement statements would look like this:replaces maint.rfind_sw.client 0 oldvers 
replaces rfind.sw.client 0 oldvers Setting IncompatibilitiesYou can specify that a subsystem in your product can be installed on a user's workstation only if one or more other subsystems are not installed. This is known as specifying incompatibilities. NoteDo not specify incompatibilities unless absolutely necessary.When incompatibilities are specified, Software Manager does not allow users to install subsystems that are incompatible. It checks for incompatibilities at two different times: When a subsystem is selected for installation, Software Manager determines whether or not it is incompatible with something that has already been installed.When the user quits, Software Manager checks again among the subsystems it has just installed for incompatibilities.The format for incompatibility statements is the same as for replaces statements. Specify the name of the subsystem and the range of version numbers you want to declare incompatible. The format of the incompatibilities statement is:incompat name lowvers highvers wherenameis the name of the subsystem that is incompatible.lowversis the lower boundary of the range of versions of name that are incompatible. It can be 0, or any version number value that you supply.highversis the higher boundary of the range of versions that are incompatible. highvers can be one of the following:maxint, the maximum value that a long int can holdoldvers, defined as the current version minus 1an actual version number that you supplyHere are some examples of incompatibility statements:To specify that the rfind.man.rfind subsystem is incompatible with the selected subsystem, you could create a incompatibility statement that looks like this: incompat rfind.man.rfind 0 oldvers Alternately, you could specify an exact old version number so that your incompatibility statement would look something like this:incompat rfind.man.rfind 0 1006000106 Setting PrerequisitesYou can specify that a subsystem in your product can be installed on a user's workstation only if one or more other subsystems are also installed. That is, you can set prerequisites for the installation of a subsystem. Do not specify subsystems outside your product as prerequisites unless absolutely necessary. Prerequisites can be a real problem, because the prerequisite product can change names or versions, making your prerequisite statement obsoletename='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'which can prevent installation of your product!To set prerequisites for a subsystem, first select the appropriate subsystem node in the Product Hierarchy Graph. Then type the text specifying the prerequisites into the Rules text field. You can specify a list of subsystems that must all be installed in order for users to install the new subsystem:prereq (
        name lowvers highvers 
        name lowvers highvers 
        name lowvers highvers 
        )wherenameis the name of the subsystem that is a prerequisite.lowversis the lower boundary of the range of versions of name. It can be 0, or any version number value that you supply.highversis the higher boundary of the range of versions of name. highvers can be one of the following:maxint, the maximum value that a long int can holdoldvers, defined as the current version minus 1an actual version numberYou can also write a prereq that specifies that only one of the listed subsystems must be installed for the new subsystem:prereq (
        name lowvers highvers 
       )
prereq (
        name lowvers highvers 
       )Remember to press the Assign arrow button to update the subsystem node after filling in the text area. Here are some examples of prerequisite statements:To specify that the rfind.man.rfind subsystem is a prerequisite for the selected subsystem, you could create a prerequisite statement that looks like this: prereq rfind.man.rfind 0 oldvers  Alternately, you could specify an exact old version number so that your prerequisite statement would look something like this:prereq rfind.man.rfind 0 1006000106To specify that the rfind.man.server subsystem and the rfind.man.client subsystem must both be installed in order for the selected subsystem to be installed, you could write a prerequisite statement that looks like this:prereq (
         rfind.sw.server 0 oldvers
         rfind.sw.client 0 oldvers
        )To specify that either the rfind.man.server subsystem or the rfind.man.client subsystem must be installed in order for the selected subsystem to be installed, you would need to write two prerequisite statements. They might look like this:prereq (
         rfind.sw.server 0 oldvers
        )
prereq (
         rfind.sw.client 0 oldvers
        )LBL="" HELPID="spec.detail.mappingTextField"ID="53698"Editing Mapping Expressions DirectlyThis field allows you to write your own mapping expressions. It is highly unlikely that you'll need to use this field, since you can create almost any product structure and mapping using the swpkg GUI. However, in cases where you have very complicated existing IDB files that you need to modify, you might find it easier to create mapping expressions rather than restructure your product.If you decide you want to write your own mapping expressions, refer to IDREF="12412" TYPE="TITLE"Appendix A, "Writing Mapping Expressions."NoteIf you use any mapping expression other than a single subsystem name, enclose the expression within quotes. You can use either single or double quotes.LBL="" HELPID="spec.graph.apply"ID="17253"The Assign Arrow ButtonClicking the Assign arrow button saves the changes you made in the currently visible Product, Image, or Subsystem Specification sheet. If you switch to a different Specification sheet before clicking the Assign button, your changes are lost.For example, if you select a product node, then change the product name, then click the Assign button, the new product name is applied to the product node. On the other hand, if you select a product node, then change the product name, then select an image node without first clicking the Assign button, your new product name is not applied to the product node.LBL="4"ID="21309"Tagging the FilesAfter you create a product hierarchy using the Create Product Hierarchy worksheet, you need to assign each of your product's files to a subsystem in your product hierarchy. This is called tagging the files. You tag the files using the Tag Files worksheet. This chapter contains these sections:IDREF="75750" TYPE="TITLE""Tagging the Files: Before You Begin" provides some background information and lists the prerequisites for tagging the files.IDREF="47279" TYPE="TITLE""Tagging the Files: The Basic Steps" lists the basic steps for tagging your files.IDREF="72778" TYPE="TITLE""Using the Tag Files Worksheet" describes the features of the Tag Files worksheet and explains how to use the worksheet to tag your files.LBL="" HELPID=""ID="75750"Tagging the Files: Before You BeginThis section lists the prerequisites for tagging your files, and defines tags and IDB files.LBL="" HELPID=""PrerequisitesBefore you begin tagging the files, you must first create a product hierarchy using the Create Product Hierarchy worksheet (see IDREF="63587" TYPE="TITLE"Chapter 3).LBL="" HELPID=""ID="87631"What's an IDB File?swpkg stores the information you enter in the Tag Files worksheet in an installation database file (IDB file).The IDB file contains the following basic information for each file in your product: its location in a built source treeits location after installationits owner, group, and modewhat subsystem (group of files) it should be packaged inAn IDB file can include directories, links, and FIFOs as well as files.The IDB file may also list certain attributes to be associated with each file, including:the instruction that a binary file not be stripped before including it in the software distribution (the default is to strip binaries automatically)shell commands that are to be executed just before or after installation of the file (preops and postops)shell commands that are to be executed when exiting Software Manager (exitops)a specification that this file is to be installed only on workstations that have certain architectural characteristics, such as a particular type of processor or graphicsan indication that a previous version of this file may have been modified by users, and if so, how to install this fileLBL="" HELPID=""What's a Tag?swpkg requires that you tag each of your files with the name of the subsystem to which you want that file to belong. swpkg stores all of these tags in the IDB file and uses them to build the product. NoteYou can also create arbitrary tags, and map them to specific subsystems using the mapping expressions described in IDREF="12412" TYPE="TITLE"Appendix A, "Writing Mapping Expressions." This is almost never a good idea, but it can be useful when you need to modify extremely complicated IDB files.LBL="" HELPID="tag.files.worksheet"ID="47279"Tagging the Files: The Basic StepsYou can add the following items to your IDB file:filesdirectories (when you add a directory, all of its contents are added)linked fileslinked directoriesUsing the Tag Files worksheet, as shown in IDREF="81214" TYPE="GRAPHIC"Figure 4-1, follow these steps to enter files and directories into your product's IDB file and to assign them a subsystem:Add all the files and directories in your product to your IDB file. (Remember to add the .ftr and .fti files for your Desktop icon.) Use the File Browser to select your file(s) and directory(ies).Click the Add arrow button to add them to your IDB file. The items appear in the IDB file list.Select items from the IDB file list for tagging. You can select multiple items, as long as you're going to put them all in the same subsystem. From the Tags Browser, select the subsystem in which you want the selected items to appear. Then click the left mouse button on the Assign arrow button. Repeat Steps 2-3 until every item in your product is assigned to a subsystem.Save the IDB file by opening the File menu and selecting "Save IDB."CautionDo not include two files with the same full pathname in two different subsystems. If a file is included in two subsystems and both subsystems are installed, and one of the subsystems is subsequently removed, then the common file disappears, leaving a "hole" in the other subsystem. This rule applies only to files, not directories.LBL="" HELPID=""ID="72778"Using the Tag Files WorksheetThis section describes the features of the Tag Files worksheet, shown in IDREF="81214" TYPE="GRAPHIC"Figure 4-1, and explains how to use the worksheet to tag your files.FILE="tag.files.blank.online.gif" POSITION="INLINE" SCALE="FALSE"LBL="4-1"Figure 4-1 ID="81214"The Tag Files WorksheetLBL="" HELPID="file.browser"ID="54810"Selecting Product Files Using the File BrowserThe File Browser, shown in IDREF="99723" TYPE="GRAPHIC"Figure 4-2, is a tool that lets you select directories and files (including linked directories and files) to add to the IDB file. (You must add all the files in your product to the IDB file.) Use the File Browser to scroll through all the files in a directory and select the ones you need by clicking the left mouse button on the filename. Once you've made your selections, you add them to the IDB file by clicking the Add arrow button. The directories and files appear in the IDB File Viewer. When you add a directory, you add the directory and everything in it including subdirectories.FILE="file.browser.online.gif" POSITION="INLINE" SCALE="FALSE"LBL="4-2"Figure 4-2 ID="99723"The File BrowserThe File Browser consists of the browsing directory text field (which specifies the browsing directory), the file list (a list of all the files and directories in the browsing directory), the Filter text field, and the All and None buttons.LBL="" HELPID="file.browser.dirfield"Setting the Browsing DirectoryThe File Browser lists the contents of the browsing directory, the directory that is named in the text field at the top of the File Browser. The initial browsing directory is the current directory, provided it's within the source root directory (the default is /). You can select a different directory either by typing it in the text field and pressing <Enter> or, if you want to select a directory that is within the current directory, by double-clicking the left mouse button on the directory of your choice.You can move up to the parent directory, by double-clicking the line with two periods followed by a slash (../). You can enter your $HOME directory by typing:~in the File Browser text field and pressing <Enter>. LBL="" HELPID="file.browser.filelist"ID="37519"Selecting Files and Directories From the File ListTo select a file or directory (which includes its contents) from the File Browser's file list, click the left mouse button on it. You can select multiple contiguous entries by pressing and dragging the mouse before releasing the left button. You can select multiple noncontiguous entries by holding down the <Ctrl> key when pressing the left mouse button. LBL="" HELPID="file.browser.filter"Selecting Files Using Filters You can also select items in the file list by typing a pattern in the Filter text field, then pressing <Enter>. You can specify any regular expression (see the regcmp(3G) reference page for details). For example, if you type:.*you select everything in the file list (this is equivalent to clicking the All button).If you type:^$you deselect everything in the file list (this is equivalent to clicking the None button).LBL="" HELPID="file.browser.all.none"Selecting Files With the All and None ButtonsClick the All button to select all the files in the file list. Click the None button to deselect all the files in the file list.LBL="" HELPID="file.browser.addarrow"Adding Selected FilesUse the Add arrow button to add files and directories to the IDB file list. To do this, select the files and directories from the File Browser's file list, then click the left mouse button on the Add arrow button. LBL="" HELPID="idbfile.list"ID="53029"Accessing Your IDB File Using the IDB File ViewerThe IDB File Viewer, shown in IDREF="42712" TYPE="GRAPHIC"Figure 4-3, lets you easily scroll through a list of all the files and directories in your product's IDB file and allows you to select and edit each item. FILE="idb.file.viewer.online.gif" POSITION="INLINE" SCALE="FALSE"LBL="4-3"Figure 4-3 ID="42712"The IDB File ViewerThe IDB File Viewer consists of the IDB file path label, the IDB file list, the Filter text field, the All button, the None button, the Delete Selected Items button, and the Undo Last Operation button. When you first open the Tag Files worksheet, the IDB file list will probably be empty. You must add each file and directory in your product to the IDB file list by selecting the them from the File Browser, then clicking the Add arrow button.Once all the files and directories in your product are included in the IDB file list, you need to:tag each file and directory, using the Tag Files worksheetset permissions and destinations for each file and directory, using the Edit Permissions & Destinations worksheetset installation attributes for each file and directory, if necessary, using the Add Attributes worksheetLBL="" HELPID="idbfile.list.label"IDB File Path LabelThe IDB file path label shows the current IDB file pathname. Until a valid IDB file is identified, no path is listed. For information on creating an IDB file or changing the IDB file path, see IDREF="94029" TYPE="TITLE""Using the File Menu". For a definition of an IDB file, read IDREF="87631" TYPE="TITLE""What's an IDB File?".LBL="" HELPID=""Interpreting the IDB File ListThe IDB file list displays the contents of the current IDB file. It lists all the files and directories that appear in your product's IDB file and, for each file and directory, it displays the associated tags, permissions, destinations, and attributes.LBL="" HELPID="idbfile.list.list"ID="44353"Selecting Items From the IDB File ListTo select an item from the IDB file list, click the left mouse button on it. You can select multiple contiguous items by pressing and dragging the mouse before releasing the left button. You can select multiple noncontiguous items by holding down the <Ctrl> key when pressing the left mouse button. LBL="" HELPID=""ID="26126"Making an Item Current in the IDB File ListYou can make an item in the IDB file list current, by double-clicking it. When you make an item current, swpkg fills in the rest of the worksheet with the current settings for that item. This allows you to examine the information conveniently and to change some of the information for an item without having to fill in all the fields manually.LBL="" HELPID="idbfile.list.filter"Selecting Items Using FiltersYou can select items in the IDB file list by typing a pattern in the Filter text field, then pressing <Enter>. You can specify any regular expression (see the regcmp(3G) reference page for details).LBL="" HELPID="idbfile.list.all.none"Selecting Items Using the All and None ButtonsClick the All button to select all the items in the IDB file list. Click the None button to deselect all the items in the IDB file list.LBL="" HELPID="idbfile.list.delete"Deleting Items From the IDB File ListYou can delete an item from the IDB file list by selecting the item, then clicking the Delete Selected Items button. You can delete more than one item at a time.LBL="" HELPID="idbfile.list.undo"Undoing OperationsYou can undo your last operation by clicking the Undo Last Operation button. This restores the worksheet to the state it was in before you performed your last operation. If you change your mind, you can redo the operation by clicking the Undo Last Operation button again.LBL="" HELPID="tag.browser"ID="87988"Selecting Tags Using the Tags BrowserThe Tags Browser, shown in IDREF="25273" TYPE="GRAPHIC"Figure 4-4, allows you to easily select a tag from the list of available tags and assign it to any of the items listed in the IDB File Viewer. Each tag corresponds to a subsystem in your product. Basically, you first select a group of items from the list of items in the IDB File Viewer, use the Tags Browser to select the subsystem to which those items should belong, then click the Assign arrow button to assign the selected tag to the selected items.The Tags Browser consists of the tags list (which lists all the available tags), the tag text field (which allows you to enter the name of a new tag), the Add button, the Replace button, and the Delete button.FILE="tags.browser.online.gif" POSITION="INLINE" SCALE="FALSE"LBL="4-4"Figure 4-4 ID="25273"The Tags BrowserLBL="" HELPID="tag.browser.tagslist"Selecting Tags From the Tags ListThe tags list displays a list of all the tags defined in the spec file. These tags correspond to the subsystems you created using the Create Product Hierarchy worksheet. The selected tag appears in inverse video (the letters are in the background color and surrounded by a black box). To select a tag, click it with the left mouse button. To select all the items in the IDB File List that are tagged with a particular tag, double-click the left mouse button on that tag.LBL="" HELPID="tag.browser.text.field"Editing the Tags ListYou can edit the tags list using the tags text field in conjunction with the Add, Replace, and Delete buttons. It is almost never necessary or desirable to edit the tags list. Instead, change the list of subsystems using the Create Product Hierarchy worksheet. In general, you edit the tags list only when you need to set up a complex mapping of files to subsystems. If you do edit the tags list, any new tag you create must be mapped to one of the subsystems in your spec file. Refer to IDREF="12412" TYPE="TITLE"Appendix A for instructions on creating such a mapping.Here are the ways in which you can edit the tags list:To add a new tag, type the new tag into the tags text field, and click the Add button (or just press <Enter>). To replace an existing tag with a new one, select the tag you want to replace, type the new tag into the tags text field, and click the Replace button.To remove a tag from the list, select it, then click the Delete button.LBL="5"ID="23502"Editing Permissions and DestinationsThis chapter explains how to set the correct permissions for each file in your product; how to specify where Software Manager should install each file in your product; and how to specify the source tree root. This chapter contains these sections:IDREF="88217" TYPE="TITLE""Editing Permissions and Destinations: Before You Begin" provides some background information and lists the prerequisites for editing permissions and destinations.IDREF="49236" TYPE="TITLE""Editing Permissions and Destinations: The Basic Steps" lists the basic steps for editing permissions and destinations.IDREF="50500" TYPE="TITLE""Using the Edit Permissions & Destinations Worksheet" explains how to use the worksheet to edit the permissions and destinations for the files in your product.LBL="" HELPID=""ID="88217"Editing Permissions and Destinations: Before You BeginThis section lists the prerequisites for editing permissions and destinations,   and briefly explains what is meant by "permissions and destinations" in the context of this worksheet.LBL="" HELPID=""PrerequisitesBefore you begin editing permissions and destinations for your files, you must create a product hierarchy using the Create Product Hierarchy worksheet (see IDREF="63587" TYPE="TITLE"Chapter 3) and tag the files using the Tag Files worksheet (see IDREF="21309" TYPE="TITLE"Chapter 4).In particular, make sure that all your product's files are listed in the IDB Viewer. If some are missing, go back to the Tag Files worksheet and add them to the IDB file (see IDREF="47279" TYPE="TITLE""Tagging the Files: The Basic Steps" for instructions). You can't edit permissions and destinations unless your files are listed in an IDB file because that is where swpkg stores them. (Every file that is currently listed in your IDB file is listed in the IDB File Viewer.)LBL="" HELPID=""What Are Permissions and Destinations?Permissions, in the context of this worksheet, means the permissions of the files in your product as they are installed on your users' workstationsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'how you want Software Manager to set the file permissions when your users install your product's files. Destinations refers to the pathnames of the files in your product as they are installed on your users' workstationsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'where you want Software Manager to put the files when your users install them.LBL="" HELPID="perms.dests.worksheet"ID="49236"Editing Permissions and Destinations: The Basic StepsBy default, permissions and destinations are picked up from your source filesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'if your source files have the same pathnames and permissions that you want them to have when installed on the users workstations, then you don't need to edit the permissions and destinations fields. If there are differences, or if you want to set a source tree root, then you need to edit this worksheet.To fill out the Edit Permissions & Destinations worksheet:Set the source tree root for all your files, if you want it to be something other than the default (/). Click the Apply arrow button. Select a file from the IDB file viewer by single-clicking it.TipIf you double-click a file, swpkg selects the file and also displays current settings for permissions, source, and destinations.Set the mode for the file. Set the owner for the file.Set the group for the file. Click the Assign arrow button. Set the destination directory, if necessary. Click the Assign arrow button. Set the destination filename, if necessary. Click the Assign arrow button. (See IDREF="87938" TYPE="TITLE""Setting the Destination Filename" for instructions.)Repeat steps 3-8 for each file listed in the IDB File Viewer.Save the IDB file by selecting Save IDB from swpkg's File menu.CautionIf you don't click the Assign button after editing the text fields, your changes will be lost when you select a new file from the IDB file list.LBL="" HELPID=""ID="50500"Using the Edit Permissions & Destinations WorksheetThis section provides an overview of the Edit Permissions & Destinations worksheet, shown in IDREF="93481" TYPE="GRAPHIC"Figure 5-1, and explains how to use the worksheet's features.FILE="permiss.destin.blank.online.gif" POSITION="INLINE" SCALE="FALSE"LBL="5-1"Figure 5-1 ID="93481"The Edit Permissions & Destinations WorksheetLBL="" HELPID="root.spec.sheet"ID="30276"Setting Source and Destination Tree RootsThe Root Specification sheet, shown in IDREF="76457" TYPE="GRAPHIC"Figure 5-2, allows you to specify a root for your source and destination trees. FILE="root.spec.sheet.gif" POSITION="INLINE" SCALE="FALSE"LBL="5-2"Figure 5-2 ID="76457"The Root Specification SheetThe source tree contains all of the files that you want to include in your packaged product. The source tree root is the directory relative to which swpkg looks for your product's files on your workstation (the workstation on which you're building your product). Changing the source tree root limits the browsing area in the Tag Files view to the designated tree. swpkg strips the source tree root from the pathnames of all files that you include in your product.The destination tree root is the directory relative to which Software Manager installs all of your product's files on your users' workstations.By specifying source and destination tree roots, you can sometimes save yourself a lot of time. For example, if you have a tree of files that you want Software Manager to put in a different destination, you might find it useful to specify a destination tree root, so that you don't have to type in the full pathname each and every time. But remember that the destination tree root applies to all of the files in your product.Cautionswpkg does not save source and destination tree roots for you from session to session. It uses the specified roots when you build the product (by clicking the Build All button in the Build Product worksheet), but when you quit swpkg, the tree roots are not saved. Next time you run swpkg, you have to set the tree roots again. If you forget, then swpkg assumes the tree roots should be set to / and it will not be able to find your files.LBL="" HELPID="file.perms.sourceroot"ID="28785"Setting a Source Tree RootRoots are always applied to all entries in the IDB file. To set a source tree root for all the files in your product, type the desired source tree root path in the Source Tree Root text field and click the Apply arrow button.If the source tree root you specify is invalid, then you will see one of the following dialogs when you build the product:No files found under Source Root /newroot.10 (of 20 entries) not found under Source Root /root.NoteInstead of the numbers 10 and 20, you see numbers appropriate for your product. The number of files found variesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'swpkg might think it has found some files but they are probably the wrong ones.LBL="" HELPID="file.perms.destroot"ID="47753"Setting a Destination Tree RootThis field will be removed in the next release.To change the destination root relative to which all files are installed on the target machine your user must use inst -r or swmgr -r. Refer to the inst(1M) or swmgr(1M) manpages for details.LBL="" HELPID="file.perms.dests.sheet"ID="52602"Setting Permissions and Destination DirectoriesUse the Permissions and Destinations Specification sheet, shown in IDREF="47979" TYPE="GRAPHIC"Figure 5-3, to set the mode, owner, group, destination directory, and destination filename for each file in your product.FILE="perms.dests.spec.sheet.gif" POSITION="INLINE" SCALE="FALSE"LBL="5-3"Figure 5-3 ID="47979"The Permissions and Destinations SheetNoteIf your source files have the same pathnames and permissions that you want them to have when installed on the users workstations, then you don't need to edit the permissions and destinations fields.LBL="" HELPID="file.perms.mode"ID="48483"Specifying the ModeUse the Mode text field to set the mode of a file as it will be installed on your users' workstations. To set the mode for a file, first make the file current by double-clicking it in the IDB file list. The current settings for the file appear in the text fields. Edit the text in the Mode text field. When you've finished editing, click the Assign arrow button.The mode of a file is an octal number that represents the permissions of the file. An ASCII representation of the mode is displayed to the right of the text area for reference. Briefly, an absolute mode is given as an octal number constructed from the OR of the following modes:04000set user ID on execution020#0set group ID on execution if # is 7, 5, 3, or 1, enable mandatory locking if # is 6, 4, 2, or 0. This bit is ignored if the file is a directory; it can be set or cleared only by using the symbolic mode.01000sticky bit0400read by owner0200write by owner0100execute (search in directory) by owner0070read, write, execute (search) by group0007read, write, execute (search) by othersSee chmod(1) and ls(1) for more details on modes. LBL="" HELPID="file.perms.owner"ID="90440"Specifying the OwnerUse the Owner text field to specify the owner of a file as it will be installed on your users' workstations. To set the owner for a file, first make the file current by double-clicking it in the IDB file list. The current settings for the file appear in the text fields. Edit the text in the Owner text field. When you've finished editing, click the Assign arrow button.You can use the login ID (for example: root, sysadm, diag, adm, daemon, uucp, nuucp, bin, and guest) or the numerical user ID (uid) to identify who Software Manager should make owner of the file. For example, entering nothing or 0 is the same as typing in:rootIn the Owner text field, the uid automatically appears to the right of the login ID for reference.LBL="" HELPID="file.perms.group"ID="77050"Specifying the GroupUse the Group text field to specify the group of a file as it will be installed on your users' workstations. To set the group for a file, first make the file current by double-clicking it in the IDB file list. The current settings for the file appear in the text fields. Edit the text in the Group text field. When you've finished editing, click the Assign arrow button.You can use the group ID (for example: sys, root, daemon, bin, adm, mail, uucp, lp, user, and guest) or the numerical group ID (gid) to identify the group to which Software Manager should assign the file.For example, entering nothing or 0 is the same as typing in:sysIn the Group text field, the gid automatically appears to the right of the group ID for reference. LBL="" HELPID="file.perms.destdir"ID="79259"Setting the Destination DirectoryUse the Destination Directory text field to set the directory in which Software Manager should install the selected file(s) on your users' workstations. To set the destination directory for a file, follow these steps:Make the file current by double-clicking it in the IDB file list. The current settings for the file appear in the text fields. Edit the text in the Destination Directory text field. Do not include a leading slash (/). Instead, give the path relative to the root set in the Destination Source Tree Root text field (discussed in the section IDREF="47753" TYPE="TITLE""Setting a Destination Tree Root"). Click the Assign arrow button.LBL="" HELPID="file.perms.destfile"ID="87938"Setting the Destination FilenameUse the Destination Filename text field to set the name of each file in your product as you want Software Manager to install it on your users' workstations.To set the destination filename for a file, follow these steps:Make the file current by double-clicking it in the IDB file list. The current settings for the file appear in the text fields. Edit the text in the Destination Filename text field. Click the Assign arrow button.LBL="" HELPID="file.perms.reset"ID="77527"Resetting All Text Fields to the Default ValuesClick the Reset All Values button, to reset all the text fields in the worksheet to their default values.LBL="6"ID="18487"Adding AttributesThis chapter explains how to set certain installation options, called attributes, for the files in your product. It contains these sections:IDREF="30505" TYPE="TITLE""Adding Attributes: Before You Begin" provides some background information and lists the prerequisites for adding installation attributes.IDREF="37152" TYPE="TITLE""Adding Installation Attributes: The Basic Steps" lists the basic steps for adding attributes.IDREF="60585" TYPE="TITLE""Using the Add Attributes Worksheet" describes the features of the worksheet and explains how to use it to add installation attributes to your product's files.LBL="" HELPID=""ID="30505"Adding Attributes: Before You BeginThis section lists the prerequisites for adding installation attributes, and explains what installation attributes are. LBL="" HELPID=""PrerequisitesBefore you begin specifying attributes for your products files, you must first have created a product hierarchy using the Create Product Hierarchy worksheet (see IDREF="63587" TYPE="TITLE"Chapter 3), tagged the files using the Tag Files worksheet (see IDREF="21309" TYPE="TITLE"Chapter 4), and edited permissions and destinations for the files using the Edit Permissions & Destinations worksheet (see IDREF="23502" TYPE="TITLE"Chapter 5).In particular, make sure that all your product's files are listed in the IDB Viewer. If some are missing, go back to the Tag Files worksheet to tag them and include them in the IDB file (see IDREF="47279" TYPE="TITLE""Tagging the Files: The Basic Steps" for instructions). You can't add attributes to your product's files unless they are listed in the IDB file, because that is where swpkg stores them. (Every file that is currently listed in your IDB file is listed in the IDB File Viewer.)LBL="" HELPID=""What Are Attributes?For each file in your product, you can specify certain attributesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'installation options that govern the installation of that file. For example, you can specifythat the installation occur during the next bootshell commands for Software Manager to run automatically at different points in the installationthat a separate copy of your application be installed for diskless clientthat a binary not be strippedon which hardware configurations your application can be installedswpkg stores attributes information in your product's IDB file.LBL="" HELPID="add.attributes.worksheet"ID="37152"Adding Installation Attributes: The Basic StepsTo specify attributes for your product's files, follow these steps: Select a file or files from the IDB file list.Select the desired attributes from the Attributes Specification sheet.Click the Assign arrow button. Repeat Steps 1-3 for each file or group of files for which you wish to specify attributes.Save the IDB file by selecting Save IDB from swpkg's File menu. (This step is optional; you can wait and save the IDB file when you build the product.)LBL="" HELPID=""ID="60585"Using the Add Attributes WorksheetThis section describes the features of the Add Attributes worksheet, shown in IDREF="20764" TYPE="GRAPHIC"Figure 6-1, and explains how to use the worksheet to add installation attributes to your product's files.FILE="attrs.worksheet.online.gif" POSITION="INLINE" SCALE="FALSE"LBL="6-1"Figure 6-1 ID="20764"The Add Attributes WorksheetLBL="" HELPID="attrs.sheet.software"ID="29658"Selecting Software Installation AttributesIDREF="62569" TYPE="GRAPHIC"Figure 6-2, lists the for Software Installation Attributes. To the left of each attribute is a check button. You select (or deselect) the attribute by clicking the check button. When the attribute is selected, a red check mark appears over the button.FILE="attrs.spec.sheet.software.gif" POSITION="INLINE" SCALE="FALSE"LBL="6-2"Figure 6-2 ID="62569"The Attributes Specification Sheet: Software AttributesLBL="" HELPID="file.attrs.config"ID="47125"The config AttributeUsers sometimes modify the configuration files for your product. Typically, these modifications are made to reflect site- and machine-specific information. It's important that you identify all the configuration files in your product so that modifications users made to older versions of these files are not lost during installation on the new versions.By checking the config attribute check button, you identify the selected file as a configuration file. You must then specify a configuration type to specify how to deal with each configuration file. There are three configuration types. The first configuration type, update, is listed on the large button located to the right of the config attribute. Click this button to see all three choices, then select the appropriate configuration type from the list. After you've selected a configuration type, click the Assign arrow button to assign the attribute to the selected file.Here are the three configuration types:updateSoftware Manager automatically installs the new configuration file, but saves the old file as filename.O, where filename is the name of the configuration file.noupdateSoftware Manager retains the existing (old) file, if it exists.suggestSoftware Manager retains the existing file, if it exists, and install the new configuration file as filename.N, where filename is the name of the configuration file.The configuration types are listed below in a table that describes what Software Manager does with each type of configuration file.COLUMNS="3"LBL="6-1"Table 6-1  (continued)        Configuration TypesLEFT="0" WIDTH="108"Configuration File TypeLEFT="115" WIDTH="108"Before installationLEFT="230" WIDTH="108"After installationLEFT="0" WIDTH="108"updateLEFT="115" WIDTH="108"No previous version was 
installed.LEFT="230" WIDTH="108"The new version is 
installed.LEFT="0" WIDTH="108"LEFT="115" WIDTH="108"A previous version was 
installed, but not 
modified.LEFT="230" WIDTH="108"The new version is 
installed.LEFT="0" WIDTH="108"LEFT="115" WIDTH="108"A previous version was 
installed and modified.LEFT="230" WIDTH="108"The older version is 
filename.O and the new 
version is installed.LEFT="0" WIDTH="108"noupdateLEFT="115" WIDTH="108"No previous version was 
installed.LEFT="230" WIDTH="108"The new version is 
installed.LEFT="0" WIDTH="108"LEFT="115" WIDTH="108"A previous version was 
installed, but not 
modified.LEFT="230" WIDTH="108"The previous version is 
still installed.LEFT="0" WIDTH="108"LEFT="115" WIDTH="108"A previous version was 
installed and modified.LEFT="230" WIDTH="108"The previous version is 
still installed.LEFT="0" WIDTH="108"suggestLEFT="115" WIDTH="108"No previous version was 
installed.LEFT="230" WIDTH="108"The new version is 
installed.LEFT="0" WIDTH="108"LEFT="115" WIDTH="108"A previous version was 
installed, but not 
modified.LEFT="230" WIDTH="108"The new version is 
installed.LEFT="0" WIDTH="108"LEFT="115" WIDTH="108"A previous version was 
installed and modified.LEFT="230" WIDTH="108"The new version is 
installed as filename.N.LBL="" HELPID="file.attrs.shadow"The shadow AttributeVery few applications need this attributename='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'in general, don't select it. Selecting the shadow attribute delays the installation of the specified file until the next time the workstation is booted. So, Software Manager does not immediately install the file on the users' workstations. This attribute is useful for products that might be used by a variety of applications at any given timename='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'such as shared librariesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'where a replacement of the existing product files might affect those applications that are using the product at the time a new version of the product is installed.After selecting this attribute, click the Assign arrow button to assign the attribute to the selected file.LBL="" HELPID="file.attrs.preop"The preop AttributeUse the preop attribute when you want swpkg to execute a list of commands before installing a selected file.See the following sections:IDREF="10586" TYPE="TEXT"Steps for Using an Ops CommandIDREF="91876" TYPE="TEXT"Example: Send Email Before Installing ExecutableIDREF="38114" TYPE="TEXT"Ops LimitationsID="91876"Example: Send Email Before Installing ExecutableThe following example sends email to the developer (you) just before the executable is installed by the user:"echo $USER@`hostname`.`domainname` installed my_product| Mail developer@abc.com"You can cut, paste, and edit this example.LBL="" HELPID="file.attrs.postop"The postop AttributeUse the postop attribute when you want swpkg to execute a list of commands after installing a selected file. Configuration files cannot have postops.See the following sections:IDREF="10586" TYPE="TEXT"Steps for Using an Ops CommandIDREF="29947" TYPE="TEXT"Example: Send Email After Installing ExecutableIDREF="38114" TYPE="TEXT"Ops LimitationsID="29947"Example: Send Email After Installing ExecutableThe following example sends email to the developer (you) after the executable is installed by the user:"echo $USER@`hostname`.`domainname` installed my_product| Mail developer@abc.com"You can cut, paste, and edit this example.LBL="" HELPID="file.attrs.exitop"The exitop AttributeUse the exitop attribute when you want to execute a list of commands after the user quits Software Manager (assuming the user is installing the selected file).See the following sections:IDREF="10586" TYPE="TEXT"Steps for Using an Ops CommandIDREF="64582" TYPE="TEXT"Example: Installing an Application IconIDREF="38114" TYPE="TEXT"Ops LimitationsID="64582"Example: Installing an Application IconThe following example installs your application's icon into the Icon Catalog:"if [ -x \$$rbase/usr/sbin/iconbookedit ]; then
chroot \$$rbase /usr/sbin/iconbookedit -add \"Category:File
Name:/usr/bin/X11/my_product " -syspage Application; fi"You can cut, paste, and edit this example. For a more detailed discussion of the iconbookedit command, see the iconbookedit(1M) reference page or Chapter 11, "Creating Desktop Icons: An Overview" in the Indigo Magic Desktop Integration Guide.CautionDo not use exitop to add directories. Doing so can cause the size of your product to change, and because inst doesn't know about directories created through exitop, it cannot account for the size change. Add directories through the Tag Files worksheet.LBL="" HELPID="file.attrs.removeop"The removeop AttributeUse the removeop attribute to specify a list of command for swpkg to execute after a file is removed. removeops are executed only when a subsystem is removed (not during an upgrade).See the following sections:IDREF="10586" TYPE="TEXT"Steps for Using an Ops CommandIDREF="41367" TYPE="TEXT"Example: Send Email After Removing ExecutableIDREF="38114" TYPE="TEXT"Ops LimitationsID="41367"Example: Send Email After Removing ExecutableThe following example sends email to the developer (you) after the user removes the executable (e.g. versions remove my_product)."echo $USER@`hostname`.`domainname` removed my_product| Mail developer@abc.com"You can cut, paste, and edit this example.ID="10586"Steps for Using an Ops CommandTo use an ops command, follow these steps:Select a file from the IDB file list.Select the ops attribute.Type commands into the ops text field.­or­Cut and paste the example code found in the specific ops section, and replace code as necessary.If you type the commands, be sure toenclose the list of commands in a pair of double quotesprecede semicolons with a backslash, if you want them taken literallypress <Enter> after each separate commandClick the Assign arrow button. NoteWhen saving your ops commands into the IDB file, swpkg converts new lines into semicolons. When you start a new session with this IDB file, swpkg converts the semicolons back to new lines. To tell swpkg that you really do want a semicolon and not a new line, put a backslash in front of all "real" semicolons.ID="38114"Ops LimitationsAlthough an ops attribute provides the flexibility to perform many types of processing at installation time, you should limit its use for these reasons:If the commands in the list do any type of processing that increases the use of disk space, such as uncompressing files, the user could run out of disk space during installation because Software Manager has no way of knowing how much disk space is required.If files in the software product are modified during installation, the versions -m command reports them as being modified. This can be confusing for users because they have no way of finding out what the changes were and in many cases won't know that they were done during installation.Extensive processing in an ops command makes installations take longer.Errors that occur while running an ops command are very hard for users to diagnose and correct.LBL="" HELPID="file.attrs.noshare"The noshare AttributeWhen your software product is "installed" on a diskless workstation, each file is installed on a server in the share tree by default. This means that just one copy of each file is installed on the server and that copy is used by all diskless clients of that server. Your product may contain files that need to be duplicated for each client, typically because they are configuration files that must be modified for each client workstation.To indicate that a file is to be replicated for each diskless client, select the noshare attribute from the Attribute Viewer. After selecting this attribute, click the Assign arrow button to assign the attribute to the selected file.LBL="" HELPID="file.attrs.nostrip"The nostrip AttributeBy default, swpkg automatically strips all binaries. You can override this behavior by selecting the nostrip attribute from the Attribute Viewer. After selecting this attribute, click the Assign arrow button to assign the attribute to the selected file. (See the strip(1) reference page for more information.)LBL="" HELPID="file.attrs.norqs"The norqs AttributeUse the norqs attribute when you don't want an executable to be included on the list for rqsall (see the manpage for rqsall). For example, add this attribute to any executable you don't want modified as a result of a quickstart.LBL="" HELPID="file.attrs.stripdso"The stripdso AttributeUse the stripdso attribute to strip symbolic information from shared library objects.LBL="" HELPID="file.attrs.hardware"Selecting Hardware Installation AttributesThe lower portion of the Add Attributes worksheet (see IDREF="69053" TYPE="GRAPHIC"Figure 6-3) titled Hardware Attributes, provides a list of the model names for selection. Clicking on a name selects/deselects it for assignment. Click the Clear All Values button to deselect all items.FILE="attrs.spec.sheet.hardware.gif" POSITION="INLINE" SCALE="FALSE"LBL="6-3"Figure 6-3 ID="69053"The Attributes Specification Sheet: Hardware AttributesIn most cases, the files you include in your software product are applicable to all models of Silicon Graphics workstations. However, swpkg does provide a mechanism for restricting the installation of files to particular models on a per-file basis. You can use this mechanism to prevent users from installing files on a workstation that can't run them (which is better than allowing users to install files that won't work properly). You'll need to set up installation restrictions if:your application doesn't run on all Silicon Graphics workstationsdifferent versions of a file are required for different modelsa file in your product doesn't apply to particular modelsYou can restrict installation by specifying model or board names.LBL="" HELPID="file.attrs.hardware.model"Restricting Installation to Specific ModelsThe lower section of the Add Attributes view labeled Hardware Attributes presents a list of model names for selection. Clicking on a name selects or deselects it for assignment. Clicking on the Clear All Values button deselects all items.To see a list of boards used with specific models, choose "Show SGI Board Names" from the View menu. To restrict installation to specific models:Select the file(s) from the IDB File List. Select the models on which the selected file(s) can be installed. Click the Assign arrow button.LBL="" HELPID="file.attrs.hardware.board"ID="32822"Restricting Installation to Specific BoardsYou can restrict installation to specific boards in three categories; CPUBOARD (Central Processing Unit Board), GFXBOARD (Graphics Board), and SUBGR (Subgraphics Board). Model and board names are interdependent. swpkg references a matrix (/var/inst/machfile) of legitimate model and board combinations. For example, pressing the R3k Boards Only button selects all of the R3000 based cpuboards, and makes R4000 based models insensitive. You can still make further CPU board selections and deselections by clicking the check button corresponding to a particular CPU board.NoteThe R4000 boards include derivatives of the R4000 architecture, such as R4400.To get the values for CPUBOARD, GFXBOARD, and SUBGR for a particular workstation, use the hinv(1M) command. From the output, to find out whether the workstation has an R3k or an R4k processor, look at the line that starts with "CPU." For more information on the type of CPU board, look at the first line of the hinv output. The hinv output provides graphics board and subgraphics board information using a different terminology than is used in the GFXBOARD and SUBGR sublists. To determine the values for GFXBOARD and SUBGR from hinv output, first look at the line labeled "Graphics board." The IRIS Software installation Guide provides a table that maps the hinv output for each type of graphics board to the corresponding GFXBOARD and SUBGR values. Since new values of CPUBOARD, GFXBOARD, and SUBGR may have been added for new models of workstations released after the IRIS Software Installation Guide was published, always check the most recent Release Notes for System Software for a current list of possible values.LBL="" HELPID="file.attrs.assignarrow"ID="93847"Assigning the Selected AttributesUse the Assign arrow button to assign selected attributes to a file or files in the IDB file list. To do this, select the file(s) from the IDB file list, make your selections from the Attributes Specification sheet, then click the left mouse button on the Assign arrow button. LBL="7"ID="41962"Building the ProductThis chapter explains how to build your product. It contains these sections:IDREF="43028" TYPE="TITLE""Building the Product: Before You Begin" provides some background information and lists the prerequisites for building your product.IDREF="11306" TYPE="TITLE""Building the Product: The Basic Steps" lists the basic steps for building your product.IDREF="20302" TYPE="TITLE""Using the Build Product Worksheet" describes the features of the worksheet and explains how to use it to build your product.IDREF="64909" TYPE="TITLE""After the First Build" describes how to change a product that you've built, how to merge two or more existing products into a single product, and how to divide an existing product into two or more separate products.LBL="" HELPID=""ID="43028"Building the Product: Before You BeginThis section lists the prerequisites for building a product and explains how swpkg builds a product.LBL="" HELPID=""PrerequisitesBefore you build your product, you must first create a product hierarchy using the Create Product Hierarchy worksheet (see IDREF="63587" TYPE="TITLE"Chapter 3), tag the files using the Tag Files worksheet (see IDREF="21309" TYPE="TITLE"Chapter 4), and edit permissions and destinations for the files using the Edit Permissions & Destinations worksheet (see IDREF="23502" TYPE="TITLE"Chapter 5). Also, you must specify installation attributes, if any, for each file in your product (see IDREF="18487" TYPE="TITLE"Chapter 6).In particular, make sure that all your product's files are listed in the IDB Viewer. If some are missing, go back to the Tag Files worksheet to tag them and include them in the IDB file (see IDREF="47279" TYPE="TITLE""Tagging the Files: The Basic Steps" for instructions).NoteYou only need to complete the above steps once for each product (unless you need to change the product hierarchy). After that, you can use the Build Product worksheet to build the product as often as necessary.LBL="" HELPID=""How Does swpkg Build a Product?swpkg builds a product using the gendist command, which generates the primary components for software products: the product descriptor, the product IDB, and the images. To build a product, gendist needs three things:a tree containing all the files to be shippeda master IDB file containing a description of each file or directory to be included in the producta distribution specification (spec) file that describes the product structureswpkg takes your selections and input for each worksheet and uses them to create the required spec and IDB files for gendist. You can generate and/or edit these files by hand, if you like. For more information on the gendist command, see the gendist(1M) reference page.LBL="" HELPID="build.product.worksheet"ID="11306"Building the Product: The Basic StepsTo build a product, follow these steps:Select one or more items from the IDB file list. Specify the desired build options for the selected item(s) by clicking the appropriate Build Options check buttons. (See IDREF="81066" TYPE="TITLE""Selecting Build Options" for descriptions of the build options.)Save the spec and IDB files using the "Save" menu item from the File pull-down menu.Try a test of the build by clicking the Test Build button.Resolve any error messages that appear in the Message Area during the test. IDREF="93723" TYPE="TITLE"Appendix B, "Troubleshooting," provides some troubleshooting information.Build the product by clicking the Build All button. LBL="" HELPID=""ID="20302"Using the Build Product WorksheetThis section describes the features of the Build Product worksheet, shown in IDREF="33534" TYPE="GRAPHIC"Figure 7-1, and explains how to use the worksheet to build a product.FILE="build.prod.blank.gif" POSITION="INLINE" SCALE="FALSE"LBL="7-1"Figure 7-1 ID="33534"The Build Product WorksheetThe Build Product worksheet contains these major parts: Worksheet Selection Tabs (described in IDREF="65956" TYPE="TITLE""Using the Worksheet Selection Tabs")Message Area (described in IDREF="17465" TYPE="TITLE""Using the Message Area")The IDB File Viewer (described in IDREF="53029" TYPE="TITLE""Accessing Your IDB File Using the IDB File Viewer")The Spec File Path Label (described in IDREF="95074" TYPE="TITLE""The Spec File Path Label")The Source, Destination, and Distribution text fields (described in IDREF="88247" TYPE="TITLE""Setting Tree Root and the Distribution Directory")The Build Options check buttons (described in IDREF="81066" TYPE="TITLE""Selecting Build Options")The Test Build button (described in IDREF="90046" TYPE="TITLE""Running a Test Build")The Build All button (described in IDREF="64614" TYPE="TITLE""Building the Product")LBL="" HELPID="generate.spec.file"ID="95074"The Spec File Path LabelThe spec file path label shows the current spec file pathname. Until a valid spec file is identified, no path is listed. For information on creating a spec file or changing the spec file path, see IDREF="94029" TYPE="TITLE""Using the File Menu". For a definition of a spec file, read IDREF="87148" TYPE="TITLE""What's a Spec File?".LBL="" HELPID="generate.spec.roots.and.dir"ID="88247"Setting Tree Root and the Distribution DirectoryIf you haven't already specified a source root in the Edit Permissions & Destinations worksheet, you can do so using the Source Tree Root text field. It is not necessary to specify this tree root. You do, however, need to specify the distribution directory for your product. This section explains how to set the tree root and the distribution directory. LBL="" HELPID="generate.source.root"ID="99613"Setting a Source Tree RootTypically, you'll have already specified the source tree root in the Edit Permissions & Destinations worksheet. You can also set the source tree root here. Before changing the source tree root, you should read IDREF="30276" TYPE="TITLE""Setting Source and Destination Tree Roots", which tells you what the source tree root is and warns you of the risks involved.To set a source tree root, type the source tree root path in the Source Tree Root text field and press <Enter>.If the source tree root you specify is invalid, then you will see one of the following dialogs when you build the product: No files found under Source Root /newroot. 10 (of 20 entries) not found under Source Root /root.NoteInstead of the numbers 10 and 20, you see numbers appropriate for your product. The number of files found variesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'swpkg might think it has found some files but they are probably the wrong ones.LBL="" HELPID="generate.dist.dir"ID="79857"Setting the Distribution DirectoryThe distribution directory is the directory in which swpkg puts the built, installable product files. The default distribution directory is /usr/dist.To set a distribution directory for all the files in your product, first select all the files in your product by clicking the All button in the IDB File Viewer). Then type your desired distribution directory path in the Distribution Directory text field and press <Enter>.LBL="" HELPID="build.options"ID="81066"Selecting Build OptionsThe Build Options check buttons allow you to select any or all of these four build options for each of your product's files:VerboseMaintNo CompressNo StripTo select an option, just click the left mouse button on the appropriate option check button. The option is selected when a red check mark appears on the button. LBL="" HELPID="generate.verbose.toggle"The Verbose Build OptionCheck the Verbose button when you want swpkg to work in verbose modename='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'providing more output as the distribution is created. This output appears in the Message Area.LBL="" HELPID="generate.maint.toggle"The Maint Build OptionChecking the Maint button tells swpkg to generate a maintenance product. Silicon Graphics recommends that you do not use this option at this time. It is included in swpkg for compatibility with the previous tools, but it might be replaced in future releases. In general, rather than creating a maintenance product, it's better to create a new version of your product.A maintenance product contains only files that include bug fixes, new features, or support for new hardware. When users install a maintenance release, the files in the maintenance release overwrite existing versions of those files. If a previously installed file does not have a replacement file in the maintenance release, it is not removed.A maintenance release can include files from many products, but is packaged as one or sometimes two products. Product names for maintenance releases are usually of the form "maint" followed by a digit (this digit has no inherent meaning). Image names are created by taking the original product names and image names and joining them with an underscore (_) rather than a period. Subsystem names remain the same. For example, the maintenance version of the subsystem eoe1.sw.unix is named maint1.eoe1_sw.unix.LBL="" HELPID="generate.nocompress.toggle"The No Compress Build OptionCheck the No compress button to tell swpkg not to compress the images being built.LBL="" HELPID="generate.nostrip.toggle"The No Strip Build OptionCheck the No Strip button to tell swpkg not to strip any of the executables.LBL="" HELPID="generate.dry.run"ID="90046"Running a Test BuildThe Test Build button initiates a dry run, which reads the files and checks their validity without writing anything. Error messages, if any, appear in the Message Area.IDREF="93723" TYPE="TITLE"Appendix B, "Troubleshooting" provides some troubleshooting information.LBL="" HELPID="generate.build.all"ID="64614"Building the ProductThe Build All button builds the productname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'creating the files in the Distribution Directory. These include binary versions of the IDB and spec files. Error messages, if any, appear in the Message Area. LBL="" HELPID="after.building"ID="64909"After the First BuildAfter you've built your product the first time, subsequent builds for that product are much easier, since you already have a spec and IDB file. This section discusses subsequent swpkg builds. It contains these sections:IDREF="47261" TYPE="TITLE""Building the Product After the First swpkg Build" explains how to build a product that's been built (using swpkg) before.IDREF="75276" TYPE="TITLE""Combining Existing Products Into a Single Product" explains how to take two existing products that have both been built using swpkg and merge them into a single product.IDREF="87129" TYPE="TITLE""Incorporating the Help Subsystem into a Product" describes how to merge an online help subsystem with your product.IDREF="28478" TYPE="TITLE""Breaking an Existing Product Into Two Products" explains how to break apart an existing product (that's been built with swpkg) into two or more products.NoteIf you have existing spec and IDB files that were not generated with swpkg, you can use them with swpkg. However, you'll have to remove any includes or defines from the IDB file, because swpkg doesn't handle them.WarningDo not copy files from the source directory into the distribution directory: you will be overwriting important files. Your spec and idb files are saved in the source directory. When your product is built, gendist saves files of the same name in the distribution directory. Though these files are identically named, they are not the same.LBL="" HELPID="changing.builds"ID="47261"Building the Product After the First swpkg BuildThis section explains what to do under these circumstances:You've already built your product at least once using swpkg and you don't want to make any changes to the spec and IDB files (for example, changing filenames, adding new files, or changing the product hierarchy).You've used swpkg to build your product once, but you want to make some changes to the spec and IDB files. The first case is the easiest. After making changes to the files that comprise your product (fixing bugs, adding features, and so on), you want to build the product again. Since you haven't changed any of the filenames and you don't want to alter the product hierarchy, you can go straight to the Build Product Worksheet. Follow these steps:Start swpkg and open the Build Product worksheet.From the File menu, open the "Open" cascade menu and select "Both." The Open Spec window appears.Use the file browser and text field to select the spec file for your product and click the OK button. The Open Idb window appears.Use the file browser and text field to select the IDB file for your product and click the OK button. If, in the previous build of your product, you specified a source tree root and/or a destination tree root, enter the root(s) in the corresponding text field now. Source and destination tree roots are discussed in IDREF="30276" TYPE="TITLE""Setting Source and Destination Tree Roots". (swpkg does not save the source and destination tree roots in the spec and IDB files, so you have to re-enter this information each time you build the product.)Select the desired build options. The build options are described in IDREF="81066" TYPE="TITLE""Selecting Build Options". (swpkg does not save build option selections in the spec and IDB files, so you have to re-enter this information each time you build the product.)Try a test of the build by clicking the Test Build button.Resolve any error messages that appear in the Message Area during the test. IDREF="93723" TYPE="TITLE"Appendix B, "Troubleshooting," provides some troubleshooting information.Build the product by clicking the Build All button. If you do need to change the spec and/or IDB file, then you'll have to make those changes before you build the product again. The exact steps depend on the changes you want to make, but in general:Start swpkg.From the File menu, open the "Open" cascade menu and select "Both." The Open Spec window appears.Use the file browser and text field to select the spec file for your product and click the OK button. The Open Idb window appears.Use the file browser and text field to select the IDB file for your product and click the OK button. Use whatever worksheets you need in order to make the desired changes. For example, if you just want to change installation attributes for a particular file or files, then open the Add Attributes worksheet, make your changes, and build the product.If you also need to add a new file, then you'll need to open the Tag Files worksheet to tag the file and the Edit Permissions and Destinations worksheet to set the permissions and destinations for the new file.If you need to set installation attributes for the new file, you'll need to use the Add Attributes worksheet as well.Open the Build Product worksheet.If, in the previous build of your product, you specified a source tree root and/or a destination tree root, enter those roots in the corresponding text field now. Source and destination tree roots are discussed in IDREF="30276" TYPE="TITLE""Setting Source and Destination Tree Roots". (swpkg does not save the source and destination tree roots in the spec and IDB files, so you have to re-enter this information each time you build the product.)Select the desired build options. The build options are described in IDREF="81066" TYPE="TITLE""Selecting Build Options". (swpkg does not save build option selections in the spec and IDB files, so you have to re-enter this information each time you build the product.)Try a test of the build by clicking the Test Build button.Resolve any error messages that appear in the Message Area during the test. IDREF="93723" TYPE="TITLE"Appendix B, "Troubleshooting," provides some troubleshooting information.Build the product by clicking the Build All button. LBL="" HELPID="combining.products"ID="75276"Combining Existing Products Into a Single ProductThis section explains how to merge two existing products (that were both originally built with swpkg) into a single product. You can merge more than two products, if you like, by appending more than one spec and IDB file to the spec and IDB files for the first product (see Step IDREF="28014" TYPE="TEXT"2). To merge two existing products into a single product, follow these steps:Start swpkg.ID="28014"From the File menu, open the "Open" cascade menu and select "Both." The Open Spec window appears.Use the file browser and text field to select the spec file for the first product and click the OK button. The Open Idb window appears.Use the file browser and text field to select the IDB file for the first product and click the OK button. From the File menu, open the "Append" cascade menu and select "Spec." The Open Spec window appears. Use the file browser and text field to select the spec file for the second product and click the OK button. From the File menu, open the "Append" cascade menu and select "Idb." The Open Idb window appears. Use the file browser and text field to select the IDB file for the second product and click the OK button. Now you have a single spec file and a single IDB file. Each file contains everything that was in each of the corresponding files for the two original products. Use the Create Product Hierarchy to set up a product hierarchy for the new product, choose a new product name, and so on. Use the Tag Files worksheet to make sure each filename is tagged correctly.ID="44940"If the two original products used different source or destination tree roots, open the Edit Permissions and Destinations worksheet and correct the pathnames so that they agree with whatever source and destination tree roots you're going to use for the new product. Set the source and destination tree roots for the product, if you don't plan to use the default values (/).If you want to change permissions, destinations, or installation attributes for a particular file, open the appropriate worksheet and make your changes. Open the Build Product worksheet. If the two original products used the same source and/or destination tree roots, enter those roots in the corresponding text field now (if you didn't already do this in Step IDREF="44940" TYPE="TEXT"9). Source and destination tree roots are discussed in IDREF="30276" TYPE="TITLE""Setting Source and Destination Tree Roots". (swpkg does not save the source and destination tree roots in the spec and IDB files, so you have to re-enter this information each time you build the product.)Select the desired build options. The build options are described in IDREF="81066" TYPE="TITLE""Selecting Build Options". (swpkg does not save build option selections in the spec and IDB files, so you have to re-enter this information each time you build the product.)Try a test of the build by clicking the Test Build button. When you're asked where to save the Spec and IDB files, choose new filenames so that you don't overwrite the spec and IDB files for the original products.Resolve any error messages that appear in the Message Area during the test. IDREF="93723" TYPE="TITLE"Appendix B, "Troubleshooting," provides some troubleshooting information.Build the product by clicking the Build All button. LBL="" HELPID=""ID="87129"Incorporating the Help Subsystem into a ProductIf you've created online help for your product as described inChapter 9, "Providing Online Help With SGIHelp," in the Indigo Magic Desktop Integration Guide, you should incorporate the help into your installable images. "Producing the Final Product" in that chapter describes how to create an installable help subsystem, which you should do before incorporating it with the rest of your product. That process automatically creates appropriate spec and IDB files for the help subsystem; tags the files; sets the permissions and destinations; and assigns the necessary attributes. The tools that create the online help subsystem use "/" as the Source and Destination Tree Root directories.If you've already created the spec and IDB files for your product using swpkg, you can merge the help subsystem with the existing files as described in IDREF="75276" TYPE="TITLE""Combining Existing Products Into a Single Product".If you've not already created the spec and IDB files for your product, you can open the existing help subsystem spec and IDB files, and expand them as needed to handle the rest of your product.LBL="" HELPID="dividing.products"ID="28478"Breaking an Existing Product Into Two ProductsTo break apart an existing product (built with swpkg) into two or more products, follow these steps:Start swpkg.ID="30203"From the File menu, open the "Open" cascade menu and select "Both." The Open Spec window appears. Use the file browser and text field to select the spec file for the product and click the OK button. The Open Idb window appears. Use the file browser and text field to select the IDB file for the product and click the OK button. Open the Create Product Hierarchy worksheet and delete nodes from the Product Hierarchy graph until you have the structure you want for the first of your two "new" products.Open the Tag Files worksheet and delete all the files that don't belong in the first product. Re-tag any remaining files, if necessary.Use the other worksheets to make any other changes necessary to the remaining files (such as changing the product name, changing installation attributes, and so on).If, in the previous build of the (whole) product, you specified a source tree root and/or a destination tree root, enter those roots in the corresponding text field now. Source and destination tree roots are discussed in IDREF="30276" TYPE="TITLE""Setting Source and Destination Tree Roots". (swpkg does not save the source and destination tree roots in the spec and IDB files, so you have to re-enter this information each time you build the product.)Select the desired build options. The build options are described in IDREF="81066" TYPE="TITLE""Selecting Build Options". (swpkg does not save build option selections in the spec and IDB files, so you have to re-enter this information each time you build the product.)Try a test of the build by clicking the Test Build button. When you're asked where to save the Spec and IDB files, choose new filenames so that you don't overwrite the spec and IDB files for the original product.Resolve any error messages that appear in the Message Area during the test. IDREF="93723" TYPE="TITLE"Appendix B, "Troubleshooting," provides some troubleshooting information.ID="52504"Build the first of the two new products by clicking the Build All button. Go back to the Create Product Hierarchy worksheet and open the Spec and IDB files for the original (whole) product.Repeat Steps IDREF="30203" TYPE="TEXT"2 through IDREF="52504" TYPE="TEXT"10 for the second of your two "new" products.LBL="8"ID="47044"Creating a Patch ProductThis chapter explains how to create a patch product. LBL="" HELPID="Patch"ID="34186"Creating a Patch Product: The Basic StepsThe following steps show you how to create a patch product. For more information about a patch product, see IDREF="18385" TYPE="TITLE""Patch Product Requirements and Concepts."Open the existing product files name='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]' both the spec and idb files.From the File menu, select "Open."From the rollover menu, select "Both."Create the patch.From the File menu, select "Create Patch..."Provide a product name, or keep the default.In the Tag/Source list, select the files to be included in the patch. Use <Shift>click for continuous selection and <Ctrl>click for random selection.Click OK.This step creates both the spec and idb files for the patch product.Keep or edit the follow rule.Click on a subsystem in the Create Product Hierarchy worksheet.Keep or edit the follows rule in the Subsystem Specification sheet (see IDREF="18385" TYPE="TITLE""Patch Product Requirements and Concepts")Keep or edit the permissions, destinations, and attributes using the appropriate worksheets.NoteWhen you create a patch through the "Create Patch..." menu item in the File menu, swpkg automatically copies all of the permissions, destinations, and attributes from the original files into the patch product and eliminates the need to reset these items. Build the patch product (see IDREF="41962" TYPE="TITLE"Chapter 7, "Building the Product").If you've forgotten to add a subsystem, begin the process again.Because all of the settings in the original files are automatically copied when you create a patch through the "Create Patch..." menu item on the File menu, you may find it easiest to start the process over in order to include additional subsystems.If you choose to add a subsystem through the Create Product Hierarchy worksheet, you must write a follows rule for the subsystem and set the permissions, destinations, and attributes.LBL="" HELPID=""ID="18385"Patch Product Requirements and ConceptsA patch product involves the following concepts and requirements.The patch product is separate from the original product.The original product files are not modified.Even though you open the original product files, they are not modified when you create the patch. Just before opening the Create Patch window, swpkg closes the original files. The default name for the patch product is the original product name followed by _patch# where # is a number that increments with each patch created for the product. WarningYou can edit this name. However, SGI recommends that you use the provided name which allows swpkg to increment patches appropriately.All subsystems in the patch product are automatically assigned a follows rule. This rule is mandatory (only one is allowed) and can be edited in the Create Product Hierarchy worksheet by clicking on a subsystem node. It has the following format:follows name lowvers highverswherenameIs the name of the subsystem being replaced.lowversIs the lower boundary range of the product versions to be replaced. Use 0 or higher.highversIs the higher boundary range of the product versions to be replaced. Use one of the following:oldvers, interpreted as the current version minus 1an actual version number that you supplyFor example:If your original product name is finance, and you've written a patch for the base software subsystem, version 2, the follows rule would read something like:follows finance.sw.base 2 2When you save the patch product, you are provided with the default names of product_patch#.spec and product_patch#.idbwhereproductIs the name of the original product#Is a number that increments with each patch created for the product.You can edit this name.LBL="A"ID="12412"Writing Mapping ExpressionsThis appendix contains these sections:IDREF="93018" TYPE="TITLE""About Mapping Expressions"IDREF="74629" TYPE="TITLE""Variables and Data Types"IDREF="16468" TYPE="TITLE""Operators"IDREF="54795" TYPE="TITLE""Built in Variables"IDREF="23808" TYPE="TITLE""Built-In Functions"IDREF="85632" TYPE="TITLE""Statements"IDREF="30977" TYPE="TITLE""Example"LBL="" HELPID=""ID="93018"About Mapping ExpressionsBy writing effective expressions, you can gather files with different names from anywhere and pull them together into one subsystem, or qualify which files with a particular IDB tag go into a subsystem. Although you can usually make these changes by changing your product structure and tags using the swpkg worksheets, you might occasionally prefer instead to add mapping expressions directly to the spec file. Mapping expressions are typically used when you have a very complex existing spec file in which you need to change the file-to-subsystem mappingsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'but you do not want to completely overhaul the spec file. You can change the file-to-subsystem mappings by typing valid mapping expressions into the Mappings text field in the Complete Product Hierarchy worksheet. This appendix explains the "expressions language" used to create valid mapping expressions.NoteUsing expressions can cause problems because subsystem names can change, breaking the intended behavior. Silicon Graphics recommends that you introduce expressions carefully, and only when absolutely necessary.LBL="" HELPID=""ID="74629"Variables and Data TypesValues are typed as integer or stringname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'non-zero integers and non-null strings are considered "true" in boolean tests. A reference to an IDB attribute is "true" if the IDB attribute is present in the database record being operated on. References to IDB attribute arguments are made with a form of subscripting after the argument name, where a list of integers (or integers separated by ``..'' indicating a range) selects specific arguments. The variable argc within brackets refers to the last argument. The selected arguments are concatenated with separating spaces and returned as a string value. (Note that the mechanisms of IDB attribute reference just described are likely to change. They are not terribly useful as is.)Integer and string variables and constants are available, with single and double quotes being entirely equivalent around string constants.LBL="" HELPID=""ID="16468"OperatorsThe primary values may be combined with most of the usual operators, which behave as in C unless otherwise noted:COLUMNS="2"LEFT="0" WIDTH="54"+LEFT="60" WIDTH="216"addLEFT="0" WIDTH="54"-LEFT="60" WIDTH="216"subtractLEFT="0" WIDTH="54"*LEFT="60" WIDTH="216"multiplyLEFT="0" WIDTH="54"/LEFT="60" WIDTH="216"divideLEFT="0" WIDTH="54"=~LEFT="60" WIDTH="216"pattern matchLEFT="0" WIDTH="54"!=LEFT="60" WIDTH="216"pattern not matchLEFT="0" WIDTH="54"//LEFT="60" WIDTH="216"substringLEFT="0" WIDTH="54":: LEFT="60" WIDTH="216"concatenationLEFT="0" WIDTH="54"&LEFT="60" WIDTH="216"bitwise andLEFT="0" WIDTH="54"|LEFT="60" WIDTH="216"bitwise orLEFT="0" WIDTH="54"^LEFT="60" WIDTH="216"bitwise exclusive orLEFT="0" WIDTH="54"~LEFT="60" WIDTH="216"bitwise (unary) notLEFT="0" WIDTH="54"&&LEFT="60" WIDTH="216"logical andLEFT="0" WIDTH="54"||LEFT="60" WIDTH="216"logical orLEFT="0" WIDTH="54"!LEFT="60" WIDTH="216"logical notLEFT="0" WIDTH="54"!=LEFT="60" WIDTH="216"not equal comparison (on integers or strings)LEFT="0" WIDTH="54"==LEFT="60" WIDTH="216"equal comparison (on integers or strings)LEFT="0" WIDTH="54"<=LEFT="60" WIDTH="216"less than or equal comparison (on integers or 
strings)LEFT="0" WIDTH="54">=LEFT="60" WIDTH="216"greater than or equal comparison (on integers or 
strings)LEFT="0" WIDTH="54"<LEFT="60" WIDTH="216"less than comparison (on integers or strings)LEFT="0" WIDTH="54">LEFT="60" WIDTH="216"greater than comparison (on integers or strings)LEFT="0" WIDTH="54"? :LEFT="60" WIDTH="216"conditionalLEFT="0" WIDTH="54"=LEFT="60" WIDTH="216"assignmentLEFT="0" WIDTH="54",LEFT="60" WIDTH="216"expression listParenthesis for grouping are also available. LBL="" HELPID=""ID="54795"Built in Variables typeThe file type as a one-character string; the first character of file, directory, block device, character device, (symbolic) link, or (named) pipe (that is, FIFO).modePermission bits. The type of this value is integer, but is converted to a string according to context (though it's a decimal integer, which is probably not what you want).ownerThe name of the owner. The UID is mapped through etc/passwd.groupThe name of the group. The GID is mapped through etc/group.dstpathThe relative (to root) pathname of the file in the software product destination tree.srcpathThe relative pathname of the file in the source tree.nattrThe integer number of IDB attributes associated with the record being operated on.argc(Defined only within IDB attribute argument list references.) The number of arguments for the current IDB attribute.sbaseThe pathname of the root of the source tree.rbaseThe pathname of the root of the destination tree.IDBThe pathname of the primary IDB file. When files are accessed, the mapping between user and group integer IDs and the owner and group string values in the IDB are based on the etc/passwd and etc/group files, respectively. These are first sought under sbase, then under rbase, then under /.LBL="" HELPID=""ID="23808"Built-In Functionsspath(s)Returns an absolute pathname for the argument; if the given value is relative, it is concatenated with the value of sbase. This is useful in converting a srcpath value into an absolute pathname.rpath(s)Returns an absolute destination pathname, concatenated with the value of rbase.putrec()Prints the current record in standard format (that is, on one line, packed).printf(f,a...)Formatted print (subset of stdio printf). Recognizes field widths with leading zero pad indicator, types %s, %d, %o.print(a...)Unformatted print. Prints values as decimal integers or strings, separated by spaces, terminated with newline.bytes(s)Returns the size, in bytes, of the given file, or -1 if not found.blocks(s)Returns the size, in blocks, of the given file, or -1 if not found.access(s,m)Returns the value of the access(2) system call.LBL="" HELPID=""ID="85632"StatementsThe following statements are implemented as in C: if [ else ], while, for, break, continue, return, grouping with braces, and expressions.LBL="" HELPID=""ID="30977"Example The basic spec file for rfind doesn't follow the recommendation that each software subsystem have a matching reference page system. Instead, a single IDB tag was used for all reference pages. You could use this expression to put the .1 reference pages into one subsystem and the .1m reference pages into another: exp 'rfind.man.rfind && srcpath =~ "*.1"' 
exp 'rfind.man.rfind && srcpath =~ "*.1m"'LBL="B"ID="93723"TroubleshootingThis chapter provides these sections:IDREF="89499" TYPE="TITLE""Checklist of Do's and Don'ts" contains a list of requirements for successful packaging of software.IDREF="98718" TYPE="TITLE""Error Messages" lists some common error messages and makes suggestions for finding and fixing the problems.IDREF="52979" TYPE="TITLE""Other Problems" discusses other problems that you might have when trying to build your product.LBL="" HELPID=""ID="89499"Checklist of Do's and Don'tsRecommendations for successful packaging of software have been included throughout this guide. Recommendations that should not be violated are repeated in the list below so that you can easily verify that you haven't violated important recommendations.Don't include hard links in your product. Don't put a file in more than one subsystem. Don't begin any subsystem name with a digit. Begin all product, image, and subsystem descriptions with the marketing name of your product.Do not select the Required subsystem installation option unless the subsystem is truly required for operation of the workstation.LBL="" HELPID=""ID="98718"Error MessagesHere's a list of possible errors and problems:An error in the spec file prevented gendist from parsing it.A failure might be a sign that the IDB file was not sorted. It can also mean that swpkg cannot read the spec file properly.Warnings about duplicate files indicate that there are two or more files with identical pathnames in a subsystem and these files don't have "mach" dependent attributes that specify that there are machine-specific versions of this file. Fix these warnings by making the pathnames for each of the files in your subsystem unique.Invalid IDB attributes result in messages.Error messages might indicate that you have empty products, images, or subsystems. Check to determine whether or not they need to exist. If not, you can just comment them out temporarily in the spec file.LBL="" HELPID=""ID="52979"Other ProblemsThis section addresses some of the problems you are most likely to encounter and presents approaches to solving the problem.ProblemObsolete subsystems or older versions of subsystems show up in a versions ­a listing after installation.MeaningIf you install all of the subsystems in a product and a versions -a listing shows multiple lines for products, images, and subsystems, then the new version of your product doesn't completely remove the old version of your product.Corrective ActionAdd replaces statements to the spec file that get rid of older versions and obsolete subsystems. See IDREF="30446" TYPE="TITLE""Setting Installation Rules" for instructions.ProblemFiles are missing from subsystems.MeaningSomewhere along the way, some part of the process failed.Corrective ActionFor each file that is missing, check for these conditions:The file is listed in the IDB file. The IDB tag for the file mapped to a valid subsystem. The file doesn't have a mach tag for a machine other than the one you installed on.ProblemSyntax error message.Possible MeaningYou started with an existing product that had includes or defines in the IDB file. swpkg doesn't understand these, so you see a syntax error.Corrective ActionRemove any includes or defines from the IDB file.