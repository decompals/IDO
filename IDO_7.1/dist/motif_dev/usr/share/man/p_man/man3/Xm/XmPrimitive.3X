...\" **
...\" **
...\" **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.
...\" **      All Rights Reserved.
...\" **
...\" **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company
...\" **
...\" **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,
...\" **      Maynard, MA.  All Rights Reserved.
...\" **
...\" **
.TH XmPrimitive 3X "" "" "" ""
...\"
.so /usr/share/lib/tmac/motif/header.all
.so /usr/share/lib/tmac/motif/sml
.so /usr/share/lib/tmac/motif/rsml
...\" ____
.SH NAME
\*LXmPrimitive \*O\(em The Primitive widget class
.iX "XmPrimitive"
.iX "widget class" "Primitive"
.SH SYNOPSIS
.sS
.iS
\&#include <Xm/Xm.h>
.iE
.sE
.SH DESCRIPTION
Primitive is a widget class used as a supporting superclass
for other widget classes.  It handles border drawing and highlighting,
traversal activation and deactivation, and various callback lists needed by
Primitive widgets.
.SS "Classes"
Primitive inherits behavior and resources from \*LCore\*O class.
.PP 
The class pointer is \*LxmPrimitiveWidgetClass\*O.
.PP 
The class name is \*LXmPrimitive\*O.
.nL
.ne 12
.SS "New Resources"
The following table defines a set of widget resources used by the programmer
to specify data.  The programmer can also set the resource values for the
inherited classes to set attributes for this widget.  To reference a
resource by name or by class in a .Xdefaults file, remove the \*LXmN\*O or
\*LXmC\*O prefix and use the remaining letters.  To specify one of the defined
values for a resource in a .Xdefaults file, remove the \*LXm\*O prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \*LXtSetValues\*O (S),
retrieved by using \*LXtGetValues\*O (G), or is not applicable (N/A).
.P 
.TS 
center ;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
XmPrimitive Resource Set
Name	Class	Type	Default	Access
_
XmNbottomShadowColor	XmCBottomShadowColor	Pixel	dynamic	CSG
XmNbottomShadowPixmap	XmCBottomShadowPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNforeground	XmCForeground	Pixel	dynamic	CSG
XmNhelpCallback	XmCCallback	XtCallbackList	NULL	C
XmNhighlightColor	XmCHighlightColor	Pixel	dynamic	CSG
XmNhighlightOnEnter	XmCHighlightOnEnter	Boolean	False	CSG
XmNhighlightPixmap	XmCHighlightPixmap	Pixmap	dynamic	CSG
XmNhighlightThickness	XmCHighlightThickness	Dimension	2	CSG
.wH .tH
XmNnavigationType	XmCNavigationType	XmNavigationType	XmNONE	CSG
XmNshadowThickness	XmCShadowThickness	Dimension	2	CSG
XmNtopShadowColor	XmCTopShadowColor	Pixel	dynamic	CSG
XmNtopShadowPixmap	XmCTopShadowPixmap	Pixmap	dynamic	CSG
XmNtraversalOn	XmCTraversalOn	Boolean	True	CSG
XmNunitType	XmCUnitType	unsigned char	dynamic	CSG
XmNuserData	XmCUserData	XtPointer	NULL	CSG
.TE
.nL
.ne 3
.VL  
.LI "\*LXmNbottomShadowColor\*O"
Specifies the color to use to draw the bottom and right sides of the
border shadow.
This color is used if the \*LXmNtopShadowPixmap\*O resource is
unspecified.
.LI "\*LXmNbottomShadowPixmap\*O"
Specifies the pixmap to use to draw the bottom and right sides of the
border shadow.
.LI "\*LXmNforeground\*O"
Specifies the foreground drawing color used by Primitive widgets.
.LI "\*LXmNhelpCallback\*O"
Specifies the list of callbacks that is called when the help key
is pressed.  The reason sent by the callback is \*LXmCR_HELP\*O.
.LI "\*LXmNhighlightColor\*O"
Specifies the color of the highlighting rectangle.
This color is used if the highlight pixmap resource is
\*LXmUNSPECIFIED_PIXMAP\*O.
.LI "\*LXmNhighlightOnEnter\*O"
Specifies if the highlighting rectangle is drawn when the cursor moves
into the widget.
If the shell's focus policy is \*LXmEXPLICIT\*O, this resource is
ignored, and the widget is highlighted when it has the focus.
If the shell's focus policy is \*LXmPOINTER\*O and if this resource is
True, the highlighting rectangle is drawn when the the cursor moves into
the widget.
If the shell's focus policy is \*LXmPOINTER\*O and if this resource is
False, the highlighting rectangle is not drawn when the the cursor moves
into the widget.
The default is False.
.LI "\*LXmNhighlightPixmap\*O"
Specifies the pixmap used to draw the highlighting rectangle.
.LI "\*LXmNhighlightThickness\*O"
Specifies the thickness of the highlighting rectangle.
.LI "\*LXmNnavigationType\*O"
Determines whether the widget is a tab group.
.wH .rS 
.ML
.LI
\*LXmNONE\*O indicates that the widget is not a tab group.
.LI
\*LXmTAB_GROUP\*O indicates that the widget is a tab group, unless
another widget in the hierarchy has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O.
.LI
\*LXmSTICKY_TAB_GROUP\*O indicates that the widget is a tab group, even
if another widget in the hierarchy has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O.
.LI
\*LXmEXCLUSIVE_TAB_GROUP\*O indicates that the widget is a tab group and
that widgets in the hierarchy whose \*LXmNnavigationType\*O is
\*LXmTAB_GROUP\*O are not tab groups.
.PP
When a parent widget has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O, traversal of non-tab-group widgets within
the group is based on the order of those widgets in their parent's
\*LXmNchildren\*O list.
.PP
When any widget in a hierarchy has an \*LXmNnavigationType\*O of
\*LXmEXCLUSIVE_TAB_GROUP\*O, traversal of tab groups in the hierarchy
proceeds to widgets in the order in which their \*LXmNnavigationType\*O
resources were specified as \*LXmEXCLUSIVE_TAB_GROUP\*O or
\*LXmSTICKY_TAB_GROUP\*O, whether by creating the widgets with that value,
by calling \*LXtSetValues\*O, or by calling \*LXmAddTabGroup\*O.
.LE
.wH .rE
.LI "\*LXmNshadowThickness\*O"
Specifies the size of the drawn border shadow.
.LI "\*LXmNtopShadowColor\*O"
Specifies the color to use to draw the top and left sides of the border
shadow.
This color is used if the \*LXmNtopShadowPixmap\*O resource is
unspecified.
.LI "\*LXmNtopShadowPixmap\*O"
Specifies the pixmap to use to draw the top and left sides of the border
shadow.
.LI "\*LXmNtraversalOn\*O"
Specifies if traversal is activated for this widget.  In CascadeButton
and CascadeButtonGadget, this resource is forced to TRUE unless the parent
is an OptionMenu.
.LI "\*LXmNunitType\*O"
Provides the basic support for resolution independence.
It defines the type of units a widget uses with sizing and
positioning resources.
If the widget's parent is a subclass of \*LXmManager\*O and if the
\*LXmNunitType\*O resource is not explicitly set, it defaults to the
unit type of the parent widget.
If the widget's parent is not a subclass of \*LXmManager\*O, the
resource has a default unit type of \*LXmPIXELS\*O.
.PP
\*LXmNunitType\*O can have the following values:
.wH .rS 
.ML
.LI
\*LXmPIXELS\*O\(emall values provided to the widget are treated as normal
pixel values.
.LI
\*LXm100TH_MILLIMETERS\*O\(emall values provided to the widget are treated
as 1/100 millimeter.
.LI
\*LXm1000TH_INCHES\*O\(emall values provided to the widget are treated as
1/1000 inch.
.LI
\*LXm100TH_POINTS\*O\(emall values provided to the widget are treated as
1/100 point.  A point is a unit used in text processing
applications and is defined as 1/72 inch.
.LI
\*LXm100TH_FONT_UNITS\*O\(emall values provided to the widget are
treated as 1/100 of a font unit.
A font unit has horizontal and vertical components.
These are the values of the XmScreen resources \*LXmNhorizontalFontUnit\*O
and \*LXmNverticalFontUnit\*O.
.LE 
.LI "\*LXmNuserData\*O"
Allows the application to attach any necessary specific data to the widget.
It is an internally unused resource.
.LE 
.SS "Dynamic Color Defaults"
The foreground, background, top shadow, bottom shadow, and
highlight color resources are dynamically defaulted.
If no color data is specified, the colors are
automatically generated.  On a single-plane system, a black and white color
scheme is generated.  Otherwise, four colors are
generated, which display the correct shading for the 3-D visuals.
If the background is the only color specified for a widget, the top
shadow and bottom shadow colors are generated to give the 3-D appearance.
Foreground and highlight colors are generated to provide sufficient
contrast with the background color.
.PP 
Colors are generated only at creation.  Resetting the background through
\*LXtSetValues\*O does not regenerate the other colors.
\*LXmChangeColor\*O can be used to recalculate all associated colors
based on a new background color.
.SS "Inherited Resources"
Primitive inherits behavior and resources from the following
superclass.  For a complete description of each resource, refer to the
man page for that superclass.
.P 
.wH .in 0 
.TS 
center ;
cBp9 ssss
lBp8 lBp8 lBp8 lBp8 lBp8
lp8 lp8 lp8 lp8 lp8.
Core Resource Set
Name	Class	Type	Default	Access
_
XmNaccelerators	XmCAccelerators	XtAccelerators	dynamic	CSG
XmNancestorSensitive	XmCSensitive	Boolean	dynamic	G
XmNbackground	XmCBackground	Pixel	dynamic	CSG
XmNbackgroundPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderColor	XmCBorderColor	Pixel	XtDefaultForeground	CSG
XmNborderPixmap	XmCPixmap	Pixmap	XmUNSPECIFIED_PIXMAP	CSG
XmNborderWidth	XmCBorderWidth	Dimension	0	CSG
XmNcolormap	XmCColormap	Colormap	dynamic	CG
XmNdepth	XmCDepth	int	dynamic	CG
XmNdestroyCallback	XmCCallback	XtCallbackList	NULL	C
XmNheight	XmCHeight	Dimension	dynamic	CSG
XmNinitialResourcesPersistent	XmCInitialResourcesPersistent	Boolean	True	C
XmNmappedWhenManaged	XmCMappedWhenManaged	Boolean	True	CSG
XmNscreen	XmCScreen	Screen *	dynamic	CG
.wH .tH
XmNsensitive	XmCSensitive	Boolean	True	CSG
XmNtranslations	XmCTranslations	XtTranslations	dynamic	CSG
XmNwidth	XmCWidth	Dimension	dynamic	CSG
XmNx	XmCPosition	Position	0	CSG
XmNy	XmCPosition	Position	0	CSG
.TE
.wH .in  
.SS "Callback Information"
A pointer to the following structure is passed to each callback:
.sS
.iS
.ta .25i 1.50i
typedef struct
{
	int	\*Vreason\*L;
	\*LXEvent	\*V* event\*L;
} XmAnyCallbackStruct;
.iE
.sE
.wH .fi
.VL .75i 
.LI "\*Vreason\*O"
Indicates why the callback was invoked.
For this callback, \*Vreason\*O is set to \*LXmCR_HELP\*O.
.LI "\*Vevent\*O"
Points to the \*LXEvent\*O that triggered the callback.
.LE 
.SS "Translations"
The XmPrimitive translations are listed below.
These translations may not directly correspond to a
translation table.
.PP 
Note that for buttons in menus, altering translations in \*L#override\*O
or \*L#augment\*O mode is undefined.
.iS
.ta 1.5i
KUp:	PrimitiveTraverseUp()
KDown:	PrimitiveTraverseDown()
KLeft:	PrimitiveTraverseLeft()
KRight:	PrimitiveTraverseRight()
.sp \n(PDu
KBeginLine:	PrimitiveTraverseHome()
.sp \n(PDu
KNextField:	PrimitiveNextTabGroup()
KPrevField:	PrimitivePrevTabGroup()
.sp \n(PDu
KActivate:	PrimitiveParentActivate()
KCancel:	PrimitiveParentCancel()
.sp \n(PDu
KHelp:	PrimitiveHelp()
.wH .fi
.iE
.SS "Action Routines"
The XmPrimitive action routines are described below:
.VL  
.LI "\*LPrimitiveHelp()\*O:"
Calls the callbacks for \*LXmNhelpCallback\*O if any exist.  If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
.LI "\*LPrimitiveNextTabGroup()\*O:"
Traverses to the first item in the next tab group.  If
the current tab group is the last entry in the tab group list, it
wraps to the beginning of the tab group list.
.LI "\*LPrimitiveParentActivate()\*O:"
If the parent is a manager,
passes the \*LKActivate\*O event received by the widget
to the parent.
.LI "\*LPrimitiveParentCancel()\*O:"
If the parent is a manager,
Passes the \*LKCancel\*O event received by the widget
to the parent.
.LI "\*LPrimitivePrevTabGroup()\*O:"
Traverses to the first item in the previous tab group.
If the beginning of the tab group list is reached, it wraps to the end
of the tab group list.
.LI "\*LPrimitiveTraverseDown()\*O:"
Traverses to the next item below the current widget in the current tab
group, wrapping if necessary.
.LI "\*LPrimitiveTraverseHome()\*O:"
Traverses to the first widget or gadget in the current tab group.
.LI "\*LPrimitiveTraverseLeft()\*O:"
Traverses to the next item to the left of the current widget in the
current tab group, wrapping if necessary.
.LI "\*LPrimitiveTraverseNext()\*O:"
Traverses to the next item in the current tab group, wrapping if
necessary.
.LI "\*LPrimitiveTraversePrev()\*O:"
Traverses to the previous item in the current tab group, wrapping if
necessary.
.nL
.ne 10
.LI "\*LPrimitiveTraverseRight()\*O:"
Traverses to the next item to the right of the current gadget in the
current tab group, wrapping if necessary.
.nL
.ne 3
.LI "\*LPrimitiveTraverseUp()\*O:"
Traverses to the next item above the current gadget in the current tab
group, wrapping if necessary.
.LE
.SS "Additional Behavior"
This widget has the additional behavior described below:
.VL  
.LI "\*L<FocusIn>\*O:"
If the shell's keyboard focus policy is \*LXmEXPLICIT\*O, highlights the
widget and gives it the focus.
.LI "\*L<FocusOut>\*O:"
If the shell's keyboard focus policy is \*LXmEXPLICIT\*O, unhighlights
the widget and removes the focus.
.LE
.SS "Virtual Bindings"
The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see \*LVirtualBindings(3X)\*O.
.SH RELATED INFORMATION
.na
\*LCore(3X)\*O,
\*LXmChangeColor(3X)\*O, and
\*LXmScreen(3X)\*O.
.ad
