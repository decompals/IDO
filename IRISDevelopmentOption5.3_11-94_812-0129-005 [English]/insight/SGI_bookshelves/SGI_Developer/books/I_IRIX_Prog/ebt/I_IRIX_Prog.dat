#EDIR DATA#
LANG=CProgramming on Silicon Graphics Systems: An OverviewDocument Number007-2476-001CONTRIBUTORSWritten by Eleanor BasslerEdited by C. KleinfeldPhotography by Nancy Cam© Copyright 1994, Silicon Graphics, Inc.name='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]' All Rights ReservedThis document contains proprietary and confidential information of Silicon Graphics, Inc. The contents of this document may not be disclosed to third parties, copied, or duplicated in any form, in whole or in part, without the prior written permission of Silicon Graphics, Inc.RESTRICTED RIGHTS LEGENDUse, duplication, or disclosure of the technical data contained in this document by the Government is subject to restrictions as set forth in subdivision (c) (1) (ii) of the Rights in Technical Data and Computer Software clause at DFARS 52.227-7013 and/or in similar or successor clauses in the FAR, or in the DOD or NASA FAR Supplement. Unpublished rights reserved under the Copyright Laws of the United States. Contractor/manufacturer is Silicon Graphics, Inc., 2011 N. Shoreline Blvd., Mountain View, CA 94043-1389.Silicon Graphics and IRIS are registered trademarks and IRIX, IRIS Graphics Library, IRIS IM, IRIS InSight, IconSmith, OpenGL, IRIS ViewKit, POWER Fortran Accelerator, IRIS Performer, Indigo Video, Indy Video, Galileo Video, Indigo2 Video, Sirius Video, ImageVision Library, CASEVision, Impressario, Indigo Magic, Open Inventor, POWER Series, and RealityEngine are trademarks of Silicon Graphics, Inc. OSF/Motif is a trademark of Open Software Foundation. UNIX is a registered trademark in the United States and other countries, licensed exclusively through X/Open Company, Ltd. X Window System is a trademark of the Massachusetts Institute of Technology. PostScript is a registered trademark and Display PostScript is a trademark of Adobe Systems, Inc. Ada is a registered trademark of Ada Joint Program Office, U. S. Government. AutoCad is a registered trademark of Autodesk, Inc. Sun Microsystems is a registered trademark of Sun Microsystems. Apple is a registered trademark and QuickTime is a trademark of Apple Computer, Inc. Kodak and Kodak Photo CD are trademarks of Eastman Kodak Company.About This GuideIf your goal is to write application programs that run on Silicon Graphics® computers, and if you know quite a bit about UNIX® but not much about the IRIXÔ operating system, this book is for you. It doesn't tell you everything you need to know to write your IRIX application, but it does give you an overview of IRIX and the tools and libraries it provides, and it tells you where to go to learn more.The IRIX operating system is Silicon Graphics' implementation of the UNIX operating system. All application programs written for Silicon Graphics platforms run in the IRIX environment. Writing an application with a graphical user interface that runs on Silicon Graphics platforms requires the IRIX operating system, a compiler for your source code, tools to build your user interface, tools to debug and tune your program, and typically one or more application libraries. This guide describes the software Silicon Graphics provides to perform these tasks.IDREF="91023" TYPE="TEXT"Figure i illustrates the relationship between Silicon Graphics software, your application, and your user. In this example, an application uses one of the application libraries, Open Inventor, to create an image and display it on the monitor.FILE="aboutThis.ras" POSITION="INLINE" SCALE="FALSE"LBL="i"Figure i ID="91023"Building an Application with Silicon Graphics SoftwareFILE="" POSITION="INLINE" SCALE="FALSE"LBL="" HELPID=""What This Guide ContainsThis introduction to programming on Silicon Graphics computers contains the following chapters:IDREF="27403" TYPE="TITLE"Chapter 1, "The IRIX Operating System," briefly describes IRIX, the UNIX standards with which it complies, and the features added beyond UNIX to support the graphics and multiprocessing capabilities of Silicon Graphics platforms. IDREF="69150" TYPE="TITLE"Chapter 2, "IRIX Developer Documentation," describes the documentation available for IRIX application developers.IDREF="71998" TYPE="TITLE"Chapter 3, "Compilers," briefly describes the compilers available to IRIX developers.IDREF="16042" TYPE="TITLE"Chapter 4, "User Interface Tools," tells you about the tools Silicon Graphics provides to help you develop a graphical user interface for your application.IDREF="72381" TYPE="TITLE"Chapter 5, "Software Development Tools," describes the tools you can use to compile, debug, and tune your application. It also tells you about configuration management and version control software.IDREF="80680" TYPE="TITLE"Chapter 6, "Application Libraries," provides an introduction to the application libraries you can use for graphics, image processing, digital media, and printer/scanner management applications.LBL="" HELPID=""What You Should Know Before Reading This GuideThis guide assumes that readers are experienced programmers who are familiar with a UNIX programming environment, but not necessarily familiar with IRIX. An understanding of object-oriented programming is helpful when reading parts of this book.LBL="1"ID="27403"The IRIX Operating SystemThis chapter provides a brief overview of the IRIX operating system, Silicon Graphics' implementation of the UNIX operating system. It describes IRIX compliance with standards, summarizes the features unique to IRIX (such as support for graphics hardware), briefly discusses writing device drivers (which run as part of the IRIX kernel), and lists the hierarchy of tools and libraries you can use when you write an IRIX application.LBL="" HELPID=""ID="28085"About the IRIX Operating SystemIRIX, Silicon Graphics' implementation of the UNIX operating system, is based on UNIX System V, Release 4 (SVR4). LBL="" HELPID=""Standards ComplianceIRIX provides standard SVR4 programming interfaces and BSD networking, and complies with the following standards:ID="01.IRIXOS1"System V Interface Definition, Issue 3 (SVID3), which is the defining document for SVR4. IRIX provides the SVR4 Applications Programming Interface (API) and the Applications Binary Interface (ABI) as defined in SVID3.X/Open Portability Guide, Issue 3 (XPG3), which specifies a set of programming interfaces to be provided by operating systems in order to facilitate the writing of portable programs.POSIX P1003.1, another standard for portable programming.X Window System, Version 11, Release 6 (X11R6). IRIX provides the industry-standard X Window SystemÔ.OSF/MotifÔ Release 1.2. IRIX includes IRIS IMÔ, the Silicon Graphics port of the industry-standard OSF/Motif user-interface toolkit.OpenGLÔ. IRIX provides a full implementation of this standard for 3D graphics.LBL="" HELPID=""InternationalizationInternationalization is the process of making a program capable of running in more than one spoken-language environment without recompiling. Internationalized software can be made to produce output in a user's native language, to format data (such as dates and currency values) according to local custom, and in other ways make the software more comprehensible for people whose culture is different than that of the original software developer.ID="01.IRIXOS2"IDREF="59814" TYPE="TABLE"Table 1-1 lists the internationalization features supported by IRIX and the standards with which this implementation complies. COLUMNS="2"LBL="1-1"Table 1-1 ID="59814"IRIX-Supported Internationalization FeaturesLEFT="0" WIDTH="175"FeatureLEFT="180" WIDTH="157"StandardLEFT="0" WIDTH="175"LocalesLEFT="180" WIDTH="157"ANSI C and POSIX (ISO0045-1)LEFT="0" WIDTH="175"XPG/3 message catalogs and 
interpretation of locale stringsLEFT="180" WIDTH="157"X/OPEN Portability Guide, Issue 3 
(XPG/3)LEFT="0" WIDTH="175"Multi-National Language Support 
(MNLS) message catalogsLEFT="180" WIDTH="157"UNIX System V Release 4LEFT="0" WIDTH="175"Input methodsText renderingResource filesLEFT="180" WIDTH="157"X11R6The chapter titled "Internationalization" in Topics in IRIX Programming describes functions you can use and guidelines you can follow to create an application that runs in more than one spoken-language environment.LBL="" HELPID=""NetworkingThe network programming facilities available with the IRIX operating system include the following:ID="01.IRIXOS3"ID="01.IRIXOS4"The Transport Layer Interface (TLI) defined in ISO-OSI, using System V Release 4 STREAMS modules. ID="01.IRIXOS5"The International Standards Organization (ISO) has developed a standard known as the Reference Model of Open Systems Interconnection (ISO-OSI). This model uses a layered view of networking. The TLI, which defines an interface between two of these layers, provides a set of functions that applications can call to perform various network operations. TLI conforms to the MIPS® ABI (Application Binary Interface).Network interfaces (sockets) defined by the 4.3 release of the Berkeley Software Distribution (BSD).The 4.3BSD Inter-Process Communication (IPC) facility provides a socket interface that enables low-level access to network addressing and data transfer. IRIX supports ID="01.IRIXOS6"libsocket, the standard SVR4 method of accessing the BSD4.3 networking interface. The libsocket library provides a socket interface that is MIPS ABI compliant.An implementation of the Sun Microsystems® Remote Procedure Call (RPC) library. ID="01.IRIXOS7"RPC implements a remote procedure call model, in which a procedure executing on a remote system can be treated as a local procedure call by the calling application. RPC enables synchronous execution of procedure calls on remote hosts and provides transparent access to network facilities.The IRIX operating system implements the Internet Protocol (IP) suite. The IP suite is a collection of layered protocols developed by the Department of Defence Advanced Research Project Agency (DARPA). The two most widely used IP protocols are the Transmission Control Protocol (TCP) and the User Datagram Protocol (UDP). The IRIX operating system implements the Internet Protocol suite and UNIX domain sockets using the 4.3BSD UNIX socket mechanism.ID="01.IRIXOS8"ID="01.IRIXOS9"LBL="" HELPID=""X Window SystemThe Silicon Graphics native X Window System is based on the X Version 11 Release 6 (X11R6) standard that supports multiple visuals, overlay windows, the X Input Extension, the Display PostScriptID="01.IRIXOS10"Ô Extension, the Shape Extension, and the Shared Memory Extension. Read IDREF="57656" TYPE="TITLE""X Window System" for more information about the X Window System on Silicon Graphics platforms.LBL="" HELPID=""Silicon Graphics ExtrasIn addition to the standard UNIX features described in ID="01.IRIXOS11"IDREF="28085" TYPE="TITLE""About the IRIX Operating System", IRIX provides software that supports the graphics and multiprocessing capabilities of Silicon Graphics platforms. These added features include:Fast 3D graphicsParallel programmingReal-time enhancementsHigh-performance I/OAn icon-oriented interface to IRIXLBL="" HELPID=""Fast 3D GraphicsMost Silicon Graphics systems are equipped with specialized graphics hardware and software. Programs can take advantage of this graphics support by using:OpenGL interfacesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'the industry standard interfaces for 3D rendering across multiple platformsOpen InventorÔname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'a graphics library, built on OpenGL, for creating interactive graphics applicationsIRIS Graphics LibraryÔ (IRIS GL)name='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'a library of subroutines for creating color graphics and animationIRIS PerformerÔname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'a graphics library, built on IRIS GL, for creating real-time graphics and visual simulation applicationsImageVision LibraryÔname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'an image processing library built on IRIS GLIDREF="23546" TYPE="TITLE""Graphics Libraries" and IDREF="56720" TYPE="TITLE""ImageVision Library" describe these libraries in greater detail.LBL="" HELPID=""Parallel ProgrammingIRIX is designed to take advantage of multiple processors and provides interfaces to support parallel programming. These interfaces include:ID="01.IRIXOS12"Low-overhead inter-process communication routinesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'The IRIX IPC mechanisms use a shared arena (shared memory) for communication between processes. This arena is mapped into a process's user space, which means most of the shared arena IPC functions don't have to make system calls. This keeps overhead lower than for standard System V IPC. Read the chapter titled "Inter-Process Communication" in Topics in IRIX Programming for more information about shared arenas.Multiprocessor control routinesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'IRIX supports the sysmp(2) commands MP_RESTRICT and MP_MUSTRUN, and the runon(1) and mpadmin(1) commands. These allow you to control the distribution of processes among the processors in a multiprocessor system. Read the REACT/Pro Release Notes for more information about these commands.Shared address space (sproc)name='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'This system call creates a new process that is a clone of the calling process and that shares the virtual address space of the calling process.LBL="" HELPID=""Real-Time EnhancementsIRIX includes a number of extensions to enable programs to achieve real-time response. You can use these features toID="01.IRIXOS13"accurately time eventscontrol allocation of memory to the processprovide for priority scheduling The REACT/Pro Release Notes tell you where you can find more information about the mechanisms available to help you achieve real-time performance and how to use these features together to create the best real-time environment.LBL="" HELPID=""High-Performance I/O IRIX includes several special programming interfaces for high-performance I/O. These include:ID="01.IRIXOS14"Memory-mapped files. You can use the mpin(2) and munpin(2) commands to lock data into memory, thus reducing I/O activity.Asynchronous I/Oname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'IRIX has added support for asynchronous I/O in accordance with the specification in POSIX 1003.4a Draft 12.Direct I/Oname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'This bypasses the system buffer cache.These interfaces are described in the REACT/Pro Release Notes.LBL="" HELPID=""Indigo Magic EnvironmentThe Indigo MagicID="01.IRIXOS15"Ô desktop is an end-user environment that provides an icon-oriented interface to the IRIX system. Users can launch applications and select files using icons instead of pathnames. You can integrate your application into the desktop environment to give it the Indigo Magic look and feel. IDREF="56505" TYPE="TITLE""Indigo Magic Desktop Integration" provides an overview of desktop integration. The Indigo Magic Desktop Integration Guide covers the topic in detail.LBL="" HELPID=""Device DriversA device driver enables communication between a user process and a peripheral device. In addition to kernel-level drivers, there are user-level drivers and STREAMS modules. Device drivers perform functions such as taking the device online and offline, transmitting data from the kernel to the device, receiving data from the single device and passing it to the kernel, and handling and reporting I/O errors.ID="01.IRIXOS16"Silicon Graphics provides drivers for many popular devices. However, you still may find that you need to write a device driver to support a device for which no driver is available. The IRIX filesystem provides a device-independent interface that allows device drivers to be opened, read, written, and closed as though they were files. The program issues standard system I/O calls, and the system then calls the driver you've written to handle the device. IDREF="74553" TYPE="GRAPHIC"Figure 1-1 illustrates the relationship between the various software modules that connect the user application and the device with which it needs to communicate. FILE="Fig1.1.ai" POSITION="INLINE" SCALE="FALSE"LBL="1-1"Figure 1-1 ID="74553"Driver Position in the KernelThe kernel interfaces for IRIX device drivers are ID="01.IRIXOS17"SVR4 Device Driver interface/Driver Kernel Interface (SVR4 DDI/DKI). IRIX uses the multiprocessor version of DDI/DDK.SVR4 STREAMS Interface, documented in the UNIX System V Release 4 Streams Programming Guide.IRIX 5.x Data Link Provider Interface (DLPI).User-level device drivers for VME, EISA, and SCSI.The following list describes some Silicon Graphics-specific features you may need to include in a device driver:Memory mapping extensions (map and unmap)name='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'the Silicon Graphics-specific memory mapping functions used by a device driver.Utility extensionsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'the Silicon Graphics-specific utility functions a developer needs to include in a device driver. Data structure extensionsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'data structure extensions supported by Silicon Graphics include eisa_dma_buf and eisa_dma_cb.Four new kernel definitions.LBL="" HELPID=""Writing an Application ProgramThe IRIS Developer's Option (IDO) is required for writing applications that run on Silicon Graphics platforms. This option provides the basic software and documentation for the development environment. ID="01.IRIXOS18"IDREF="65335" TYPE="TITLE""The IRIS Developer's Option" tells you more about the IDO.When you write an application for a Silicon Graphics platform, you can choose from a number of languages, toolkits, and libraries supplied by Silicon Graphics for developers. Your choice depends on the nature of your application and, to some degree, on your personal preference. Here are some choices you can make and the options available under IRIX:ID="01.IRIXOS19"A programming language. Choose a language that is best suited for your application. Silicon Graphics provides compilers for C, C++, Fortran, Pascal, and Ada®. If your application runs on a multiprocessing platform and performance is a key consideration, you may want to choose either Power C or POWER Fortran, the versions of C and Fortran with special support for multiprocessing.A graphical user interface. If you plan to incorporate a graphical user interface in your application, you can use one of the user interface toolkits provided by Silicon Graphics rather than writing your own. These toolkits are IRIS ViewKitÔ and IRIS IM, which is Silicon Graphics' port of the industry-standard OSF/Motif. They allow you to build an interface for your application that looks like the interfaces of other applications running in the Indigo Magic desktop environment.Software development tools. When you order the IDO, you receive tools for compiling, debugging, and tuning your application. These tools include the compiler driver, the dbx debugger, and several performance tuning tools. You can also order the CASEVision WorkShop, which provides several interactive, graphical tools for debugging and tuning your application. If your project is large, you may need configuration management and version control. You can use the CASEVisionÔ/Tracker and CASEVision/ClearCase tools for these tasks.An application library. You may want to use one of the application libraries developed by Silicon Graphics. These libraries provide tools for developers of 3D graphics, image processing, digital media, and printer/scanner management applications.IDREF="97514" TYPE="GRAPHIC"Figure 1-2 shows, in a hierarchical arrangement, the components you can select.IDREF="97514" TYPE="TEXT"FILE="Fig1.2.ai" POSITION="INLINE" SCALE="FALSE"LBL="1-2"Figure 1-2 ID="97514"Component Hierarchy of an IRIX Application ProgramNow that you have an overview of the IRIX programming environment, you're ready to learn more about the tools and libraries available and the documentation Silicon Graphics provides for reading about them. Chapter 2 lists the IRIX programming documentation. Chapters 3 through 6 describe IRIX compilers, tools, and application libraries in greater detail. LBL="2"ID="69150"IRIX Developer DocumentationThis chapter tells you about the documentation Silicon Graphics provides to describe the operating system, compilers, tools, and libraries you can use to develop your applications. It presents this information in three forms:A documentation roadmap that lists the available developer documentation in graphical form.A list of the manuals provided to everyone who orders the IRIS Developer's Option (IDO).An annotated list of all IRIX developer documentation, grouped by function:IDREF="48423" TYPE="TABLE"Table 2-1Operating system manualsIDREF="89503" TYPE="TABLE"Table 2-2Programming language manualsIDREF="85233" TYPE="TABLE"Table 2-3Documentation about user interface toolkitsIDREF="28684" TYPE="TABLE"Table 2-4Manuals about software development toolsIDREF="35359" TYPE="TABLE"Table 2-5Application librariesLBL="" HELPID=""ID="88507"A Documentation RoadmapThe diagram in ID="02.IRIXmanuals1"IDREF="35533" TYPE="GRAPHIC"Figure 2-1 shows the documentation provided by Silicon Graphics for application developers. FILE="Fig2.1.ai" POSITION="INLINE" SCALE="FALSE"LBL="2-1"Figure 2-1 ID="35533"Documentation for DevelopersLBL="" HELPID=""ID="65335"The IRIS Developer's OptionThe IRIS Developer's Option (IDO) gives you the basic software and documentation you need to write applications for Silicon Graphics platforms. When you order the IDO, you'll receive online manuals for the products that are part of the IDO. You can view these manuals using IRIS InSightID="02.IRIXmanuals2"Ô, an online documentation viewer. The manuals you receive as part of the IDO are:Programming on Silicon Graphics Systems: An OverviewTopics in IRIX ProgrammingIRIX Network Programming GuideIRIX Device Driver Programming GuideIRIX Device Driver Reference PagesC Language Reference Manualdbx User's Guidedbx Quick ReferenceOpenGL Programming GuideOpenGL Porting GuideIndigo Magic Desktop Integration GuideSilicon Graphics User Interface GuidelinesXlib Programming ManualX11 Input Extension Library SpecificationX Toolkit Intrinsics Programming ManualIRIS IM Programming NotesOSF/Motif Programmer's GuideOSF/Motif Programmer's ReferenceOSF/Motif Style GuideIRIS Digital Media Programming GuideMIPS Compiling and Performance Tuning GuideSoftware Packager User's GuideIf you want to order printed versions of these manuals, call SGI Express at 1­800-800-7441, ext. 4650, and supply the desired product codes. Refer to the ID="02.IRIXmanuals3"Documentation Catalog for IRIX 5.3, viewable from IRIS Insight, to determine product codes and other information about ordering manuals.LBL="" HELPID=""ID="10910"An Annotated List of ManualsThe five tables in this section list the manuals available for developers, along with the product name for each manual and a brief description of the content of the manual. LBL="" HELPID=""Operating System Level DocumentationID="02.IRIXmanuals4"IDREF="48423" TYPE="TABLE"Table 2-1 lists manuals containing information about topics at the operating system level. You receive online versions of these manuals when you order the IDO.COLUMNS="3"LBL="2-1"Table 2-1 ID="48423"Operating System Level ManualsLEFT="0" WIDTH="61"Product NameLEFT="70" WIDTH="108"TitleLEFT="185" WIDTH="164"DescriptionLEFT="0" WIDTH="61"IDOLEFT="70" WIDTH="108"Programming on Silicon 
Graphics Systems: An 
OverviewLEFT="185" WIDTH="164"Provides an overview of the IRIX 
operating system, programming 
languages, software development and 
user interface toolkits, and application 
libraries.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"Topics in IRIX 
ProgrammingLEFT="185" WIDTH="164"Describes selected topics in IRIX 
programming, including interprocess 
communication, file and record locking, 
fonts, and internationalization.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"IRIX Network 
Programming GuideLEFT="185" WIDTH="164"Describes various approaches to writing 
software that sends or receives 
information through a network.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"IRIX Device Driver 
Programming GuideLEFT="185" WIDTH="164"Tells you how to write device drivers to 
control peripheral devices.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"IRIX Device Driver 
Reference PagesLEFT="185" WIDTH="164"Contains reference pages that describe 
the functions and data structures used in 
writing device drivers.LBL="" HELPID=""CompilersID="02.IRIXmanuals5"IDREF="89503" TYPE="TABLE"Table 2-2 lists the manuals containing information about programming languages supported by Silicon Graphics. Some of these manuals come with IDO. Others you receive only when you order the associated product.COLUMNS="3"LBL="2-2"Table 2-2 ID="89503"Compiler ManualsLEFT="0" WIDTH="61"Product NameLEFT="70" WIDTH="108"TitleLEFT="185" WIDTH="166"DescriptionLEFT="0" WIDTH="61"C++ LEFT="70" WIDTH="108"C++ Programming GuideLEFT="185" WIDTH="166"Tells you how to compile, link, and run a 
C++ program. Documents the interface 
between C and C++, and the differences 
between the 64- and 32-bit versions of 
the compiler. Describes how to use the 
Delta/C++ compiler.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"C++ Language System 
OverviewLEFT="185" WIDTH="166"Contains an overview of the language 
features of C++. Describes the 
differences between C and C++.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"C++ Language System 
LibraryLEFT="185" WIDTH="166"Introduces the iostream support in the 
C++ library and describes facilities for 
using complex-number arithmetic.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"LEFT="185" WIDTH="166"LEFT="0" WIDTH="61"IDOLEFT="70" WIDTH="108"C Language Reference 
ManualLEFT="185" WIDTH="166"Contains a summary of the syntax and 
semantics of the C programming 
language as implemented on Silicon 
Graphics platforms. LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"LEFT="185" WIDTH="166"LEFT="0" WIDTH="61"IRIS Power CLEFT="70" WIDTH="108"IRIS Power C User's GuideLEFT="185" WIDTH="166"Describes how to use IRIS Power C, a C 
compiler for developers who want to 
make efficient use of IRIX 
multiprocessors by executing parts of 
their programs concurrently.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"LEFT="185" WIDTH="166"LEFT="0" WIDTH="61"FortranLEFT="70" WIDTH="108"Fortran 77 Language 
Reference ManualLEFT="185" WIDTH="166"Describes the Fortran 77 language 
specifications as implemented on the 
IRIS workstations.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"Fortran 77 Programmer's 
GuideLEFT="185" WIDTH="166"Describes the implementation of 
Fortran 77 for IRIX and the IRIS 
workstations.LEFT="0" WIDTH="61"POWER 
FortranLEFT="70" WIDTH="108"POWER Fortran 
Accelerator User's GuideLEFT="185" WIDTH="166"Describes the features of the POWER 
Fortran AcceleratorÔ (PFA), a source-to-
source preprocessor that allows you to 
run Fortran 77 programs on 
multiprocessor systems.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"LEFT="185" WIDTH="166"LEFT="0" WIDTH="61"PascalLEFT="70" WIDTH="108"Pascal Programming GuideLEFT="185" WIDTH="166"Describes the general syntax of the 
Pascal programming language, 
including data structures and program 
flow control. LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"LEFT="185" WIDTH="166"LEFT="0" WIDTH="61"IRIX5 AXMLEFT="70" WIDTH="108"Ada X/Motif Interface 
(AXI) Programmer 
Reference ManualLEFT="185" WIDTH="166"Contains information about 
programming in the AXM environment, 
including the Ada preprocessor, the 
Statistical Analyzer, and interfaces to 
libraries written in other languages.LBL="" HELPID=""User Interface ToolsID="02.IRIXmanuals6"IDREF="85233" TYPE="TABLE"Table 2-3 lists the manuals containing information about the user interface libraries and toolkits supported by IRIX. Some of these manuals come with the IDO. Others you receive only when you order the associated product.COLUMNS="3"LBL="2-3"Table 2-3 ID="85233"Documentation About User Interface ToolsLEFT="0" WIDTH="61"Product NameLEFT="70" WIDTH="108"TitleLEFT="185" WIDTH="164"DescriptionLEFT="0" WIDTH="61"IDOLEFT="70" WIDTH="108"Xlib Programming ManualLEFT="185" WIDTH="164"Describes the X library, the C interface to 
the X Window System. LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"X11 Input Extension 
Library SpecificationLEFT="185" WIDTH="164"Describes the input extension to the 
X11 server. This extension supports 
the use of additional input devices 
beyond the pointer and keyboard 
devices defined by the core X 
protocol.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"X Toolkit Intrinsics 
Programming ManualLEFT="185" WIDTH="164"Describes how to use the Xt Intrinsics 
library to write X Window System 
programs. LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"OSF/Motif Programmer's 
GuideLEFT="185" WIDTH="164"Describes how to use the OSF/Motif API to create Motif 
applications.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"OSF/Motif Programmer's 
ReferenceLEFT="185" WIDTH="164"Contains descriptions of the OSF/Motif 
toolkit, window manager, and user 
interface language commands and 
functions.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"OSF/Motif Style GuideLEFT="185" WIDTH="164"Provides a framework of behavior 
specifications to guide developers in the 
design and implementation of products 
consistent with the OSF/Motif user 
interface.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"IRIX IM Programming 
NotesLEFT="185" WIDTH="164"Describes how to develop applications 
using IRIS IM. Contains advice for X and 
Xt programmers about programming in 
the Silicon Graphics X environment.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"Indigo Magic Desktop 
Integration GuideLEFT="185" WIDTH="164"Explains how to integrate applications 
into the Indigo Magic desktop 
environment. LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"Silicon Graphics User 
Interface GuidelinesLEFT="185" WIDTH="164"Helps you create products whose user 
interface is consistent with other 
applications in the Indigo Magic 
desktop environment.LEFT="0" WIDTH="61"LEFT="70" WIDTH="108"LEFT="185" WIDTH="164"LEFT="0" WIDTH="61"C++LEFT="70" WIDTH="108"IRIS ViewKit Programmer's 
GuideLEFT="185" WIDTH="164"Describes how to create programs using 
IRIS ViewKit, a toolkit that provides 
user interface facilities for applications.LBL="" HELPID=""Software Development ToolsID="02.IRIXmanuals7"IDREF="28684" TYPE="TABLE"Table 2-4 contains a list of the manuals describing the tools for compiling, debugging, and tuning your application. Some of these manuals come with IDO. Others you receive only when you order the associated product.COLUMNS="3"LBL="2-4"Table 2-4 ID="28684"Software Development Tools ManualsLEFT="0" WIDTH="61"Product NameLEFT="70" WIDTH="111"TitleLEFT="190" WIDTH="159"DescriptionLEFT="0" WIDTH="61"IDOLEFT="70" WIDTH="111"MIPS Compiling and 
Performance Tuning GuideLEFT="190" WIDTH="159"Describes the compiler system, 
dynamic shared objects (DSOs), and 
program debugging tools. It explains 
ways to improve program 
performance using prof, pixie, and the 
optimization options.LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"LEFT="190" WIDTH="159"LEFT="0" WIDTH="61"IDOLEFT="70" WIDTH="111"dbx User's GuideLEFT="190" WIDTH="159"Describes how to use dbx, a source 
level debugger, to debug C, C++, 
Fortran 77, Pascal, and assembler 
programs. This includes how to 
execute a program using dbx, examine 
source code, control program 
execution, debug machine language 
code, and debug multiple processes.LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"LEFT="190" WIDTH="159"LEFT="0" WIDTH="61"CASEVision 
WorkShopLEFT="70" WIDTH="111"CASEVision/WorkShop 
User's Guide - Volume 1LEFT="190" WIDTH="159"Describes how to use the Debugger 
and Static Analyzer tools in the 
WorkShop toolset. LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"CASEVision/WorkShop 
User's Guide - Volume 2LEFT="190" WIDTH="159"Describes how to use the Performance 
Analyzer, Tester, and Build Manager 
tools in the WorkShop toolset. LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"CASEVision Environment 
GuideLEFT="190" WIDTH="159"Describes the common environment 
that all the tools in the CASEVision 
product line share.LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"CASEVision/WorkShop 
MegaDev User's GuideLEFT="190" WIDTH="159"Describes the C++ Browser and the Fix 
and Continue utilities. The C++ 
Browser lets you view the structure of 
any set of C++ classes. Fix and 
Continue allows you to redefine 
functions and then continue execution 
without recompiling.LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"CASEVision/WorkShop Pro 
MPF User's GuideLEFT="190" WIDTH="159"Describes the Pro MPF tool, an 
interactive, visual comparison of the 
original source with transformed, 
parallelized code.LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"CASEVision/Tracker Design 
GuideLEFT="190" WIDTH="159"Describes the CASEVision/Tracker, a 
tool for creating systems to track bugs 
and enhancement requests.LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"CASEVision/Tracker User's 
GuideLEFT="190" WIDTH="159"Describes how to use the Request 
Tracking System (RTS), a system for 
tracking bugs and requests for 
enhancements.LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"CASEVision/ClearCaseLEFT="190" WIDTH="159"Describes the CASEVision/ClearCase 
software configuration management 
system.LEFT="0" WIDTH="61"LEFT="70" WIDTH="111"LEFT="190" WIDTH="159"LEFT="0" WIDTH="61"DESKLEFT="70" WIDTH="111"Software Packager User's 
GuideLEFT="190" WIDTH="159"Describes how to use the Software 
Packager (swpkg), a graphical tool for 
packaging software for installation on 
Silicon Graphics workstations. 
Products packaged with Software 
Packager can be installed with 
Software Manager (swmgr), an Indigo 
Magic Desktop utility for installing 
software.LBL="" HELPID=""Application LibrariesID="02.IRIXmanuals8"IDREF="35359" TYPE="TABLE"Table 2-5 contains a list of the manuals describing the graphics, image processing, digital media, and printer/scanner libraries available on an IRIS system. Some of these manuals come with IDO. Others you receive only when you order the associated product.COLUMNS="3"LBL="2-5"Table 2-5 ID="35359"Application Libraries ManualsLEFT="0" WIDTH="78"Product NameLEFT="85" WIDTH="111"TitleLEFT="205" WIDTH="143"DescriptionLEFT="0" WIDTH="78"IDOLEFT="85" WIDTH="111"OpenGL Programming 
GuideLEFT="205" WIDTH="143"Describes how to use OpenGL, a 
platform-independent standard 
for rendering 3D graphics.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"OpenGL Reference ManualLEFT="205" WIDTH="143"Contains the reference pages for 
OpenGL, the OpenGL Utility 
Library (GLU), and GLXname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'the 
OpenGL extension to X. Also 
includes an overview and 
summary of OpenGL routines and 
commands.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"The OpenGL Porting GuideLEFT="205" WIDTH="143"Provides directions, hints, and tips 
for porting your IRIS Graphics 
Library software to OpenGL.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"LEFT="205" WIDTH="143"LEFT="0" WIDTH="78"Graphics LibraryLEFT="85" WIDTH="111"Graphics Library 
Programming Guide, 
Volumes 1-2LEFT="205" WIDTH="143"Describes the IRIS Graphics 
Library API.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"Graphics Library 
Programming Tools and 
TechniquesLEFT="205" WIDTH="143"Describes useful software tools 
and programming techniques for 
use with IRIS GL.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"The Inventor ToolmakerLEFT="205" WIDTH="143"Provides advanced information on 
extending Open Inventor by 
creating new C++ classes and 
customizing existing classes.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"Open Inventor C++ 
Reference PagesLEFT="205" WIDTH="143"Contains the C++ reference pages 
for Open Inventor.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"LEFT="205" WIDTH="143"LEFT="0" WIDTH="78"ImageVisionLEFT="85" WIDTH="111"ImageVision Library 
Programming GuideLEFT="205" WIDTH="143"Describes how to use the 
ImageVision Library to perform 
image processing tasks.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"The ImageVision Library 
Inheritance HierarchyLEFT="205" WIDTH="143"A quick reference card that shows 
the entire inheritance hierarchy of 
the ImageVision Library.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"LEFT="205" WIDTH="143"LEFT="0" WIDTH="78"IRIS PerformerLEFT="85" WIDTH="111"IRIS Performer 
Programming GuideLEFT="205" WIDTH="143"Provides an overview of IRIS 
Performer and describes the API of 
IRIS Performer's two main 
libraries: libpfname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'the high-level 
visual simulation library, and 
libprname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'the low-level high-
performance graphics library.LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"IRIS Performer Reference 
PagesLEFT="205" WIDTH="143"Contains the reference pages for all 
the functions in the two primary 
IRIS Performer libraries and the 
adjunct IRIS Performer utilities 
library. LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"IRIS Performer Quick 
ReferenceLEFT="205" WIDTH="143"Lists the function prototype for 
each function in the IRIS Performer 
libraries: libpr, libpf, libpfutil, and 
libpfsgi.LEFT="0" WIDTH="78"IDOLEFT="85" WIDTH="111"IRIS Digital Media 
Programming GuideLEFT="205" WIDTH="143"Describes the API's of the libraries 
that comprise the IRIS Digital 
Media Development Environment. 
This environment includes the 
Audio, Audio File, CD, DAT, 
MIDI, Video, IndigoVideoÔ, 
Compression, and Movie 
Libraries. LEFT="0" WIDTH="78"LEFT="85" WIDTH="111"LEFT="205" WIDTH="143"LEFT="0" WIDTH="78"ImpressarioLEFT="85" WIDTH="111"Impressario Programming 
GuideLEFT="205" WIDTH="143"Describes ImpressarioÔ, which 
provides tools for developers who 
need to print and scan from their 
applications, or who need to write 
printer or scanner drivers.LBL="3"ID="71998"CompilersThis chapter describes the compilers supported by IRIX and the programming language standards adhered to in the implementation of these compilers. Read IDREF="63927" TYPE="TITLE""Creating Executable Files" to learn how to compile and debug programs written in these languages. Refer to IDREF="89503" TYPE="TABLE"Table 2-2 for a list the manuals you can read to learn more about the topics discussed in this chapter.LBL="" HELPID=""C and C++Silicon Graphic provides compilers for both the C and C++ programming languages.The IRIX C compiler conforms to the ANSI C standard as well as "traditional C", the dialect of C defined by Kernigan and Ritchie in ID="03.IRIXLang1"The C Programming Language. Compiler options allow you to compile programs written in "traditional C", pure ANSI C, or ANSI C with Silicon Graphics extensions. ANSI C is part of the IRIS Developer's Option (IDO).The Silicon Graphics implementation of C++ conforms to the standard as defined in ID="03.IRIXLang2"The Annotated C++ Reference Manual by Margaret Ellis and Bjarne Stroustrup.The IRIX operating system supports two versions of the C++ compiler.NCCThis is a 32-bit native compiler that implements all the features of the language described in The Annotated C++ Reference Manual by Margaret Ellis and Bjarne Stroustrup.DCCThis is the Delta/C++ compiler that is available as part of the CASEVision/Workshop Pro C++ package. Delta C++ is an extension to C++. It is a native compiler (not a preprocessor). It supports dynamic classes, which minimizes the need for recompilation if you modify classes.LBL="" HELPID=""Fortran 77Fortran, as implemented on Silicon Graphics IRIS workstations, contains the full ANSI Programming Language Fortran (X3.9-1978). It has extensions that provide full VMS Fortran compatibility to the extent possible without the VMS operating system or data representation. It also contains extensions that provide partial compatibility with programs written in VMS Fortran and Fortran 77.ID="03.IRIXLang3"LBL="" HELPID=""The Parallelizing CompilersIf your application runs on a multiprocessor platform and performance is a critical issue, you may want parts of the program to run concurrently. Two Silicon Graphics compilers, C and Fortran, have preprocessors that analyze source code and produce, where possible, object code that utilizes the multiprocessor environment.LBL="" HELPID=""Power CIRIS Power C allows your program to make efficient use of Silicon Graphics multiprocessor platforms by generating code segments that execute concurrently. Power C consists of the standard C compiler and a preprocessor that automatically analyzes sequential code to determine where loops can run in parallel. The preprocessor generates a modified version of the source code with multiprocessing directives added. The C compiler, when it compiles the modified source code, interprets the directives and produces object code that uses multiple processors. An advantage of Power C is that you can use it to recompile existing serial C programs so that they run efficiently on multiprocessor computers without hand recoding.ID="03.IRIXLang4"The IRIS Power C Analyzer (PCA) is the C code optimization preprocessor that detects potential parallelism in C code. It also performs other optimizing tasks. The Power C Analyzer candirect C code to run in paralleldetermine data dependencies which might prevent code from running concurrentlydistribute well-behaved loops and certain other code across multiprocessorsoptimize source codeYou can use PCA either as a standalone tool or as a phase of the C compiler. You can also enter the directives that produce concurrent code directly into your program rather than using the PCA. IDREF="25126" TYPE="GRAPHIC"Figure 3-1 illustrates the role of the PCA in producing an executable module that can utilize more than one processor on a multiprocessor system.FILE="Fig3.1.ai" POSITION="INLINE" SCALE="FALSE"LBL="3-1"Figure 3-1 ID="25126"Using Power C to Produce a Parallelized ProgramPower C can produce a listing containing information about the loops that it parallelizes and those that it cannot. Using this information, you may be able to modify your source so that a subsequent Power C compilation produces more efficient code. You can select a PCA compilation of your source code by specifying the pca compiler driver option when you compile your program.LBL="" HELPID=""Power Fortran AcceleratorThe Power Fortran Accelerator (PFA) is a source-to-source preprocessor that enables you to run existing Fortran 77 programs efficiently on the Silicon Graphics POWER SeriesID="03.IRIXLang5"Ô multiprocessor systems. PFA analyzes a program and identifies loops that don't contain data dependencies. It is a preprocessor that automatically inserts special compiler directives into a Fortran program to produce a modified copy of the source. The Silicon Graphics Fortran 77 compiler can then interpret these directives to generate code that can run across all available processors. Because the directives inserted by PFA look like standard Fortran 77 comment statements, PFA does not affect the portability of the code to non-Silicon Graphics systems. IDREF="70085" TYPE="GRAPHIC"Figure 3-2 illustrates the role of PFA in producing an executable module that can utilize more than one processor on a multiprocessor system.FILE="Fig3.2.ai" POSITION="INLINE" SCALE="FALSE"LBL="3-2"Figure 3-2 ID="70085"Using PFA to Produce a Parallelized ProgramPFA can, if you request it, produce a listing file explaining which loops were parallelized and if not, why not. You may be able to use this information to modify your application for more efficient use of multiple processors.You can select a PFA compilation of your source code by specifying the pfa compiler driver option when you compile your program.LBL="" HELPID=""PascalThe Pascal language supported by the Silicon Graphics Pascal compiler is an implementation of ANSI Standard Pascal (ANSI/IEEE770X3.97-1983). This implementation complies with ANSI requirements except for some extensions. These extensions include:ID="03.IRIXLang6"namesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'allows underscores in identifiers and use of lowercase for public namesconstantsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'four extensions for constantsstatementname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'seven statement extensionsdeclarationname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'six declaration extensionspredefined proceduresname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'four new procedurespredefined functionsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'20 new functionspredefined data types and predefined data type attributes extensions that affect the compile processLBL="" HELPID=""AdaThe Silicon Graphics AXM (Ada X/Motif) Ada Development System provides an Ada development environment for Silicon Graphics platforms. It consists ofID="03.IRIXLang7"Ada compiler (ANSI/MIL-STD-1815A)X11 and OSF/MotifBindings to the IRIS Graphics LibraryNon-intrusive, symbolic debuggerMP/Ada 6.2 is a multiprocessor Ada development system. It's built using the POSIX-compliant threads model for Ada tasking. If your application runs on a multiprocessor platform, MP/Ada6.2 allows Ada tasks in this application to run concurrently.LBL="4"ID="16042"User Interface ToolsThis chapter describes the user interface libraries and toolkits you can use to create a graphical interface between your application and its users. Refer to IDREF="85233" TYPE="TABLE"Table 2-3 for a list of the manuals you can read to learn more about the topics discussed in this chapter.LBL="" HELPID=""ID="57656"X Window SystemA window system allows a user to run several tasks at the same time and to view and control each of these tasks from a separate window. Silicon Graphics implements the X Window System, a hardware- and operating system-independent windowing system. The X Window System is a portable, network-based windowing system whose portability allows you to create applications that can run on many different workstations. You can compile and execute portable X application code in IRIX without modification. ID="04.IRIXUITools1"The Silicon Graphics native X Window System is based on the X Version 11 Release 6 (X11R6) standard. The IRIX extensions to X includesupport for multiple visualsoverlay windowsthe Display PostScript extensionthe Shape Extension that supports non-rectangular windowsthe X Input Extension that supports devices other than keyboard and mousethe Shared Memory Extensionsimultaneous display on multiple graphics monitorssupport for OpenGL PEX Version 5.1 supports 3D graphicsLBL="" HELPID=""Xlib and Xt The X library, known as ID="04.IRIXUITools2"Xlib, is the C-language programming interface to the X Window System. It is the lowest level programming interface to X. You can use Xlib to build a graphical user interface for your application, although most application developers choose higher level tools.It's difficult to build applications with a graphical user interface that uses a low-level library such as Xlib. The ID="04.IRIXUITools3"Xt Intrinsics library (or simply Xt) simplifies this task by providing a library of C language routines designed to facilitate the interface to Xlib. Xt is a standard established by the X Consortium that provides an object-oriented programming style in the C language. Xt routines can be used to create interface components called widgets. OSF/Motif, for example, uses Xt to create its widget set (see IDREF="33294" TYPE="TITLE""OSF/Motif and IRIS IM").Silicon Graphics implements Xlib and Xt as defined by the standard and supports them as dynamic shared libraries. LBL="" HELPID=""4DwmThe IRIS Extended Motif Window Manager, ID="04.IRIXUITools4"4Dwm, is an X Window System client based on mwm, the Motif Window Manager. In addition to the standard functions found in mwm, 4Dwm provides:support for multiple screenssession management functions that support the Indigo Magic desktopsupport for the desk overview feature of the Indigo Magic desktop, which allows the user to organize windows into related groups called deskscontrol of background images on desks, which switches the screen background automatically when the user switches deskscommunication between the application and 4Dwm using the tellwm programFor more detailed information about mwm and 4Dwm, read the mwm and 4Dmw reference pages. LBL="" HELPID=""User Interface ToolkitsSilicon Graphics provides developers with several user-interface toolkits that simplify the development of a graphical user interface. These toolkits supply a set of objects that appear in graphical form on the screen and allow users to interact with an application by manipulating these objects.ID="04.IRIXUITools5"LBL="" HELPID=""ID="33294"OSF/Motif and IRIS IMThe industry-standard OSF/Motif library provides user-interface objects (called widgets) to be used with Xt. The objects defined by OSF/Motif include menus, scrollbars, dialog boxes, and command buttons.ID="04.IRIXUITools6"IRIS IM is Silicon Graphics' port of OSF/Motif for use on Silicon Graphics IRIS workstations. ID="04.IRIXUITools7"IDREF="52522" TYPE="GRAPHIC"Figure 4-1 shows the relationship of an application to the various user interface libraries you might choose to use.FILE="Fig4.1.ai" POSITION="INLINE" SCALE="FALSE"LBL="4-1"Figure 4-1 ID="52522"Hierarchy of User Interface ToolkitsThe application programming interface (API) to IRIS IM is the same as that for OSF/Motif. However, Silicon Graphics has modified the appearance of some IRIS IM widgets so that they conform to the Silicon Graphics user interface style. You can select either the OSF/Motif or the IRIS IM widget set for use with your application, although using IRIS IM widgets is preferable because their appearance conforms to the Indigo Magic style.In addition to the low-level building blocks such as buttons and scrollbars that IRIS IM provides, it also supplies some related software that isn't part of the standard OSF/Motif. This includes the GLwMDrawingArea widget for IRIS IM programs that use OpenGL to draw to a window within an IRIS IM application. LBL="" HELPID=""IRIS ViewKitIRIS ViewKit is a C++ toolkit that provides user interface facilities for applications. It defines a collection of high-level components that you typically must implement in all applications, for example, components such as windows, menus, and dialogs. IRIS ViewKit components are designed to implement as many commonly used features as possible. To build a user interface component for your application, you can create a subclass of an IRIS ViewKit component and define any application-specific behavior. Also, with ViewKit classes as a base, you can create your own library of reusable components.ID="04.IRIXUITools8"IRIS ViewKit is based on IRIS IM and uses IRIS IM widgets to implement all of its user interface components. You can make IRIS IM and X calls directly from your IRIS ViewKit application, but using ViewKit components directly is simpler and faster than creating your own components from low-level widgets. IDREF="76781" TYPE="GRAPHIC"Figure 4-2 shows the relationship of an application to IRIS ViewKit and the libraries upon which it is built.FILE="Fig4.2.ai" POSITION="INLINE" SCALE="FALSE"LBL="4-2"Figure 4-2 ID="76781"IRIS ViewKit in the Developer EnvironmentAn IRIS ViewKit component is a C++ class that encapsulates sets of widgets and methods for their manipulation. IDREF="61521" TYPE="GRAPHIC"Figure 4-3 shows a graphical representation of a portion of the ViewKit class hierarchy.ID="04.IRIXUITools9"FILE="Fig4.3.ai" POSITION="INLINE" SCALE="FALSE"LBL="4-3"Figure 4-3 ID="61521"A Portion of the IRIS ViewKit Class HierarchyThe functions of some of these IRIS ViewKit base classes are:VkComponentname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'This abstract class defines the basic structure and protocol for all ViewKit components.VkDialog Managername='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'This is the base class for specific dialog classes.VkAppname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'This base class handles application-level tasks such as Xt initialization, event handling, window management, and cursor control.VkSimpleWindowname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'This base class implements a simple top-level window (one that does not require a menu bar).VkMenuname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'This base class provides a standard set of functions for accessing and manipulating menu items.LBL="" HELPID=""ID="56505"Indigo Magic Desktop IntegrationThe Indigo Magic desktop is an end-user environment that provides an icon-oriented interface to the IRIX operating system and filesystem. Users can launch applications and select files using icons instead of typing shell commands and pathnames. Integrating your product into this desktop is an important part of your application. It is much easier for users of your application who are familiar with the desktop to get started if your interface conforms to the Indigo Magic standard.ID="04.IRIXUITools10"LBL="" HELPID=""Learning About Silicon Graphics User Interface Style Silicon Graphics provides user interface style guidelines for developers of software products used on Silicon Graphics workstations. The ID="04.IRIXUITools11"Silicon Graphics User Interface Guidelines describes these style guidelines. Its purpose is to help you create products that are consistent with other applications and that integrate seamlessly into the Indigo Magic desktop environment. The guidelines cover these areas:The design of icons for your application programs and filesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'they should be meaningful and behave appropriately in response to user actions.The appearance of your application's windows and the expected behavior these windows should supportname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'such as when users should be able to size, move, and minimize windows.The individual components of your desktop interface, such as menus, controls, dialogs, and use of color.LBL="" HELPID=""Integrating Your Application Into the DesktopIntegrating your application into the desktop is an important step in creating your product. Since your users are already familiar with the appearance and behavior of applications in the desktop environment, you can simplify their use of your application by conforming to this standard. Here are the steps to follow to integrate your application:ID="04.IRIXUITools12"Achieve the Indigo Magic look and feelCreate desktop icons for your applicationPackage your application for installationLBL="" HELPID=""Achieving the Indigo Magic Look and FeelHere are some of the things you want to consider to achieve the Indigo Magic look and feel:ID="04.IRIXUITools13"Use schemesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Silicon Graphics includes schemes in its implementation of Xt. Schemes allow you to provide default colors and fonts for your application while also ensuring that users can easily select other colors and fonts according to their individual needs and preferences. If you provide default colors, your application will use the same colors and fonts as other applications on the desktop using default colors.Use enhanced widgetsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'IRIS IM provides new and enhanced widgets that are part of the Indigo Magic look and feel. Some of these widgets are the Color Chooser, the Dial, and the Thumbwheel. You can use these widgets by linking to the appropriate library.Provide window, session, and desk management for your applicationname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Most users of Silicon Graphics systems use 4Dwm, which is based on mwm (the Motif window manager).Create minimized windowsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'You can customize the minimized version of your application's window so it's easily recognized when a user clicks the minimize button.LBL="" HELPID=""Creating Desktop IconsWhen you create icons for your application, perform these tasks:ID="04.IRIXUITools14"Draw the iconsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Use IconSmithÔ, a tool for drawing desktop icons.Program the iconname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Define the look and behavior of the icons in your application, for example, the actions to be taken if a user double-clicks an icon.Install the icon in the icon catalogname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Use the iconbookedit command to install your icon in the desktop's Icon Catalog.LBL="" HELPID=""Packaging Your Application for InstallationSilicon Graphics recommends that you use the software packaging tool Software Packager (swpkg) to package your application for installation. This allows your users to easily install your application using Software Manager (ID="04.IRIXUITools15"swmgr), Silicon Graphics software installation program.LBL="5"ID="72381"Software Development Tools After you've written the source code for your application, you typically compile, debug, and link it. You may also want to optimize the performance of the resulting executable code. This chapter describes the tools you can use to perform these tasks. It tells you how you canID="05.IRIXDevTools1"create executable modules from your source programsuse IRIX tools to debug, analyze, and optimize your program use CASEVision programming tools to debug and optimize your programuse CASEVision tools to perform version control and configuration managementRefer to IDREF="28684" TYPE="TABLE"Table 2-4 for a list of the manuals you can read to learn more about the topics discussed in this chapter.LBL="" HELPID=""ID="63927"Creating Executable FilesAn executable file (or executable) is a program that is ready for execution. To create an executable version of your application, compile your source code and link it with the appropriate libraries. This section briefly describes how to create executables.LBL="" HELPID=""Compiler DriversA compiler driver is a program that prepares your application for execution by calling subsystems that compile the source into object code, and then linking together object files, default libraries, and any other libraries you specify. Here are some of the compiler drivers Silicon Graphics provides and the programming language each supports:ID="05.IRIXDevTools2"COLUMNS="2"LEFT="0" WIDTH="96"Compiler Driver NameLEFT="105" WIDTH="92"Source LanguageLEFT="0" WIDTH="96"f77LEFT="105" WIDTH="92"Fortran LEFT="0" WIDTH="96"ccLEFT="105" WIDTH="92"CLEFT="0" WIDTH="96"pcLEFT="105" WIDTH="92"PascalLEFT="0" WIDTH="96"CCLEFT="105" WIDTH="92"C++When you invoke a compiler driver, specify the name of one or more source files and, optionally, one or more of the compiler driver options. The compiler drivers share a common set of options, although a few options are unique to a single driver or have different meanings for each driver. For example, the ­c option suppresses the linker step for all drivers, while the   ­C option has one meaning for C and another for Pascal and Fortran. You can use compiler driver options to control these functions:program compilationprogram linkingproduction of profiling information for performance tuning (see IDREF="39466" TYPE="TITLE""Performance Tuning Tools")Read the MIPS Compiling and  Performance Tuning Guide for more information about compiler drivers. The reference page for each driver contains detailed information about command options for that driver.LBL="" HELPID=""Object Files and Dynamic LinkingObject files generated by Silicon Graphics compilers are in the Executable and Linking Format (ELF). ELF is the format specified by the System V Release 4 Applications Binary Interface (SVR4 ABI).ID="05.IRIXDevTools3"ID="05.IRIXDevTools4"ELF provides support for dynamic shared objects (DSOs). A DSO is an object file that's shared by multiple applications as they are executing. The object code of a DSO is position-independent and can be mapped into the virtual address of several processes. DSOs are loaded at runtime (instead of at linking time) by the runtime loader, ID="05.IRIXDevTools5"ID="05.IRIXDevTools6"rld. DSOs replace the static shared libraries provided with releases of IRIX prior to IRIX 5.0. You can, and generally should, use them in place of archive libraries. Using DSOs with your application provides you with several benefits. These include the following:Overall memory usage is minimized because code is shared. Executables linked with DSOs are smaller (and take less disk space) than those linked with unshared libraries because the shared objects are not part of the executable file image.Executables containing DSOs don't have to be relinked if the DSO changes.DSOs are easier to use and build than the static shared libraries available in releases of IRIX prior to IRIX 5.0.Most libraries supplied by Silicon Graphics are available as DSOs. When you invoke a compiler driver to build an executable file from your source program, the driver links to DSOs unless you specify otherwise.You can build your own DSOs if you have the IRIS Developer's Option installed on your system. You don't have to make any changes to your source code to make it part of a DSO. Just use ld with the ­shared option to build the DSO.LBL="" HELPID=""ID="94938"IRIX Tools for Debugging and Tuning Your ProgramIRIX provides a number of standard UNIX tools to aid you in debugging and tuning the performance of your program. It also provides performance tools developed at Silicon Graphics. ID="05.IRIXDevTools7"LBL="" HELPID=""Debugging ToolIRIX provides ID="05.IRIXDevTools8"dbx, a source level debugger that allows you to debug C, C++, Fortran 77, Pascal, and assembler code. You can execute a program under dbx control toexamine source codeexamine and change datacontrol program executiondebug machine language codedebug multiple processes. You can also use dbx to examine a core file, if a program crash occurs, to determine the point at which the crash occurred.To use dbxcompile the source using an appropriate compiler driver option, usually ­g. This produces an executable containing symbol table information that is used by dbx during program execution.execute the program under dbx control. LBL="" HELPID=""Tools for Object File Query and ManipulationObject files generated by Silicon Graphics compilers are in the Executable and Linking Format (ELF), the format specified by the SVR4 ABI. IRIX provides several tools to query and manipulate object files:ID="05.IRIXDevTools9"ID="05.IRIXDevTools10"disID="05.IRIXDevTools11"Dissembles an object file into machine instructions.elfdumpID="05.IRIXDevTools12"Lists the contents of an ELF-format object file.fileID="05.IRIXDevTools13"Provides descriptive information on the properties of a file.nmID="05.IRIXDevTools14"Lists symbol table information.sizeID="05.IRIXDevTools15"Prints the size of each section of an object file.stripID="05.IRIXDevTools16"Removes symbol table and relocation bits from an object file, which saves space after you've debugged your program.LBL="" HELPID=""ID="39466"Performance Tuning ToolsIRIX provides several tools that you can use to optimize the performance of your application. ID="05.IRIXDevTools17"ID="05.IRIXDevTools18"IDREF="60994" TYPE="TABLE"Table 5-1 summarizes these tools and the paragraphs following the table describe each tool in greater detail.COLUMNS="2"LBL="5-1"Table 5-1 ID="60994"Summary of Performance Tuning ToolsLEFT="0" WIDTH="65"Name of ToolLEFT="70" WIDTH="269"FunctionLEFT="0" WIDTH="65"profLEFT="70" WIDTH="269"Measures the amount of time spent in various parts of a programname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'
used in conjunction with the ­p compiler driver option.LEFT="0" WIDTH="65"pixieLEFT="70" WIDTH="269"Counts the number of times basic blocks in a program are 
executedname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'used in conjunction with the prof program.LEFT="0" WIDTH="65"parLEFT="70" WIDTH="269"Traces system calls and scheduling activity.LEFT="0" WIDTH="65"cordLEFT="70" WIDTH="269"Rearranges procedures in your program to reduce paging and 
reduce instruction cache mapping.LEFT="0" WIDTH="65"xscopeLEFT="70" WIDTH="269"Monitors connections between an X server and a client.LBL="" HELPID=""Using prof and pixieYou can use the profiling tools ID="05.IRIXDevTools19"prof and pixieID="05.IRIXDevTools20" to find areas of your program where most of the execution time is spent. With this information, you can concentrate your effort on improving code efficiency in these parts of the program. The profiling tools provide two kinds of information:Program counter (pc) sampling, which measures the amount of execution time spent in various parts of a program. It does this by interrupting program execution every 10 milliseconds and recording the value of the program counter.Basic-block counting, which counts the number of times each basic block executes. A basic block is a region of the program that can be entered only at the beginning and exited only at the end.To obtain pc sampling data, specify the ­p compiler driver option when you prepare your program for execution. A program prepared using this option produces pc sampling data during program execution. To view the pc sampling data, run the prof program. prof analyzes the data files generated during program execution and produces a formatted listing.IDREF="46875" TYPE="GRAPHIC"Figure 5-1 shows the steps necessary to get pc sampling information.FILE="Fig5.1.ai" POSITION="INLINE" SCALE="FALSE"LBL="5-1"Figure 5-1 ID="46875"Using prof to Obtain pc Sampling InformationTo obtain block counting information, use the pixie program. pixie reads an executable program, partitions it into basic blocks, and writes (instruments) an equivalent program containing additional code that counts the execution of each basic block. You can execute this instrumented program to obtain a file containing basic block counts. To obtain a formatted listing of the block count information, run the prof program using the ­pixie option. IDREF="53673" TYPE="GRAPHIC"Figure 5-2 shows how you can obtain basic block counts for your program.FILE="Fig5.2.ai" POSITION="INLINE" SCALE="FALSE"LBL="5-2"Figure 5-2 ID="53673"Using pixie to Collect Basic Block CountsLBL="" HELPID=""parThe parID="05.IRIXDevTools21" system utility program traces system calls and scheduling activity. You can use it to trace the activity of a single process, a related group of processes, or the system as a whole. par prints a report showing all system calls made by the specified processes, along with arguments and return values.LBL="" HELPID=""cordThe ID="05.IRIXDevTools22"cord program rearranges procedures in an executable object to reduce paging and achieve better instruction cache mapping. Typically, the order specified either minimizes paging or maximizes the likelihood that data items are in cache when needed. IDREF="27506" TYPE="GRAPHIC"Figure 5-3 shows how you can use cord to rearrange the procedures in your program.FILE="Fig5.3.ai" POSITION="INLINE" SCALE="FALSE"LBL="5-3"Figure 5-3 ID="27506"Using cord to Rearrange ProceduresLBL="" HELPID=""xscopeThe ID="05.IRIXDevTools23"xscope program monitors connections between an X server and a client. It prints the contents of each request, reply, error, or event that is communicated between the server and client. This information can be useful in debugging and performance tuning of X servers and clients.LBL="" HELPID=""The CASEVision Programming ToolsSilicon Graphics provides several interactive, graphical programming tools to aid you in debugging and tuning your application. These computer-aided software engineering (CASE) tools, which comprise the CASEVision product line, operate in a common environment that provides a consistent user interface. ID="05.IRIXDevTools24"IDREF="64581" TYPE="TITLE""The CASEVision Environment" describes this environment.The CASEVision tools include:IDREF="92591" TYPE="TEXT"CASEVision/WorkShopIDREF="53358" TYPE="TEXT"CASEVision/WorkShop MegaDevIDREF="54491" TYPE="TEXT"CASEVision/WorkShop Pro MPFNoteThe CASEVision/WorkShop tools are not part of IDOname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'you have to order them separately.LBL="" HELPID=""ID="64581"The CASEVision EnvironmentAll tools in the CASEVision product line share a common environment. Some common facilities and features of this environment are: CASEVision tools use standard IRIS IM elements such as the File Browser (used to save and load files) and offer easily set X defaults.The CASEVision environment offers a comprehensive online help system with context-sensitive access. All CASEVision tools provide access to source code through a common text editor called Source View. Source View provides a window displaying lines of text in a source code file and offers simple text editing features and the ability to fork other text editors such as vi or emacs.Many CASEVision tools provide graphical representations of code, such as function call trees or class hierarchies. These have common features for manipulating the presentation so that you can focus on the data of specific interest or get a larger overview.LBL="" HELPID=""ID="92591"CASEVision/WorkShopCASEVision/Workshop is a software development environment that helps you visualize your code. It's a set of tools that use an object-oriented application framework and an IRIS IM interface with user-selectable color schemes. The WorkShop toolset includes five graphical tools: ID="05.IRIXDevTools25"Debugger Static Analyzer Performance Analyzer TesterBuild ManagerIDREF="24832" TYPE="GRAPHIC"Figure 5-4 gives you an example of what an interface to a CASEVision tool looks like. This example, output from the Performance Analyzer, shows the total time spent in several routines, and the time each routine actually executed, exclusive of the time spent in called routines.FILE="perfanalyzer.bw" POSITION="INLINE" SCALE="FALSE"LBL="5-4"Figure 5-4 ID="24832"An Example of a CASEVision User InterfaceLBL="" HELPID=""The WorkShop DebuggerThe WorkShop Debugger is a source-level debugging tool that provides special windows (views) for displaying program data and execution status as the program executes. The Debugger lets you set various types of traps (breakpoints) and watch points. ID="05.IRIXDevTools26"LBL="" HELPID=""The WorkShop Static AnalyzerThe WorkShop Static Analyzer helps you analyze source code written in C, C++, or Fortran by showing you the code's structure (graphically or in text format). It also shows you how the functions within programs call one another, where and how variables are defined, how files depend on one another, where you can find macros, and many other structural details that help you understand the code. ID="05.IRIXDevTools27"LBL="" HELPID=""The Performance AnalyzerYou can use the Performance Analyzer to define and run experiments that collect performance data. The Performance Analyzer uses this data to produce charts, tables, and annotated code that help you analyze the performance of your program.ID="05.IRIXDevTools28"LBL="" HELPID=""WorkShop Tester WorkShop Tester is a software quality assurance toolset for software and test engineers and their managers who are involved in the development, test, and maintenance of long-lived software projects.ID="05.IRIXDevTools29"LBL="" HELPID=""WorkShop/Build ManagerYou can use the WorkShop/Build Manager to compile software without leaving the WorkShop environment. You can look for problems using the WorkShop analysis tools (Static Analyzer, Debugger, and Performance Analyzer), make changes to the source, suspend your testing, and then recompile. The Build Manager has two components:ID="05.IRIXDevTools30"Build Viewname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'for compiling, viewing compile error lists, and accessing the code containing the errors in Source View (the CASEVision editor) or an editor of your choice. Build View helps you find files containing compile errors so that you can quickly fix them, recompile, and resume testing. Build Analyzername='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'for viewing build dependencies and recompilation requirements and accessing source files.Build View uses the UNIX make facility as its default build software. Although Build Analyzer determines dependencies using make, you can use the build software of your choice.LBL="" HELPID=""ID="53358"CASEVision/WorkShop MegaDevCASEVision/WorkShop MegaDev is a suite of graphical, interactive computer-aided software engineering (CASE) tools designed especially for programmers developing and maintaining C++ libraries and applications.ID="05.IRIXDevTools31"It contains the C++ Browser and the Fix and Continue utilities. The C++ Browser lets you view the structure of any set of C++ classes. It provides a global, graphical view of interclass relationships such as inheritance, containment, and interaction within a set of classes. The Fix and Continue utilities allow you to redefine functions in your program and then continue execution without recompiling.LBL="" HELPID=""ID="54491"CASEVision/WorkShop Pro MPFFortran 77 programmers can use the WorkShop Pro MPF Parallel Analyzer View to view the structure of multiprocessing applications. This tool reads analysis files generated by the Power Fortran Accelerator (PFA) and provides a visual comparison of the original source with the parallelized code.ID="05.IRIXDevTools32"The function of the Parallel Analyzer View's is integrated with that of CASEVision/WorkShop to allow examination of a program's loops in conjunction with a performance experiment on either a uni- or multiprocessor execution of the program.LBL="" HELPID=""Version Control and Configuration ManagementCASEVision provides a tool for creating tracking systems and another for software configuration management.ID="05.IRIXDevTools33"LBL="" HELPID=""CASEVision/TrackerCASEVision/Tracker is a tool for creating tracking systems for bugs and enhancement requests. It allows you to design and create the tracking database and the interface programs. ID="05.IRIXDevTools34"The Request Tracking System (RTS) was designed using the CASEVision/Tracker tool. RTS is a system for tracking bugs and requests for enhancements. RTS is designed to: meet the basic request tracking needs of most software organizations with only minor modificationserve as a functioning starter example of a Tracker-based system for those organizations that want to create their own systemsLBL="" HELPID=""CASEVision/ClearCaseCASEVision/ClearCase is a software configuration management system that's specifically designed for large-scale, long-lived software projects. ClearCase simultaneously manages multiple versions of evolving software and tracks versions used in software builds. It performs builds and rebuilds of individual programs or entire releases according to user-defined specifications, and enforces project-defined policies.ID="05.IRIXDevTools35"ClearCase provides enhanced version control of all UNIX (or IRIX) filesystem objects, binary sharing to minimize rebuilds and unnecessary copies or links, and complete build auditing. It also supports parallel builds across the network. LBL="6"ID="80680"Application LibrariesSilicon Graphics provides several application libraries that you can use in writing your applications. These libraries provide tools for developing programs in the following areas:ID="06.IRIXLibraries1"GraphicsImage processingDigital media Printer/scanner managementRefer to IDREF="35359" TYPE="TABLE"Table 2-5 for a list of the manuals you can read to learn more about the topics discussed in this chapter.LBL="" HELPID=""ID="23546"Graphics LibrariesSilicon Graphics supports four graphics libraries. OpenGL provides low-level graphics routines and is an interface to the graphics hardware. Open Inventor is a toolkit, built on OpenGL, that allows you to create interactive graphics applications.IRIS Graphics Library is a library of subroutines for creating 2D and 3D color graphics and animation.IRIS Performer is a toolkit for creating real-time graphics and visual simulation applications.LBL="" HELPID=""ID="64332"OpenGLOpenGL is a software interface to graphics hardware. It consists of about 120 commands that you can use to specify the objects and operations needed to create interactive programs that produce color images of moving 3D objects. OpenGL is an industry standard for 2D and 3D graphics rendering and is a part of the IDO. ID="06.IRIXLibraries2"OpenGL uses a client-server model for interpretation of commands. An application using OpenGL can run under IRIX on any Silicon Graphics platform and be rendered on a platform with another operating system and window system, provided the implementation of OpenGL on each platform conforms to the standard.OpenGL doesn't include commands for performing windowing tasks or obtaining user input. For that you must work through the windowing system that controls your hardware. Since the OpenGL application programming interface (API) is independent of hardware platforms, window systems, and operating systems, porting among conforming implementations of OpenGL is an easy task.OpenGL allows you to build the models you need from a small set of geometric primitivesname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'points, lines, and polygons. It doesn't provide high-level commands for describing models of 3D objectsname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'Silicon Graphics provides higher level graphics libraries for these tasks. One of these libraries is Open Inventor, which is built on OpenGL and uses OpenGL calls for rendering. You can write your application using the OpenGL API, although it's often easier to use one of the higher level libraries. Using the higher level graphics libraries makes rendering operations transparent to your application, which allows you to concentrate on your application rather than on the time-consuming details of rendering.NoteIRIS Performer and the ImageVision Library are being converted from IRIS GL (the precursor to OpenGL) to the OpenGL standard.The OpenGL library contains functions forrendering primitives (points, lines, polygons)controlling colors and lightingusing texture mapping to add surface characteristics to geometrysetting and controlling transformationsIDREF="94811" TYPE="TEXT"IDREF="94811" TYPE="GRAPHIC"Figure 6-1 shows an object created by OpenGLname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'a sphere illuminated by a light source. FILE="lightmap.bw" POSITION="INLINE" SCALE="FALSE"LBL="6-1"Figure 6-1 ID="94811"Using the Lighting Feature of OpenGLIDREF="36420" TYPE="GRAPHIC"Figure 6-2 shows another object created by OpenGLname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'a texture-mapped Bezier surface mesh.FILE="texturesurf.bw" POSITION="INLINE" SCALE="FALSE"LBL="6-2"Figure 6-2 ID="36420"Using the Texture-Mapping Feature of OpenGL OpenGL provides a small but powerful set of rendering commands, and all higher-level drawing must be done using these commands. To simplify your programming tasks, OpenGL provides a Utility Library (GLU) that includes routines that encapsulate OpenGL commands. These GLU routines perform tasks such as:drawing common objects such as spheres, cylinders, and disksmanipulating images used in texturinghandling simple non-convex polygonssetting up matrices for a variety of viewing orientations and projectionsLBL="" HELPID=""Open InventorOpen Inventor is an object-oriented toolkit that provides objects and methods for creating interactive 3D graphics applications. This toolkit contains 3D objects you can use to represent your 3D physical models, as well as objects that allow you to interactively operate on these models.ID="06.IRIXLibraries3"IDREF="10336" TYPE="GRAPHIC"Figure 6-3 shows a single scene from a racing game created using Open Inventor. In this game, mouse buttons control the speed and position of a car as it moves along a track. Open Inventor creates scenes showing the car, the track, and the terrain that appears as the car moves along the track.FILE="smallercars.bw" POSITION="INLINE" SCALE="FALSE"LBL="6-3"Figure 6-3 ID="10336"A Scene Created by Open Inventor Open Inventor is written in C++ but also includes C bindings. It is object-oriented and extensible. The Inventor toolkit is based on OpenGL and provides a library of objects you can use, modify, and extend to meet your needs.IDREF="30252" TYPE="GRAPHIC"Figure 6-4 illustrates the architecture of an Open Inventor application. The Open Inventor components shown in the figure are described in the paragraphs following the figure.FILE="Fig6.3.ai" POSITION="INLINE" SCALE="FALSE"LBL="6-4"Figure 6-4 ID="30252"Open Inventor ArchitectureLBL="" HELPID=""Open Inventor ToolkitThe Open Inventor Toolkit provides three programming tools that you can use in your Open Inventor application.ID="06.IRIXLibraries4"Scene databaseA scene database is a collection of 3D objects and properties arranged to represent a 3D scene. A scene is composed of nodes that define all information about an objectname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'its shape, size, coloring, surface texture, and location in 3D space. You can use this information to render the object or to vary it in a variety of waysname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'for example, to move the object or change the way it looks. Some objects, called engines, are used to animate part of a scene.ManipulatorsA manipulator is a special kind of node that reacts to user events.   Manipulator objects allow users to interact with 3D objects on a screen. Manipulators allow rendering into a scene and provide a means for translating user-initiated events into changes to the scene database.Node kitsA node kit is a collection of nodes grouped together to provide a simplified model. Open Inventor provides these ready-made kits to make building a structured scene database easier. The kit provides the basic structure of an object, but allows you to define information specific to your object. For example, the shape node kit describes the shape but allows you to define a geometric specification, material, a lighting model, texture, and other properties of the shape.LBL="" HELPID=""Component LibraryThe Component Library is a convenience library for programmers who use X Window System and X-based toolkits such as Xt and Motif. It contains an event translator that converts X events into Open Inventor events.ID="06.IRIXLibraries5"LBL="" HELPID=""3D Interchange File FormatOpen Inventor includes an interchange file format for exchanging 3D objects and scenes between applications. Objects in the scene database can be written to a file during the execution of your program, in either ASCII or binary form. LBL="" HELPID=""IRIS Graphics LibraryThe IRIS Graphics Library (IRIS GL) is a library of subroutines for creating 2D and 3D color graphics and animation. ID="06.IRIXLibraries6"Here are some of the things IRIS GL allows you to do:draw graphics primitives such as points, lines, polygonsdraw characters and define fontsuse color modes and color maps to control the way colors are displayed use double buffering to create animated graphicsperform coordinate transformationsdefine and manipulate light sources to create lighted scenesuse texture mapping to add surface characteristics to geometryIRIS GL is a predecessor of OpenGL, the industry standard for graphics applications. Silicon Graphics' application libraries that were originally built on IRIS GL are moving to the OpenGL standard. IDREF="13205" TYPE="GRAPHIC"Figure 6-5 shows relationship of an application to IRIX GL and to the ImageVision Library and IRIS Performer, the libraries currently built on IRIS GL.FILE="Fig6.4.ai" POSITION="INLINE" SCALE="FALSE"LBL="6-5"Figure 6-5 ID="13205"IRIS GL in the Developer EnvironmentNoteYou should never reference both IRIS GL and OpenGL in a single application. This means you should not use a higher-level library based on OpenGL (for example, Open Inventor) in the same application in which you use a library based on IRIS GL (for example, the ImageVision Library).LBL="" HELPID=""IRIS PerformerIRIS Performer is a software development environment layered above the IRIS Graphics Library (IRIS GL). It provides high-level support for visual simulation, interactive entertainment, virtual reality, and graphics-intensive tasks. Applications that require real-time visuals and high-performance rendering benefit from using IRIS Performer.ID="06.IRIXLibraries7"The main components of IRIS Performer are the two libraries libpr and libpf.libprID="06.IRIXLibraries8" is a low-level library that provides optimized rendering functions, state control, and other functions that are fundamental to real-time graphics. It provides highly optimized rendering loops for rendering a wide variety of geometric primitives.libpfID="06.IRIXLibraries9" is a visual simulation development environment that layers a multiprocessing database traversal and rendering system on libpr. It supports multiprocessing, hierarchical scene construction, multiple channels, culling to each channel's field-of-view, and frame-rate control.IDREF="82517" TYPE="GRAPHIC"Figure 6-6 shows the relationship between the IRIS Performer libraries and the IRIX system software.FILE="Fig6.5.ai" POSITION="INLINE" SCALE="FALSE"LBL="6-6"Figure 6-6 ID="82517"IRIS Performer Library HierarchyYou can choose the IRIS Performer libraries that best suit your needs. You may want to build your own toolkits on top of libpr, the low-level, high-performance library, or you may choose to take advantage of the visual simulation environment that libpf provides. Note that functions from libpf make calls to libpr functions so you don't necessarily have to use the libpr functions directly.IRIS Performer doesn't define a file format; it imports files from many standard database formats at run time. Some of the database formats supported by IRIS Performer are shown in IDREF="30750" TYPE="TABLE"Table 6-1. COLUMNS="2"LBL="6-1"Table 6-1 ID="30750"Database Formats Supported by PerformerLEFT="0" WIDTH="72"Format NameLEFT="80" WIDTH="166"DescriptionLEFT="0" WIDTH="72"BINLEFT="80" WIDTH="166"Silicon Graphics formatLEFT="0" WIDTH="72"DWBLEFT="80" WIDTH="166"Designer's Workbench formatLEFT="0" WIDTH="72"DXFLEFT="80" WIDTH="166"AutoCADÒ formatLEFT="0" WIDTH="72"FLTLEFT="80" WIDTH="166"MultiGenÔ FLIGHT formatLEFT="0" WIDTH="72"IVLEFT="80" WIDTH="166"Inventor formatLEFT="0" WIDTH="72"OBJLEFT="80" WIDTH="166"Wavefront Technologies Model formatLBL="" HELPID=""ID="56720"ImageVision LibraryUnlike the graphics libraries, which build a display from a series of geometric objects, image processing applications start with an image consisting of pixel information stored in a file. These images can originate as a photographic image that's scanned or obtained from a KodakID="06.IRIXLibraries10"Ô CD, data obtained from medical imaging equipment, satellite data, or numerous other sources. An image processing application can manipulate this image in ways that are meaningful to the user of the application.The ImageVision Library (IL) is a set of tools designed for developers of image processing applications. The IL is written in C++ but has interfaces for C and Fortran. You can use this library to import, manipulate, display, and store images. The IL is an object-oriented toolkit whose modularity provides an easy and efficient means to create and maintain programs that use it for image manipulation and display. This modular structure also makes it easy to extend the ILname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]'for example, to augment the image operators supplied by the IL or to design new ones.The ImageVision Library contains objects and methods that allow an image processing application to:Import images created in a variety of different file types. The supported file formats include TIFF, GIF, Kodak Photo CDÔ, SGI, and FIT.Process images using any sequence of the image processing operators supported by the IL. Image processing functions include color conversion, arithmetic operations on pixel data, radiometric and geometric transformations, generation of statistical data for an image, spatial and non-spatial domain transformations, and edge, line, and spot detection.Display one or more images in an X Window. The IL provides many ways to control image displays, including stacking images or aligning them side by side, roaming a large image, or doing a wipe to move one edge of an image to reveal what is stacked beneath it.Store processed images on disk.The following figures illustrate an ImageVision Library operation. IDREF="42621" TYPE="GRAPHIC"Figure 6-7 shows an image imported from a Kodak Photo CD.FILE="smalpelican.bw" POSITION="INLINE" SCALE="FALSE"LBL="6-7"Figure 6-7 ID="42621"A Display Created by ImageVision LibraryIDREF="93240" TYPE="GRAPHIC"Figure 6-8 shows the image created when the ImageVision library performs a geometric transformation called a warp on the image in IDREF="42621" TYPE="GRAPHIC"Figure 6-7.FILE="smalPelWarp.bw" POSITION="INLINE" SCALE="FALSE"LBL="6-8"Figure 6-8 ID="93240"Using the ImageVision Library to Transform an ImageIDREF="51971" TYPE="GRAPHIC"Figure 6-9 illustrates a simple ImageVision application that reads an image from disk, applies a rotation transformation, displays both images on a monitor, and writes the rotated image to disk.FILE="Fig6.7.ai" POSITION="INLINE" SCALE="FALSE"LBL="6-9"Figure 6-9 ID="51971"A Simple ImageVision Library ApplicationThe ImageVision Library toolkit provides an application program interface (API) that is common across all Silicon Graphics workstations. The IL uses Xlib for  window management and allows you to use either IRIS GL or X to render into an X window.IDREF="61696" TYPE="GRAPHIC"Figure 6-10 shows the architecture of an IL application. FILE="Fig6.8.ai" POSITION="INLINE" SCALE="FALSE"LBL="6-10"Figure 6-10 Architecture of an ID="61696"ImageVision Library ApplicationThe IL implements an execution model that optimizes memory usage and performance as image data is processed. This execution modelsupports the parallel processing features of Silicon Graphics workstationscaches image data to minimize file accessis demand-driven so that only image data needed for output is processedchains operations together, which saves time because intermediate results don't have to be stored uses hardware acceleration of graphics operations whenever possible to improve performance of IL operationsLBL="" HELPID=""IRIS Digital Media Development EnvironmentThe IRIS Digital Media Development Environment provides digital media libraries and tools for developers of media applications. LBL="" HELPID=""IRIS Digital Media LibrariesThe IRIS Digital Media Libraries provide programming support for digital media development on Silicon Graphics platforms. These libraries are included with the IDO. The term ID="06.IRIXLibraries11"digital media describes digitally sampled audio and video (including still image) data, MIDI event streams, and other associated information such as time codes. Sampled audio/video data can be digitally encoded in a variety of uncompressed and compressed formatsThe IRIS Digital Media Development Environment provides programming support for digital audio, digital video, and MIDI applications. The libraries provide programming interfaces to:audio, video, and MIDI I/O subsystemsdata format conversion (including compression)digital media file importation/exportationhigh-level playback functionsThe five libraries that comprise the IRIS Digital Media Development Environment are briefly described in the following paragraphs.LBL="" HELPID=""Digital Audio LibrariesThe digital audio libraries provide a device-independent programming interface to the digital audio I/O subsystems built into Silicon Graphics workstations. You can use the digital audio libraries individually or in combination. IDREF="54521" TYPE="TABLE"Table 6-2 describes the libraries contained in the digital audio library set.COLUMNS="2"LBL="6-2"Table 6-2 ID="54521"Digital Audio LibrariesLEFT="0" WIDTH="63"LibraryLEFT="70" WIDTH="270"Library FunctionLEFT="0" WIDTH="63"AudioID="06.IRIXLibraries12"LEFT="70" WIDTH="270"Provides an interface for configuring the audio system, 
managing audio I/O between the application program and 
audio hardware, specifying attributes of digital audio data, 
and facilitating real-time programming.LEFT="0" WIDTH="63"Audio FileID="06.IRIXLibraries13"LEFT="70" WIDTH="270"Provides an interface for reading and writing the standard 
digital audio file formats AIFF and AIFF-C standards.LEFT="0" WIDTH="63"CD AudioID="06.IRIXLibraries14"LEFT="70" WIDTH="270"Provides an interface for optional Silicon Graphics SCSI CD-
ROM drives. This interface features a special mode that 
allows it to read audio CD format as well as CD-ROM 
format.LEFT="0" WIDTH="63"DAT AudioID="06.IRIXLibraries15"LEFT="70" WIDTH="270"Provides an interface for optional Silicon Graphics SCSI DAT 
drives.IDREF="32038" TYPE="GRAPHIC"Figure 6-11 diagrams the interaction between an audio application and the audio libraries, the device drivers, the IRIX filesystem, the audio hardware, and the optional SCSI devices.FILE="Fig6.9.ai" POSITION="INLINE" SCALE="FALSE"LBL="6-11"Figure 6-11 ID="32038"Interaction of Digital Audio System ComponentsLBL="" HELPID=""MIDI libraryThe Musical Instrument Digital Interface (MIDI) Library provides a programming interface for timestamped MIDI input/output via serial ports.ID="06.IRIXLibraries16"LBL="" HELPID=""Video LibraryThe Video Library provides both device-independent and device-dependent interfaces to the on-board Indy VINO, and to video options such as Indy VideoID="06.IRIXLibraries17"Ô, Galileo VideoÔ, Indigo2 VideoÔ, and Sirius VideoÔ.LBL="" HELPID=""Compression LibraryThe Compression Library (CL) provides an algorithm-independent, extensible interface for compressing and decompressing animation, video, audio, and image data. The CL interface supports the Cosmo Compress JPEG codec (available for Indigo R4000, Indy, Indigo 2) in addition to several software codecs, including software JPEG. Cosmo Compress connects to a Galileo-family video device to allow realtime JPEG video capture and playback. In this configuration, Cosmo operates as a component of the video I/O system.ID="06.IRIXLibraries18"LBL="" HELPID=""Movie LibraryThe Movie Library is a collection of routines that provides a C language API for creating, reading, writing, editing, and playing movie files. Supported file formats include Silicon Graphics Movie File (SGIMF) format and the AppleÒ QuickTimeID="06.IRIXLibraries19"Ô movie file format.LBL="" HELPID=""Digital Media ToolsIRIX includes several interactive media tools that are built on the IRIS Digital Media Development Environment and make it easy to perform basic media functions. These tools have command-line interfaces that allow you to incorporate them into your digital media application. IDREF="66231" TYPE="TABLE"Table 6-3 lists the digital media tools.ID="06.IRIXLibraries20"COLUMNS="2"LBL="6-3"Table 6-3 ID="66231"Digital Media ToolsLEFT="0" WIDTH="90"ToolLEFT="95" WIDTH="242"Tool FunctionLEFT="0" WIDTH="90"CaptureID="06.IRIXLibraries21"LEFT="95" WIDTH="242"Record audio, video input, audio, and still images on your 
system disk and import them into multimedia applications.LEFT="0" WIDTH="90"Movie MakerID="06.IRIXLibraries22"LEFT="95" WIDTH="242"Combine audio, video, and still images to create a movie 
you can play on your workstation.LEFT="0" WIDTH="90"Movie PlayerID="06.IRIXLibraries23"LEFT="95" WIDTH="242"Play movies on your workstation using controls that allow 
you to play, stop, reverse, and fast forward.LEFT="0" WIDTH="90"Sound EditorID="06.IRIXLibraries24"LEFT="95" WIDTH="242"Record sound into and edit audio files.LEFT="0" WIDTH="90"Sound FilerID="06.IRIXLibraries25"LEFT="95" WIDTH="242"Play audio files on your system and convert audio files to 
different formats and sizes.LEFT="0" WIDTH="90"CD ManagerID="06.IRIXLibraries26"LEFT="95" WIDTH="242"Play and record from a compact disc drive attached to your 
workstation SCSI port.LEFT="0" WIDTH="90"DAT ManagerID="06.IRIXLibraries27"LEFT="95" WIDTH="242" Play and record to and from DAT tapes on a DAT drive 
attached to your workstation SCSI portRead the Media Tools User's Guide, available in IRIS Insight, or the reference page for each tool to learn more about these media tools.LBL="" HELPID=""Printer/Scanner ManagementSilicon Graphics provides a printing and scanning environment for IRIS workstations. This environment, Impressario, has features for a wide range of IRIX audiences: printer and scanner driver developers, application program developers, and end users. Impressario allows files of different types to be printed on a wide variety of printers and allows images to be scanned from a scanning device, an IRIS screen, or a Silicon Graphics image file.ID="06.IRIXLibraries28"ID="06.IRIXLibraries29"Impressario provides the following libraries for application developers:libspool Provides an API to the IRIX printer spooling system and functions, allowing you to submit print jobs, query their status, and so on.libprintui Provides a graphical interface for printing that's compatible with IRIS IM.libpod Provides a network-transparent interface to the Printer Object Database (POD). Each printer has a POD that contains configuration, status, and other information about that printer.libscan Provides an interface to the Impressario scanning system.libstiff Allows you to read and write Stream TIFF (STIFF) files.libimp Allows you to read and write Silicon Graphics image files in RGB format.Impressario is built on top of the System V print spooling system. It provides model files, filters, and drivers to convert ISO text files, SGI images files, PostScript® documents, and a wide variety of other file formats to a format suitable for both raster and PostsScript printers. IDREF="67792" TYPE="GRAPHIC"Figure 6-12 shows the relationship between an application program, the Impressario libraries, and the spooling system in IRIX.FILE="Fig6.10.ai" POSITION="INLINE" SCALE="FALSE"LBL="6-12"Figure 6-12 ID="67792"Interface to the Spooling SystemRefer to the Impressario Programming Guide for information about writing a driver for a printer or scanner device for which no driver is available.Ada compilerIDREF="03.IRIXLang7"Adaapplicationcreating icons forIDREF="04.IRIXUITools14"Creating Desktop Iconsintegrating into desktopIDREF="04.IRIXUITools12"Integrating Your Application Into the Desktoppackaging for installationIDREF="04.IRIXUITools15"Packaging Your Application for InstallationwritingIDREF="01.IRIXOS19"Writing an Application Programapplication librariesIDREF="06.IRIXLibraries1"Application Librariesaudio file libraryIDREF="06.IRIXLibraries13"Digital Audio Librariesaudio libraryIDREF="06.IRIXLibraries12"Digital Audio LibrariesBerkeley Software Distribution (BSD)  IPCIDREF="01.IRIXOS6"NetworkingCapture toolIDREF="06.IRIXLibraries21"Digital Media ToolsCASEVisionClearCaseIDREF="05.IRIXDevTools35"CASEVision/ClearCaseprogramming toolsIDREF="05.IRIXDevTools24"The CASEVision Programming ToolsTrackerIDREF="05.IRIXDevTools34"CASEVision/TrackerCASEVision/WorkShopIDREF="05.IRIXDevTools25"CASEVision/WorkShopBuild ManagerIDREF="05.IRIXDevTools30"WorkShop/Build ManagerDebuggerIDREF="05.IRIXDevTools26"The WorkShop DebuggerMegaDevIDREF="05.IRIXDevTools31"CASEVision/WorkShop MegaDevPerformance AnalyzerIDREF="05.IRIXDevTools28"The Performance AnalyzerPro MPFIDREF="05.IRIXDevTools32"CASEVision/WorkShop Pro MPFStatic AnalyzerIDREF="05.IRIXDevTools27"The WorkShop Static AnalyzerWorkShop TesterIDREF="05.IRIXDevTools29"WorkShop Tester CD audio libraryIDREF="06.IRIXLibraries14"Digital Audio LibrariesCD Manager toolIDREF="06.IRIXLibraries26"Digital Media Toolscompiler driverIDREF="05.IRIXDevTools2"Compiler DriverscompilersAdaIDREF="03.IRIXLang7"AdaCIDREF="03.IRIXLang1"C and C++C++IDREF="03.IRIXLang2"C and C++Fortran 77IDREF="03.IRIXLang3"Fortran 77PascalIDREF="03.IRIXLang6"PascalPower CIDREF="03.IRIXLang4"Power CPower Fortran Accelerator (PFA)IDREF="03.IRIXLang5"Power Fortran AcceleratorCompression LibraryIDREF="06.IRIXLibraries18"Compression Libraryconfiguration controlIDREF="05.IRIXDevTools33"Version Control and Configuration ManagementDAT audio libraryIDREF="06.IRIXLibraries15"Digital Audio LibrariesDAT Manager toolIDREF="06.IRIXLibraries27"Digital Media Toolsdevice driversIDREF="01.IRIXOS16"Device Driversdigital media toolsIDREF="06.IRIXLibraries20"Digital Media Toolsdocumentationapplication librariesIDREF="02.IRIXmanuals8"Application LibrariescompilersIDREF="02.IRIXmanuals5"Compilersoperating system levelIDREF="02.IRIXmanuals4"Operating System Level Documentationroadmap  IDREF="02.IRIXmanuals1"A Documentation Roadmapsoftware development toolsIDREF="02.IRIXmanuals7"Software Development Toolsuser interface toolsIDREF="02.IRIXmanuals6"User Interface ToolsDSO (Dynamic Shared Object)IDREF="05.IRIXDevTools5"Object Files and Dynamic LinkingExecutable and Linking Format (ELF)IDREF="05.IRIXDevTools4"Object Files and Dynamic LinkingFortran 77 compilerIDREF="03.IRIXLang3"Fortran 77high-performance I/OIDREF="01.IRIXOS14"High-Performance I/O IDO (IRIS Developer's Option)IDREF="01.IRIXOS18"Writing an Application Programonline docmentationIDREF="02.IRIXmanuals2"The IRIS Developer's Optionordering printed manualsIDREF="02.IRIXmanuals3"The IRIS Developer's OptionImageVision LibraryIDREF="06.IRIXLibraries10"ImageVision LibraryImpressarioIDREF="06.IRIXLibraries29"Printer/Scanner ManagementIndigo Magic desktopIDREF="04.IRIXUITools10"Indigo Magic Desktop IntegrationIDREF="01.IRIXOS15"Indigo Magic Environmentlook and feelIDREF="04.IRIXUITools13"Achieving the Indigo Magic Look and FeelinternationalizationIDREF="01.IRIXOS2"InternationalizationInternet protocolsIDREF="01.IRIXOS8"NetworkingIRIS Graphics LibraryIDREF="06.IRIXLibraries6"IRIS Graphics LibraryIRIS IMIDREF="04.IRIXUITools7"OSF/Motif and IRIS IMIRIS Media LibrariesIDREF="06.IRIXLibraries11"IRIS Digital Media LibrariesIRIS PerformerIDREF="06.IRIXLibraries7"IRIS PerformerIRIS ViewKitIDREF="04.IRIXUITools8"IRIS ViewKitIRIXdevice driver interfacesIDREF="01.IRIXOS17"Device Drivershigh-performance I/OIDREF="01.IRIXOS14"High-Performance I/O internationalization featuresIDREF="01.IRIXOS2"Internationalizationnetwork programming facilitiesIDREF="01.IRIXOS4"Networkingparallel programming supportIDREF="01.IRIXOS12"Parallel Programmingperformance tuning toolsIDREF="05.IRIXDevTools17"Performance Tuning Toolsreal-time programming supportIDREF="01.IRIXOS13"Real-Time Enhancementsstandards complianceIDREF="01.IRIXOS1"Standards Compliancetool for debuggingIDREF="05.IRIXDevTools7"IRIX Tools for Debugging and Tuning Your Programtools for object file manipulationIDREF="05.IRIXDevTools10"Tools for Object File Query and Manipulation4DwmIDREF="04.IRIXUITools4"4Dwm cordIDREF="05.IRIXDevTools22"cord  dbxIDREF="05.IRIXDevTools8"Debugging TooldisIDREF="05.IRIXDevTools11"Tools for Object File Query and ManipulationelfdumpIDREF="05.IRIXDevTools12"Tools for Object File Query and ManipulationfileIDREF="05.IRIXDevTools13"Tools for Object File Query and ManipulationlibpfIDREF="06.IRIXLibraries9"IRIS PerformerlibprIDREF="06.IRIXLibraries8"IRIS PerformernmIDREF="05.IRIXDevTools14"Tools for Object File Query and ManipulationparIDREF="05.IRIXDevTools21"par pixieIDREF="05.IRIXDevTools20"Using prof and pixieprofIDREF="05.IRIXDevTools19"Using prof and pixierldIDREF="05.IRIXDevTools6"Object Files and Dynamic LinkingsizeIDREF="05.IRIXDevTools15"Tools for Object File Query and ManipulationstripIDREF="05.IRIXDevTools16"Tools for Object File Query and ManipulationXlibIDREF="04.IRIXUITools2"Xlib and XtxscopeIDREF="05.IRIXDevTools23"xscope XtIDREF="04.IRIXUITools3"Xlib and XtMIDI LibraryIDREF="06.IRIXLibraries16"MIDI libraryMovie LibraryIDREF="06.IRIXLibraries19"Movie LibraryMovie Maker toolIDREF="06.IRIXLibraries22"Digital Media ToolsMovie Player toolIDREF="06.IRIXLibraries23"Digital Media Toolsnetwork programming facilitiesIDREF="01.IRIXOS3"Networkingobject fileformatIDREF="05.IRIXDevTools3"Object Files and Dynamic Linkingquerying and manipulatingIDREF="05.IRIXDevTools9"Tools for Object File Query and ManipulationOpen InventorIDREF="06.IRIXLibraries3"Open Inventorcomponent libraryIDREF="06.IRIXLibraries5"Component LibrarytoolkitIDREF="06.IRIXLibraries4"Open Inventor ToolkitOpenGLIDREF="06.IRIXLibraries2"OpenGLOSF/MotifIDREF="04.IRIXUITools6"OSF/Motif and IRIS IMparallel programmingIDREF="01.IRIXOS12"Parallel ProgrammingPascal compilerIDREF="03.IRIXLang6"PascalPerformance AnalyzerIDREF="05.IRIXDevTools28"The Performance Analyzerperformance tuning toolsIDREF="05.IRIXDevTools18"Performance Tuning ToolsPower C compilerIDREF="03.IRIXLang4"Power CPower Fortran Accelerator (PFA)IDREF="03.IRIXLang5"Power Fortran Acceleratorprinter/scanner managementIDREF="06.IRIXLibraries28"Printer/Scanner Managementreal-time programmingIDREF="01.IRIXOS13"Real-Time EnhancementsRPC (Remote Procedure Call)IDREF="01.IRIXOS7"Networkingsoftware development toolsIDREF="05.IRIXDevTools1"Software Development Tools Sound Editor toolIDREF="06.IRIXLibraries24"Digital Media ToolsSound Filer toolIDREF="06.IRIXLibraries25"Digital Media ToolsStatic AnalyzerIDREF="05.IRIXDevTools27"The WorkShop Static AnalyzerTCP/IPIDREF="01.IRIXOS9"NetworkingTLI (Transport Layer Interface)IDREF="01.IRIXOS5"NetworkingUNIXSilicon Graphics enhancements toIDREF="01.IRIXOS11"Silicon Graphics Extrasuser interfaceSilicon Graphics styleIDREF="04.IRIXUITools11"Learning About Silicon Graphics User Interface Style toolsIDREF="04.IRIXUITools5"User Interface ToolkitsVideo LibraryIDREF="06.IRIXLibraries17"Video LibraryViewKitIDREF="04.IRIXUITools8"IRIS ViewKitclass hierarchyIDREF="04.IRIXUITools9"IRIS ViewKitWorkShopBuild ManagerIDREF="05.IRIXDevTools30"WorkShop/Build ManagerDebuggerIDREF="05.IRIXDevTools26"The WorkShop DebuggerMegaDevIDREF="05.IRIXDevTools31"CASEVision/WorkShop MegaDevPro MPFIDREF="05.IRIXDevTools32"CASEVision/WorkShop Pro MPFTesterIDREF="05.IRIXDevTools29"WorkShop Tester X Window SystemIDREF="04.IRIXUITools1"X Window SystemIDREF="01.IRIXOS10"X Window System