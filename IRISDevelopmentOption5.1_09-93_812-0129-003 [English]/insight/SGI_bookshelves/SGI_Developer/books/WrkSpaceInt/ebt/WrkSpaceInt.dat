#EDIR DATA#
IRIS WorkSpace Integration GuideDocument Number 007-2006-060ContributorsWritten by Beth Fryer, Robert Reimann, Seth Katz, and Susan BlauIllustrations by Seth KatzCover design and illustration by Rob Aguilar, Rikk Carey, Dean Hodgkinson, Erik Lindholm, and Kay Maitz.Engineering contributions by Betsy Zeller, John Corbett, Chris Williams, and Dave Story© Copyright 1993, Silicon Graphics, Inc.name='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]' All Rights ReservedThis document contains proprietary and confidential information of Silicon Graphics, Inc. The contents of this document may not be disclosed to third parties, copied, or duplicated in any form, in whole or in part, without the prior written permission of Silicon Graphics, Inc.Restricted Rights LegendUse, duplication, or disclosure of the technical data contained in this document by the Government is subject to restrictions as set forth in subdivision (c) (1) (ii) of the Rights in Technical Data and Computer Software clause at DFARS 52.227-7013 and/or in similar or successor clauses in the FAR, or in the DOD or NASA FAR Supplement. Unpublished rights reserved under the Copyright Laws of the United States. Contractor/manufacturer is Silicon Graphics, Inc., 2011 N. Shoreline Blvd., Mountain View, CA 94039-7311.IRIS WorkSpace Integration GuideDocument Number 007-2006-060Silicon Graphics, Inc.Mountain View, CaliforniaSilicon Graphics and IRIS are registered trademarks and IRIX, WorkSpace, IconSmith, Indy, Indigo Magic and the Graphics Library are trademarks of Silicon Graphics, Inc. FrameMaker is a registered trademark of Frame technology, Inc. PostScript is a registered trademark of Adobe Systems, Inc.IntroductionSilicon Graphics, Inc. currently supports two user environments: the Indigo Magic‘ User Environment on the Indy‘ system, and the  IRISÆ WorkSpace‘ on all other platforms. All platforms will be migrating to the Indigo Magic User Environment. This manual tells you how to integrate your application into IRIS WorkSpace. To learn how to integrate your application into the Indigo Magic User Environment, which includes the Indigo Magic Desktop, please see the Indigo Magic Desktop Integration Guide.This book is written for programmers who want to learn how to integrate applications into the IRIS WorkSpace. It describes how to program the appearance and functionality of file icons in the IRIS WorkSpace environment. Specifically, it explains how to customize existing icons, how to create unique icons for your application, and how to dictate the way your icons behave in the IRIS WorkSpace.ID="intro1"This book assumes that you are already familiar with the basic appearance and functionality of WorkSpace. To learn how to use the IRIS WorkSpace, refer to the† †IRIS WorkSpace User's Guide. This book also assumes that you are familiar with the IRIX‘ operating system and writing shell scripts. If not, read one of the many introductory books on UNIXÆ, available at any computer book store.There are 7 chapters and 5 appendices in this book:IDREF="48028" TYPE="TITLE"Chapter 1, "Creating a WorkSpace Icon," lists the basic steps for creating and programming an icon and provides some background information and general instructions to help you get started. IDREF="17843" TYPE="TITLE"Chapter 2, "Using IconSmith,"† †explains how to use the IconSmith‘ tool to draw your own WorkSpace icons.IDREF="36003" TYPE="TITLE"Chapter 3, "File Typing Rules," describes the twelve file typing rules and explains the appropriate syntax for their use.IDREF="53113" TYPE="TITLE"Chapter 4, "How to Create and Program an Icon: an Example," provides a step-by-step example of how to program a WorkSpace icon.IDREF="55672" TYPE="TITLE"Chapter 5, "Printing From WorkSpace," describes the rules that let you define the method by which a file is printed from WorkSpace.IDREF="90757" TYPE="TITLE"Chapter 6, "Creating WorkSpace Templates," explains how to use the WorkSpace templating feature to set the arrangement and content of WorkSpace windows that appear at startup.IDREF="56674" TYPE="TITLE"Chapter 7, "Adding Items to the WorkSpace Menu,"† †explains how to add your own menu items to WorkSpace.IDREF="71351" TYPE="TITLE"Appendix A, "WorkSpace Environment Variables," lists and describes the WorkSpace environment variables.IDREF="25750" TYPE="TITLE"Appendix B, "The Icon Description Language," explains the icon description language used by IconSmith. IDREF="51651" TYPE="TITLE"Appendix C, "FTR File Directories," lists the directories that contain file typing rules files.IDREF="30180" TYPE="TITLE"Appendix D, "Predefined File Types," lists all of the generic, predefined file types that Silicon Graphics provides for general use. It also lists the tag(1) identification numbers assigned to these file types.IDREF="12773" TYPE="TITLE"Appendix E, "Man Pages," provides relevant man pages.LBL="" HELPID=""How to Use this BookThere are two ways to use this book. The first is to read it through completely before attempting to create your icon. Alternatively, you can:Read through IDREF="48028" TYPE="TITLE"Chapter 1
 to get an understanding of the basic steps for programming the icon.Draw your icon as described in IDREF="17843" TYPE="TITLE"Chapter 2
. Use the steps listed in IDREF="91887" TYPE="TITLE"Section 1.2, "Creating an Icon: the Basic Steps,"
 as well as the examples in IDREF="53113" TYPE="TITLE"Chapter 4
 to program your icon. Refer to the file typing rules described in IDREF="36003" TYPE="TITLE"Chapter 3
 as necessary.LBL="1"ID="48028"Creating a WorkSpace IconThis chapter offers an overview of the basic steps for integrating your application into the IRIS WorkSpace. The first section lists the steps you must complete to create a working icon. The second and third sections explain these steps in more detail. The fourth section explains how to create customizations for a specific user on a single workstation.This chapter contains these sections:IDREF="56002" TYPE="TITLE"Section 1.1, "About the IRIS WorkSpace"IDREF="91887" TYPE="TITLE"Section 1.2, "Creating an Icon: the Basic Steps"IDREF="36712" TYPE="TITLE"Section 1.3, "Some Definitions"IDREF="15532" TYPE="TITLE"Section 1.4, "Drawing an Icon"IDREF="48786" TYPE="TITLE"Section 1.5, "Programming an Icon"IDREF="87490" TYPE="TITLE"Section 1.6, "Naming FTR Files"IDREF="24688" TYPE="TITLE"Section 1.7, "Placing FTR Files"IDREF="38471" TYPE="TITLE"Section 1.8, "Placing Icon Files"IDREF="16790" TYPE="TITLE"Section 1.9, "Creating a WorkSpace Template"IDREF="11067" TYPE="TITLE"Section 1.10, "Compiling Your Source Files"LBL="1.1" HELPID=""ID="56002"About the IRIS WorkSpaceThe IRIS WorkSpace adds a sophisticated graphical user interface to the IRIX file system and operating system. Icons in the IRIS WorkSpace represent files and directories. You can execute shell commands and run programs by manipulating WorkSpace icons using WorkSpace's point-and-click interface.ID="ch11"ID="ch12"Most people who use IRIS workstations also use WorkSpace. Therefore, it is important to make sure that your application is easy to access and manipulate from within the IRIS WorkSpace. WorkSpace provides tools that make it relatively easy for you to design your own icons, and to tailor icon behavior to fit the needs of each application.For utilities and files that do not require a personalized look, you can use a predefined file type instead of drawing and programming your own unique icon.ID="ch13"LBL="1.2" HELPID=""ID="91887"Creating an Icon: the Basic StepsHere is a brief outline of the steps to follow to create an icon and to program its desired behavior within the WorkSpace. The rest of this chapter explains each step in more detail. The exception is step one, which is explained in IDREF="17843" TYPE="TITLE"Chapter 2, "Using IconSmith."
"ID="ch14"Draw a picture of your icon. Draw it using the† †IconSmith application. Once you've created a drawing that pleases you, save it in a file with the suffix .fti. For example, if your application is called ExcellentDudes, you might name the icon file, ExcellentDudesIcon.fti. For information on how to use IconSmith, see IDREF="17843" TYPE="TITLE"Chapter 2
.Program your icon. Icon behavior is dictated by a set of rules called file typing rules (FTRs). These are described in IDREF="37453" TYPE="TITLE"Section 1.3.2, "File Typing Rules."
 To program your icon, include a selection of these rules in a file called an FTR file. You can program more than one icon in a single FTR file. To learn how to program your icon, see IDREF="16150" TYPE="TITLE"Section 1.5.1, "Creating a File Type."Put the FTR file in the appropriate directory. To determine where your FTR file belongs, see IDREF="87490" TYPE="TITLE"Section 1.6, "Naming FTR Files."Put your icon file in the correct directory. The icon file (.fti file) that you create in Step 1 belongs in one of two different directories. To decide the directory location of your icon file, see IDREF="16790" TYPE="TITLE"Section 1.9, "Creating a WorkSpace Template."Compile the appropriate source files. Compile the workspace.ctr file, which contains the compiled source for all existing FTRs. For more information on the† †workspace.ctr file, see IDREF="11067" TYPE="TITLE"Section 1.10, "Compiling Your Source Files."Create a WorkSpace template. This step is optional. It is only necessary if you want your application icon to automatically appear in WorkSpace's blue (main) window when the user brings up WorkSpace. For information on WorkSpace templating, see IDREF="90757" TYPE="TITLE"Chapter 6, "Creating WorkSpace Templates."Restart WorkSpace. You can view your changes after you restart WorkSpace.Update your installation script. If you want to install your application on other Silicon Graphics, Inc.Æ workstations, include in your installation script all of the files that you created in the preceding steps. Also Include the template that you created in step 6. IDREF="53113" TYPE="TITLE"Chapter 4, "How to Create and Program an Icon: an Example," contains a step-by-step example of how to program a WorkSpace icon. If you do not want to read the whole book, just read the rest of this chapter to learn the basics; then use the basic steps listed here and the example in IDREF="53113" TYPE="TITLE"Chapter 4
 to figure out how to program your icon. Refer to the sections indicated when you require more detailed information.LBL="1.3" HELPID=""ID="36712"Some DefinitionsThis section explains the basic terms you need to understand the rest of this book. LBL="1.3.1" HELPID=""File TypesA ID="ch15"file type is a named collection of rules, including a rule for incorporating the icon picture and some rules governing icon behavior. WorkSpace examines files to determine their type, then displays the appropriate icon for that type. There are hundreds of file types already defined in WorkSpace, including types for text files, generic executables, Showcase, Showcase data files, and many more. You can define your own file types to make your application and its associated files perform as you wish within the WorkSpace.LBL="1.3.2" HELPID=""ID="37453"File Typing RulesFile types are defined by a set of rules called† †file typing rulesID="ch16" (FTRs). File typing rules determine how files look and act within the IRIS WorkSpace. WorkSpace uses FTRs to evaluate all files that are presented within the WorkSpace or any Directory View window. The syntax of these rules is discussed in IDREF="36003" TYPE="TITLE"Chapter 3, "File Typing Rules."An additional set of rules defines the preferred method of sending a file of a particular type to a printer. These rules are called print conversion rules, and are discussed in IDREF="55672" TYPE="TITLE"Chapter 5, "Printing From WorkSpace."LBL="1.3.3" HELPID=""FTR FilesWorkSpace reads FTRs from compiled versions of special text files called ID="ch17"FTR files. An FTR file is a file in which one or more file types are defined. You can define multiple types in a single file.   An FTR source file ends with the suffix .ftr, and must reside in one specific directory. See IDREF="87490" TYPE="TITLE"Section 1.6, "Naming FTR Files."LBL="1.4" HELPID=""ID="15532"Drawing an IconSince many end users work almost exclusively in WorkSpace, it is important that your application has a unique, attractive WorkSpace icon. In addition to making your application look more appealing, a unique icon helps users distinguish your application from among the many icons in the WorkSpace. To create an icon, draw a picture of the icon using the IconSmith draw tool described in IDREF="17843" TYPE="TITLE"Chapter 2. Then save the picture in the correct format and put the saved file in the correct directory. To determine the correct directory in which to put the icon file, see IDREF="24688" TYPE="TITLE"Section 1.7
.In addition to creating an icon for the application, it is a good idea to create a unique icon for the application's data files. This icon should be different from the application icon, but share similar elements so that the relationship between the icons is visible at a glance. For example, the Showcase application icon and the Showcase data file icon are distinctly different, but they retain certain common elements, as shown in IDREF="11671" TYPE="GRAPHIC"Figure 1-1
.LBL="1-1" FILE="figure1.1.bw" POSITION="INLINE" SCALE="FALSE"LBL="1-1"Figure 1-1 ID="11671"The Showcase IconsFor each icon representing an executable, it is best to create an icon file containing an identifying badge for your executable. Put this icon in its own file with the suffix .fti. When you write your file type rule, you will combine this unique badge with the generic icons for open and closed executables. For hints on designing open and closed icons, see IDREF="18262" TYPE="TITLE"Section 2.11, "Composition Conventions."LBL="1.5" HELPID=""ID="48786"Programming an IconThere are many different kinds of files within the IRIX file system including plain text files, formatted documents, directories, shell scripts, images and binary executables. Each of these groups of files is represented in the WorkSpace by its own unique icon. Users expect different behaviors from different types of icons. For example, when you double-click on an icon representing an executable, you run the executable. Alternatively, when you double-click on an icon representing an image, the image appears on your screen.Before programming your icon, give some thought to how people want to use the file it represents: ID="ch18"Decide how you want the file to appear when users double-click on the icon, how you want it to act within the WorkSpace, and what combination of options serves as the default setting. The remaining sections in this chapter explain how to program icon behavior using the rules listed in IDREF="36003" TYPE="TITLE"Chapter 3
.† †If there are several important combinations of options, incorporate them into an icon menu. You do this using the MENU rule discussed in IDREF="31739" TYPE="TITLE"Section 3.12, "Adding Menu Items."
† †Decide how WorkSpace should print your files when users select the "Print" option from the WorkSpace menu. IDREF="55672" TYPE="TITLE"Chapter 5
 explains how to set print configurations.Decide where your icon should appear when users start up WorkSpace. Use an option called WorkSpace templating to arrange the startup WorkSpace window(s). For details see IDREF="90757" TYPE="TITLE"Chapter 6
. LBL="1.5.1" HELPID=""ID="16150"Creating a File TypeTo create a file type, open a new file (or an existing FTR file) using the text editor of your choice. Then type in the FTRs you need to program the icon to behave as you want. Start on the first line with the TYPE rule, which is the rule you use to name the file type. The FTRs are listed and described in detail in ID="ch19"IDREF="36003" TYPE="TITLE"Chapter 3
. You can define all the necessary file types for your application in a single FTR file.LBL="1.6" HELPID=""ID="87490"Naming FTR FilesThe standard naming convention for application vendors' FTR files is:ID="ch110"ID="ch111"vendor-name[.application-name].ftrwhere vendor-name is the name of your company and application-name is the name of your application.LBL="1.7" HELPID=""ID="24688"Placing FTR FilesIt is important to place your FTR file in the appropriate directory.Most FTR files that are not created at Silicon Graphics belong in the /usr/lib/filetype/install directory. There are also specific FTR directories set aside for site administration, and user customizations. For a list of all FTR directories, see IDREF="51651" TYPE="TITLE"Appendix C, "FTR File Directories."LBL="1.8" HELPID=""ID="38471"Placing Icon Files† †ID="42708"If you put your .ftr files in the† †/usr/lib/filetype/install directory, then put your .fti files in the /usr/lib/filetype/install/iconlib directory. If you put your† †.ftr files in one of the other directories listed in IDREF="51651" TYPE="TITLE"Appendix C
, then put your .fti file in a subdirectory of that directory. Name the subdirectory iconlib. LBL="1.9" HELPID=""ID="16790"Creating a WorkSpace TemplateOnce you have created and programmed the icons for your application, use WorkSpace templating to position the icon within WorkSpace. Then, whenever any user on the system opens WorkSpace, the icon appears where you placed it in your template.WorkSpace templates are maintained in the directory /usr/lib/workspace. WorkSpace reads and implements each template installed in this directory, so a user of several software packages has the benefit of each package's template. WorkSpace templating is described in IDREF="90757" TYPE="TITLE"Chapter 6
.LBL="1.10" HELPID=""ID="11067"Compiling Your Source FilesWorkSpace compiles FTR source files into files calledID="ch112"ID="ch113"ID="ch114"ID="ch115"ID="ch116"† †workspace.ctr files. Any time you add or change FTRs (or print conversion rules) you must recompile the appropriate workspace.ctr file. To compile the workspace.ctr file in the /usr/lib/filetype directory, follow these steps:cd /usr/lib/filetype† †su† †make† †To activate the new FTRs, quit and restart WorkSpace.When distributing and installing your application and its FTR files on a new machine, be sure that your installation process copies the FTR files into /usr/lib/filetype/install and then remakes the FTR file set using the procedure described above.LBL="2"ID="17843"Using IconSmithThis chapter contains these sections:IDREF="38832" TYPE="TITLE"Section 2.1, "About IconSmith"IDREF="63643" TYPE="TITLE"Section 2.2, "Using this Chapter"IDREF="87252" TYPE="TITLE"Section 2.3, "Starting IconSmith"IDREF="65037" TYPE="TITLE"Section 2.4, "IconSmith Menus"IDREF="15755" TYPE="TITLE"Section 2.5, "IconSmith Windows"IDREF="49874" TYPE="TITLE"Section 2.6, "Drawing with IconSmith"IDREF="26999" TYPE="TITLE"Section 2.7, "Selecting"IDREF="93773" TYPE="TITLE"Section 2.8, "Transformations"IDREF="47763" TYPE="TITLE"Section 2.9, "Concave Polygons"IDREF="34047" TYPE="TITLE"Section 2.10, "Constraints: Gravity (Object) Snap and Grid Snap"IDREF="18262" TYPE="TITLE"Section 2.11, "Composition Conventions"IDREF="15796" TYPE="TITLE"Section 2.12, "Advanced IconSmith Techniques"LBL="2.1" HELPID=""ID="38832"About IconSmithIconSmith is a drawing program for creating WorkSpace icons. Use it to create color icons to represent any file or directory on the system. Icons drawn with IconSmith are saved in the icon description language and can be included with file type rules or kept in a separate file. The icon description language is described in ID="ch21"ID="ch22"IDREF="25750" TYPE="TITLE"Appendix B, "The Icon Description Language."Designed for the specific requirements of WorkSpace, Iconsmith produces icons that draw quickly and display properly in WorkSpace on all IRIS-4D Series workstations. To that end, limitations have been imposed on the color palette and geometry. Iconsmith is not a general-use drawing application.LBL="2.2" HELPID=""ID="63643"Using this ChapterThis chapter explains how to create WorkSpace icons using IconSmith. Use this chapter while designing and drawing your icon. The features of IconSmith are described first, followed by examples. Features are organized by topic, rather than by window or menu. The examples use IconSmith features and explain tricks or shortcuts. LBL="2.2.1" HELPID=""TerminologyIconSmith uses some terms that may not be familiar to you. This section defines some terms used in the rest of this chapter. ID="ch23"LBL="" HELPID=""CaretID="ch24"The caret is a small red and blue cross. When you click the left mouse button, the caret appears where the cursor is pointed. Unlike the cursor, the caret shows the effects of grids and gravity.LBL="" HELPID=""Transformation PinID="ch25"The Transformation Pin indicates the point from which an object is scaled or sheared and around which an object is rotated. It is a blue and white cross, larger than the caret. It appears when you select "Push Pin" from the Transform Pin rollover menu, in the IconSmith pop-up menu. LBL="" HELPID=""VertexID="ch26"A vertex is the joint or endpoint of a collection of straight line segments, which can be manipulated. For example, the corner of a triangle, where two sides come together.LBL="" HELPID=""PathID="ch27"A path is one or more line segments between vertices. Paths can be open or closed, filled or unfilled. For example, a side of a triangle, between two corners.LBL="2.3" HELPID=""ID="87252"Starting IconSmithID="ch28"To start IconSmith from WorkSpace, click on the IconSmith icon, shown in IDREF="13541" TYPE="GRAPHIC"Figure 2-1
.LBL="2-1" FILE="figure2.1.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-1"Figure 2-1 ID="13541"The IconSmith IconID="ch29"To start IconSmith from the command line, type:/usr/sbin/iconsmithLBL="2.4" HELPID=""ID="65037"IconSmith MenusThe IconSmith main window, shown in IDREF="25476" TYPE="GRAPHIC"Figure 2-2
, provides two menus, the† †IconSmith menu and the Preview menu. The IconSmith menu can be accessed by holding down the right mouse button anywhere in the drawing area. The Preview menu is accessed by holding the right mouse button down within the blue preview square located in the lower left hand corner of the IconSmith main window.LBL="2-2" FILE="figure2.2.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-2"Figure 2-2 ID="25476"The Main IconSmith Window With Popup MenusLBL="2.5" HELPID=""ID="15755"IconSmith WindowsBesides the main window, IconSmith provides three other important windows: the Palette (Selection Properties) window, the Constraints window, and the† †Import Icon or Set Template) window. The Palette window, when in IDREF="29637" TYPE="GRAPHIC"Figure 2-3
, is displayed when you press the Palette button.LBL="2-3" FILE="figure2.3.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-3"Figure 2-3 ID="29637"The Palette (Selection Properties) WindowThe Constraints window, shown in IDREF="14625" TYPE="GRAPHIC"Figure 2-4
, is displayed when you press the Constraints button.LBL="2-4" FILE="figure2.4.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-4"Figure 2-4 ID="14625"The Constraints WindowThe Import Icon or Set Template window, shown in, is displayed when you press the Import Icon button.LBL="2-5" FILE="figure2.5.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-5"Figure 2-5 The Import Icon or Set Template WindowLBL="2.6" HELPID=""ID="49874"Drawing with IconSmithID="ch210"IconSmith provides tools for drawing paths, selecting color, importing design elements from other icons, drawing shapes, and using template images. When drawing in IconSmith, it is easy to select the wrong object. Complex icons can make for a complex selection process. Draw adjacent icon components separately to confusion when selecting and editing an object. When you have finished the parts, you can move them together.There is an "Undo" option in the IconSmith pop-up menu. To bring up the IconSmith pop-up menu, hold down the right mouse button. You can undo up to 9 operations using the <F1> key. To redo something you have undone, hold the <Shift> key and press the <F1> key.No single polygon can contain more than 255 vertices. ID="ch211"LBL="2.6.1" HELPID=""Drawing PathsID="ch212"To draw a path with IconSmith: Select a starting point by clicking the left mouse button.Move the mouse to a new position.Hold down the <Control> key and click the left mouse button.This process creates a line segment. To add more line segments connected to the first, repeat steps 2 and 3 as many times as necessary. To create a disconnected line segment, repeat from step 1.LBL="2.6.2" HELPID=""Drawing Filled ShapesID="ch213"In IconSmith, a closed path (one in which the beginning and end points meet) can be filled with a color. To draw a filled shape, make sure that you have selected a fill color from the Palette menu, and proceed to draw. When you finish creating the closed path, the shape is filled with the current fill color.Fill does not work properly with concave closed paths, nor with paths in which the beginning point does not meet the end point. See IDREF="47763" TYPE="TITLE"Section 2.9, "Concave Polygons."LBL="2.6.3" HELPID=""DeletingID="ch214"To delete any path or vertex, select it and press the <Back Space> key, or use "Delete" in the IconSmith pop-up menu.LBL="2.6.4" HELPID=""ID="12126"Keeping the 3-D LookID="ch215"Icons created by Silicon Graphics are drawn in the same isometric view, which provides an illusion of 3-D, even though the polygons composing the icons are 2-D. If you draw icons facing the screen at right angles, they look 2-D.To generate a 3-D effect, draw "horizontal" lines so that they move up 1 unit in the y-axis for every 2 units they extend along the true x-axis. See IDREF="36378" TYPE="GRAPHIC"Figure 2-6
.LBL="2-6" FILE="figure2.6.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-6"Figure 2-6 ID="36378"3-D Icon AxesUse the same projection that the original icon set uses. Icons tilted in the wrong direction look off-balance, and destroy the 3-D appearance. For your convenience, IconSmith provides an isometric grid. By following the diagonals of this grid, as shown, you can create an icon that fits in exactly with other isometric icons in WorkSpace. You can count along these diagonal grid dots, to help measure, align, or center pieces of your icon.LBL="2.6.5" HELPID=""Drawing For All scalesID="ch216"WorkSpace icons can be displayed in many sizes. It is easier to draw an icon that looks good small, but you might consider the details that appears when a user enlarges your icon.IconSmith includes two features useful in designing your icon for display at all sizes, the Preview box and the slider on the right side of the drawing area. LBL="" HELPID=""The Preview BoxID="ch217"ID="ch218"You can use the Preview box to see your icon design in common sizes and background colors. The Preview box is the blue box in the lower left corner of the main IconSmith window. By default, the Preview box shows your drawing at the default WorkSpace icon display size and no background color. You can change the icon size and background color in this window using the Preview box pop-up menu. LBL="" HELPID=""Changing Drawing SizeID="ch219"You can change the size of your design in the IconSmith drawing area using the slider on the right side of the drawing area. Use the slider to look at your design at all sizes. At particularly small sizes, some features may not be visible. At large sizes, design imperfections may appear.LBL="2.6.6" HELPID=""ID="32183"Sharing Design ElementsID="ch220"ID="ch221"ID="ch222"You can import design elements such as circles into your icon. Importing elements where possible saves you work and makes it easy to include common design elements in all the icons for one application.To import any file in icon format, click on the Import button. This brings up the Import Icon or Set Template window. Use the "Import to Icon Editing Layer" area to specify the icon file you want.Generic and sample material can be found in theID="ch223"ID="ch224"† †/usr/lib/filetype/iconlib† †directory. For example, to import a sample circle, type in the file name:/usr/lib/filetype/iconlib/sample.circle.ftiOther icons can be found in:/usr/lib/filetype/default/iconlib
/usr/lib/filetype/system/iconlib
/usr/lib/filetype/vadmin/iconlibAll icons are potential sources for design elements. However, if you are designing a unique set of executable or document icons, you should make use of templates as described in IDREF="27192" TYPE="TITLE"Section 2.6.7, "Templates,"
 and IDREF="18262" TYPE="TITLE"Section 2.11, "Composition Conventions."LBL="2.6.7" HELPID=""ID="27192"TemplatesID="ch225"You can use templates for tracing or to help you design your icons. You can import a template so that you can see it in the IconSmith drawing window, without saving or displaying as part of the design. This is most useful for getting position information while you are designing a unique badge to use in conjunction with the generic executable and document icons.You cannot move or change an icon template in IconSmith.To display a template, click on the Import button. In the Import Icon or Set Template window, type the name of the template icon file you want in the area labeled "Set Template Layer." Note that three template images are available from buttons in this window. These template images are the most often used, and they are discussed in ID="ch226"IDREF="18262" TYPE="TITLE"Section 2.11
.LBL="2.7" HELPID=""ID="26999"SelectingID="ch227"Before you edit, move, delete, or change the color of an object or vertex, you have to tell IconSmith which object you want. This can be difficult in a complex composition. Here are some tips that can make the task easier:ID="ch228"To select an object or vertex, move the cursor on top of the object and click the left mouse button. The vertices highlight blue and white when the object is selected. To move the vertex or object, double-click, hold down the left mouse button and move with the mouse. The vertices highlight green and yellow when you can move the object.You can select more than one object or vertex by holding down the <Shift> key during the selection process. To move the objects or vertices, move only one and the rest will follow.You can select all vertices in an area with your mouse. Hold down the left mouse button and sweep the cursor across the vertices you want. The area you select is indicated by a box. When you let go of the left mouse button, all vertices are selected.You can deselect a vertex by holding down the <Shift> key and clicking on the vertex.LBL="2.7.1" HELPID=""PartialID="ch229"When you use the mouse to select an area with objects in it, you might include only some vertices of some objects. When you click Partial on, objects partially selected are highlighted. When you click Partial off, partially selected objects are ignored. LBL="2.7.2" HELPID=""Deselect Part PathsID="ch230"In compositions with many objects, you can use "ID="ch231"Deselect Part Paths" to make selection easier. When selecting the objects in the drawing area, you can also select adjacent objects, then deselect what you don't want. Hold the† †<Shift> key down and click on one vertex of each object you don't want. This deselects the vertex, which makes the object partially selected. Then you can use "Deselect Part Paths" from the IconSmith pop-up menu to deselect the entire object.LBL="2.7.3" HELPID=""Select NextID="ch232""Select Next" allows you to select a vertex that is covered by another vertex. When two or more trajectories each have a vertex at a common location, such as two triangles with a coincident edge, the "Select Next" operator is useful for selecting a trajectory other than the top one. "Select Next" is also useful in images with tiled parts, where most vertices share a location. Select a shared vertex by clicking on its location. That vertex is highlighted in yellow and green (and the red and blue caret appears at that spot). The other vertices of the trajectory selected are highlighted in white to indicate the trajectory to which the selected vertex belongs. Now each time you choose "ID="ch233"Select Next" from the IconSmith menu, you step through all the other vertices of all the other trajectories which have a vertex at that point.LBL="2.7.4" HELPID=""Select AllID="ch234"You can select all vertices in the main IconSmith window drawing area using the "Select All" option in the IconSmith pop-up menu. You can select all vertices in an area by holding down the left mouse button and sweeping out a box to surround the desired area.LBL="2.8" HELPID=""ID="93773"TransformationsID="ch235"ID="ch236"The Transform buttons let you shrink, enlarge, stretch, and rotate portions of your icon design. These features can make drawing easier and more precise. To use any Transform button, follow this procedure.Choose the Transform option you want.Choose a point in the main IconSmith window drawing area as a reference point for the transformation by positioning the cursor and clicking the left mouse button.Bring up the IconSmith pop-up menu and select "Push Pin" from the Transform Pin rollover menu. To select an entire object for transformation, hold down the <Alt> key and double-click on the object you want to transform. Otherwise, you may select individual vertices by holding down the <Alt> and <Shift> keys while clicking on each desired vertex. Do not release the <Alt> key when you have finished selecting vertices.While still holding down the <Alt> key, position the cursor inside the object you want to transform. Press and hold down the left mouse button and move the mouse to transform the object.For example, here is how you enlarge a circle.ID="ch237"Choose "ScaleID="ch238"" from the Transform menu. Choose a point on the perimeter of the circle.Bring up the IconSmith pop-up menu and select "Move to Caret" from the "Transform Pin" rollover menu.Hold down the <Alt> key and double-click on the circle. All vertices on the circle are now highlighted in green and yellow.Continue to hold down the <Alt> key. Position the cursor on a vertex of the circle. Press and continue to hold down the left mouse button while you sweep the mouse out of the circle. The circle perimeter follows the cursor, enlarging the circle.Release the left mouse button and <Alt> key when the circle is the size you want.LBL="2.8.1" HELPID=""Scale The Scale button changes the size of an object without changing its shape.LBL="2.8.2" HELPID=""Scale X and YID="ch239"ID="ch240"The buttons marked Scale X and Scale Y limit scaling transformations to either horizontal or vertical, respectively. Unlike the Scale button, the Scale XY† †button allows you to stretch your object both horizontally and vertically.ID="ch241"LBL="2.8.3" HELPID=""RotateUsing the Rotate button, you can rotate a selected object around the Transform Pin.LBL="2.8.4" HELPID=""Shear YThe Shear Y transformation transforms rectangles into parallelograms with one pair of sides parallel to the y axis. The ShearY button is useful for transforming art that is drawn in a face-on view to an isometric view.Note that strictly speaking, the ShearY transformation performs two transformations: shear in y and scale in x.LBL="2.9" HELPID=""ID="47763"Concave PolygonsID="ch242"Do not use concave polygons when designing your icons; WorkSpace does not display concave polygons properly. If your icon does not display as you designed it, check for concave polygons. You must break any such polygons into two or more convex polygons. You can split a concave polygon into two polygons and an outline, as shown in IDREF="32538" TYPE="GRAPHIC"Figure 2-7
.By default, IconSmith, like WorkSpace, does not fill concave polygons properly. If you would prefer to have concave polygons filled properly while drawing your icon design, you can tell IconSmith to draw concave polygons. Bring up the IconSmith pop-up menu with the right mouse button. Select "Concave" and pull out the rollover menu. Select "No GL Check" from the rollover menu. IconSmith will not check for concave polygons until you select "ID="ch243"GL Check" from the Concave menu. LBL="2-7" FILE="figure2.7.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-7"Figure 2-7 ID="32538"Splitting a Concave Polygon.LBL="2.10" HELPID=""ID="34047"Constraints: Gravity (Object) Snap and Grid SnapID="ch244"You can use gravity snap and grid snap to guide your drawing in IconSmith, allowing you to align and compose objects perfectly. This makes drawing easier and more precise. Grid snap causes the caret to "snap" to vertices and/or edges of the grid pattern displayed behind the objects you are editing. Gravity snap causes the caret to snap to vertices and edges of objects you have already drawn. It is a good idea to make use of these features to ensure that your icon looks clean and precise at all sizes.Gravity snap and grid snap features are controlled by the Constraints window. When using the Constraints window, remember to click on either the ID="ch245"Apply or Accept button to implement your changes. The Accept button implements your changes and closes the Constraints window, and the Apply button leaves the window on your screen.LBL="2.10.1" HELPID=""Controlling the GridID="ch246"To change the grid behavior, use the buttons in the "Grid Constraints" portion of the Constraints window. In the main IconSmith window, the ID="ch247"Snap button under the heading "Grid" lets you turn globally turn on or off the grid setting you've made using the Constraints window. The Show button lets you display or hide the grid.The following setting choices are available for the grid in the Constraints window:Grid Basis buttons control the shape of the grids. IconSmith includes two types of grids. The isometric grid provides guidance in the perspective described in IDREF="12126" TYPE="TITLE"Section 2.6.4, "Keeping the 3-D Look."
 IconSmith also provides a traditional square grid. To change the type of grid you are using, select a Grid Basis button, and then press Apply.Snap to Grid buttons change the grid into lines or lines and vertices. These changes are reflected in the appearance of the grid after you select Apply.Grid Spacing controls the distance between points in the grid. You can type in the number of pixels you want, or base the distance on a selected line in your icon design. When you copy an object using "Duplicate", the copy is placed one grid space down and to the right from the original (or the previous copy).   You can use Grid Spacing to control where IconSmith places duplicate objects.Snap Influence allows you to adjust the area influenced by the "magnetic field" of the grid.LBL="2.10.2" HELPID=""Controlling GravityID="ch248"The controls in the "Gravity Constraints" portion of the Constraints window control how gravity snap behaves. In the main IconSmith window, the ID="ch249"Snap button under the "Gravity" heading lets you turn on or off the influence of gravity on objects.Snap to Object allows you assemble objects in your design smoothly.   The object's edge, vertex, or both attract other objects when they are moved within range of gravity.Snap Influence allows you to determine the range, in pixels, of the gravity influence of objects in your design.LBL="2.11" HELPID=""ID="18262"Composition ConventionsID="ch250"ID="ch251"The standard set of WorkSpace icons have been designed to establish a clear, predictable visual language for end users. As you extend the WorkSpace by adding your own application-specific icons, it is important to make sure that your extensions fit the overall look of the WorkSpace and operate in a manner consistent with the rest of the WorkSpace. This section describes the conventions you should follow when creating new WorkSpace icons.Usually IconSmith icons contain elements, called generic types, that convey a special meaning in WorkSpace. A properly designed icon tells the user whether it represents an executable, a particular data file, a text file, or another specific type of file.Icons are usually developed based upon generic types, such as Folder, Document, and Executable Application. By adding your own customizations to these generic types, you establish a unique look for your icon. The generic types are shown in IDREF="15018" TYPE="GRAPHIC"Figure 2-8
 next to specializations that yield a unique icon.LBL="2-8" FILE="figure2.8.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-8"Figure 2-8 ID="15018"Generic Icon Components and Custom Designs Design icons for executable applications so that they look good in both closed and open states. For example, the Showcase icons use custom open and closed icon components along with the generic parts, as shown in ID="ch252"IDREF="10333" TYPE="GRAPHIC"Figure 2-9
.LBL="2-9" FILE="figure2.9.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-9"Figure 2-9 ID="10333"Generic Executable Carpet with Custom IconWhile designing your icon, you might want to import the appropriate generic component as a template using the "Set Template Layer" of the "Import or Set Template" window; this helps you achieve the correct icon placement and perspective. When you are finished, save your icon in a† †.fti file, and combine it with generic executable or document icons as shown in the examples in IDREF="12749" TYPE="TITLE"Section 3.2, "An Example,"
 and IDREF="41208" TYPE="TITLE"Section 4.7, "The VortexApp FTRs."You can also add a generic icon component as a template or as part of your icon using Import to "Icon Editing Layer" section of the "Import or Set Template" window. LBL="2.11.1" HELPID=""Icon SizeID="ch253"The blue boundary box in the IconSmith drawing area indicates the area of your design that draws in WorkSpace and is sensitive to mouse input. You must confine your icon to the area within this boundary. You can display or hide the box by using the ID="ch254"ShowID="ch255" button under Bounds in the main IconSmith window.LBL="2.11.2" HELPID=""Changing ColorsID="ch256"You can select or change the color of any outlined or filled object by using the features in the Selection Properties window. To bring up this window, click on the ID="ch257"PaletteID="ch258" button. The currently selected outline and fill colors are displayed under the "Current Colors" heading.There are two palettes in the Selection Properties window, one for the outline color, and another for the fill color. The outline color palette consists of the first 16 entries in the IRIS color map. The fill color palette gives you 128 colors created by dithering between the color values of the first 16 colormap entries.Select outline and fill colors displayed in the palettes by clicking on them. If you want subsequent objects to use your color selections, click on "Apply to Pen." If you current objects to be updated with colors already in your pen, click on an existing object with the left mouse button, and then select "Get from Pen" from the Selection Properties window. The object will get the outline and fill colors currently assigned to the pen.LBL="2.11.3" HELPID=""Color ConventionsID="ch259"ID="ch260"Icons on Silicon Graphics workstations have access to a wide range of colors. Beyond the specific color choices found in IconSmith, there is a set of abstract colors suggested for standard use. These color variables include:icon color: Use extensively for drawing the main icon body. outline colorID="ch261": Use for outlining and line work in your icon.shadow colorID="ch262": Use for contrasting drop shadows below your icon.The icon color is particularly useful, because it automatically changes to the WorkSpace's preferred color conventions when your icon is located, selected, or disabled. When the WorkSpace displays your icon, it substitutes common signal colors in icon color areas, to let the user know about the status of your icon at any moment. WorkSpace uses icon color areas to communicate to your users, so use icon color extensively in your icon.ID="ch263"You can select the icon color from the Selection Properties window by using the ID="ch264"Icon buttons for Fill and/or Outline colors. Similarly, you will want to select the Outline buttons when drawing outlines and other line work, and the Shadow buttons when drawing drop shadows.Elsewhere within the icon, you may use other specific colors to give your icon more meaning and readability. However, you should avoid using pure white, pure yellow and pure blue as the dominant color within the body of your icon. These are colors that have meaning within the WorkSpace environment, automatically introduced in Icon color areas. A bright yellow icon, for example, would lead the user to believe that it has been selected. Bright blue is used to indicate that it is possible to "drop" one icon onto another. Pure white is used to show locate highlight while the user points at the icon with the cursor. LBL="2.12" HELPID=""ID="15796"Advanced IconSmith TechniquesThis section contains hints regarding shortcuts that make common IconSmith operations easier. This section also provides a step-by-step example of creating an icon. ID="ch265"LBL="2.12.1" HELPID=""Drawing a CircleHere is a trick for drawing a circle using lines:Draw a path the length of the radius of the circle you want. IDREF="48895" TYPE="GRAPHIC"Figure 2-10
 shows an exampleLBL="2-10" FILE="figure2.10.bw" POSITION="INLINE" SCALE="FALSE"ID="ch266"LBL="2-10"Figure 2-10 ID="48895"A PathSelect "Grid Spacing" of 0 pixels in the Constraints window.ID="ch267"Duplicate the line 12 times. Because grid spacing is set to 0, the duplicate lines stack.Select one vertex, bring up the IconSmith pop-up menu, and select "Push Pin" from the Transform Pin rollover menu.Click on the Rotate button from the Transform menu.ID="ch268"Hold down the <Alt> key and select the other vertex of the stack of paths. Sweep out each path until they resemble a wheel, as shown in IDREF="95367" TYPE="GRAPHIC"Figure 2-11
. † †LBL="2-11" FILE="figure2.11.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-11"Figure 2-11 ID="95367"Wheel Spokes.ID="ch269"Connect the outside vertices, as shown in IDREF="66399" TYPE="GRAPHIC"Figure 2-12
.LBL="2-12" FILE="figure2.12.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-12"Figure 2-12 ID="66399"Connected SpokesDelete the inside "spoke" paths, to get a circle like the one in IDREF="81766" TYPE="GRAPHIC"Figure 2-13
.LBL="2-13" FILE="figure2.13.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-13"Figure 2-13 ID="81766"Finished 2-D CircleCircles and other shapes can be time consuming to create. Another way of adding circles to your icon is to import a circle from another icon or from the icon parts library. See ID="ch270"IDREF="32183" TYPE="TITLE"Section 2.6.6, "Sharing Design Elements,"
 for more information.LBL="2.12.2" HELPID=""ID="23144"Drawing an OvalID="ch271"To create an oval, stretch the circle you have already drawn.Double-click on a circle.Bring up the IconSmith menu, and select "Move to Caret" from the Transform Pin menu.Place the pin directly above the circle.Select Scale Y from the TransformID="ch272" menu.Hold down the <Alt> key and use the mouse to stretch the circle to the oval shape you want. IDREF="63054" TYPE="GRAPHIC"Figure 2-14
 shows an example.LBL="2-14" FILE="figure2.14.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-14"Figure 2-14 ID="63054"An OvalYou can now assemble the parts to make a simple iconLBL="2-15" FILE="figure2.15.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-15"Figure 2-15 A Simple, Circular 2-D IconLBL="2.12.3" HELPID=""Isometric CirclesID="ch273"The circular icon created above is not a good central icon design because it is not isometric. The circle looks awkward in the context of isometric icons. Here are two ways to make the same design in isometric space.LBL="" HELPID=""Isometric TransformationYou can use the Shear Y button with an isometric grid to make any object seem 3-D.Duplicate your circle.Click on Shear Y in the Transform menu.ID="ch274"Bring up the IconSmith menu, and select "Push Pin" from the Transform Pin menu.Place the pin on one of the vertices at the bottom of the circle. Hold down the† †<Alt> key and align the bottom line of the circle using the grid. LBL="" HELPID=""Import Existing ObjectID="ch275"ID="ch276"If another icon contains the shape you need, recycle it.Click on the Import button.Import the icon file /usr/lib/filetype/iconlib/sample.big.3circles.fti. You should now have the design shown in IDREF="16611" TYPE="GRAPHIC"Figure 2-16
 in your IconSmith drawing area.† †LBL="2-16" FILE="figure2.16.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-16"Figure 2-16 ID="16611"Imported CirclesDelete all parts of this icon except the lower right circle.Using either method, you can create an isometric circle, shown in IDREF="30249" TYPE="GRAPHIC"Figure 2-17
. Starting with the isometric circle, you can easily create isometric ovals, using the procedure in IDREF="23144" TYPE="TITLE"Section 2.12.2, "Drawing an Oval."LBL="2-17" FILE="figure2.17.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-17"Figure 2-17 ID="30249"Finished Isometric CircleThe isometric version of the icon looks better in WorkSpace. ID="ch277"LBL="2-18" FILE="figure2.18.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-18"Figure 2-18 ID="37855"Simple, Isometric 2-D Icon.LBL="" HELPID=""Finishing Your IconA finished icon is actually two files. One containing the icon's appearance when closed, the other when opened. Finished icons should include a generic component.   You may wish to animate your icon by changing its appearance when it is clicked.Import the generic closed executable component using the Import button. In the "Import" dialogue box, under "import to Icon Editing Layer", enter the icon file name /usr/lib/filetype/iconlib/generic.exec.closed.fti. The icon component is superimposed on your design, and its paths are selected. Bring up the IconSmith popup menu, and select "Push† †Path to Back." Center your design on the generic component you have imported.† †LBL="2-19" FILE="figure2.19.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-19"Figure 2-19 Icon Centered on Generic ComponentCreate a second file using the same method for the open icon. You may want to give the appearance of animation by changing your design slightly. LBL="2-20" FILE="figure2.20.bw" POSITION="INLINE" SCALE="FALSE"LBL="2-20"Figure 2-20 Open IconSave your icon designs to files with the suffix.fti.   For a discussion of icon file installation, see IDREF="24688" TYPE="TITLE"Section 1.7, "Placing FTR Files."
   To learn how to integrate your icon into an FTR file, see IDREF="35039" TYPE="TITLE"Section 3.13, "Getting the Icon Picture."LBL="3"ID="36003"File Typing RulesThis chapter contains these sections:IDREF="72912" TYPE="TITLE"Section 3.1, "File Typing Rules and Definitions"IDREF="12749" TYPE="TITLE"Section 3.2, "An Example"IDREF="10863" TYPE="TITLE"Section 3.3, "Naming File Types"IDREF="27184" TYPE="TITLE"Section 3.4, "Categorizing File Types"IDREF="39636" TYPE="TITLE"Section 3.5, "Matching File Types with Applications"IDREF="92689" TYPE="TITLE"Section 3.6, "Matching Non-Plain Files"IDREF="34462" TYPE="TITLE"Section 3.7, "Adding a Descriptive Phrase"IDREF="33157" TYPE="TITLE"Section 3.8, "Programming Icon Open Behavior"IDREF="33173" TYPE="TITLE"Section 3.9, "Programming the Alt Key"IDREF="91613" TYPE="TITLE"Section 3.10, "Programming Drop Behavior"IDREF="40547" TYPE="TITLE"Section 3.11, "Programming Print Behavior"IDREF="31739" TYPE="TITLE"Section 3.12, "Adding Menu Items"IDREF="35039" TYPE="TITLE"Section 3.13, "Getting the Icon Picture"LBL="3.1" HELPID=""ID="72912"File Typing Rules and DefinitionsWorkSpace uses file typing rules (FTRs) to evaluate all files that are presented within the WorkSpace or any Directory View window. This chapter describes each of the file typing rules in detail, and offers suggestions for good file typing style and strategies.Each file type definitionID="ch31"† †must include: the TYPE rule, to tell WorkSpace that you are declaring and naming a new type (the TYPE rule must go on the first line of the FTRs)the LEGEND rule, to provide a text description when users view icons as a listthe MATCH rule, to allow WorkSpace to match files with the corresponding file typethe ICON rule, to tell WorkSpace how to draw the icon to use for this file typeIn addition to these basic components, you can add other FTRs as necessary. IDREF="56127" TYPE="TABLE"Table 3-1
 lists the file typing rules with brief descriptions.COLUMNS="2"LEFT="0" WIDTH="100"File Typing Rules LEFT="105" WIDTH="356"Function LEFT="0" WIDTH="100"TYPELEFT="105" WIDTH="356"Declares a new type. LEFT="0" WIDTH="100"SUPERTYPELEFT="105" WIDTH="356"Tells WorkSpace to treat the file as a subset of another 
type under certain circumstances.LEFT="0" WIDTH="100"MATCHLEFT="105" WIDTH="356"Lets WorkSpace determine if a file is of the declared 
type.LEFT="0" WIDTH="100"SPECIALFILELEFT="105" WIDTH="356"Tells WorkSpace to use the file typing rule only on 
non-plain files.LEFT="0" WIDTH="100"LEGENDLEFT="105" WIDTH="356"Provides a text description of the file type.LEFT="0" WIDTH="100"CMD OPENLEFT="105" WIDTH="356"Defines a series of actions that occur when a user 
double-clicks the mouse on an icon or selects "open" 
from the main menu.LEFT="0" WIDTH="100"CMD ALTOPENLEFT="105" WIDTH="356"Defines a series of actions that occur when a user 
alt-double-clicks the mouse on an icon.LEFT="0" WIDTH="100"CMD DROPLEFT="105" WIDTH="356"Defines a series of actions that occur when a user 
"drops" one icon on top of another.LEFT="0" WIDTH="100"CMD PRINTLEFT="105" WIDTH="356"Defines a series of actions that occur when a user 
chooses "Print" from the WorkSpace or Directory 
View menus.LEFT="0" WIDTH="100"MENUCMDLEFT="105" WIDTH="356"Defines menu entries that appear in the WorkSpace 
menus when an icon is selected.LEFT="0" WIDTH="100"ICONLEFT="105" WIDTH="356"Defines the appearance (geometry) of the file type's 
icon.LBL="3-1"Table 3-1 ID="56127"File Typing RulesLBL="3.2" HELPID=""ID="12749"An ExampleHere is an example of a simple file type definition:TYPE scrimshaw
† †   MATCH tag == 0x00001005;
† †   LEGEND the scrimshaw drawing program
† †   SUPERTYPE Executable
† †   CMD OPEN    $LEADER 
† †   CMD ALTOPEN     launch -c $LEADER
† †   ICON {
† †          if (opened) {
† †              include("../iconlib/generic.open.fti");
† †       } else {
† †              include("../iconlib/generic.closed.fti");
† †        }
† †        include("../iconlib/scrimshaw.fti");
† †   }The first line contains the TYPE rule, which you use to name the file type. In this case, the file type is named, scrimshaw. Always place the TYPE rule on the first line of your FTRs. The TYPE rule is described in IDREF="10863" TYPE="TITLE"Section 3.3, "Naming File Types."The second line contains the MATCH rule. Use the MATCH rule to tell WorkSpace which files belong to this file type. In this example, we are just writing in the identification (tag) number that we have already assigned to the application. The MATCH rule is described in IDREF="39636" TYPE="TITLE"Section 3.5, "Matching File Types with Applications."The third line contains the LEGEND rule. Use this rule to provide a brief descriptive phrase for the file type. This phrase appears when users view a directory in list form. It also appears when users select the "Get File Info" item from the WorkSpace pop-up menu. In this case, the descriptive phrase is "the scrimshaw drawing program." The LEGEND rule is described in IDREF="34462" TYPE="TITLE"Section 3.7, "Adding a Descriptive Phrase."
 The fourth line contains the SUPERTYPE rule. Use this rule to name a file type superset for your FTRs. Then you need only write FTRs for icon behavior that is different from that of the SUPERTYPE file type. In this example, the SUPERSET is "Executable." The SUPERTYPE rule is described in IDREF="27184" TYPE="TITLE"Section 3.4, "Categorizing File Types."The fifth line contains the CMD OPEN rule. This rule tells WorkSpace what to do when users double-click on the icon. In this example, clicking on the icon opens the scrimshaw application. The $LEADER variable is a WorkSpace environment variable. These are listed and defined in IDREF="71351" TYPE="TITLE"Appendix A, "WorkSpace Environment Variables."
 The CMD OPEN rule is described in IDREF="33157" TYPE="TITLE"Section 3.8, "Programming Icon Open Behavior."The sixth line contains the CMD ALTOPEN rule. This rule tells WorkSpace what to do when users double-click on the icon while holding down the <Alt> key. In this example, WorkSpace runs† †launch(1), which brings up a text edit window so that users can type in command-line arguments to the scrimshaw executable. Again, $LEADER is a WorkSpace environment variable. These are listed in Appendix A. For more information on the launch command, see the launch(1) man page. The CMD ALTOPEN rule is described in IDREF="33173" TYPE="TITLE"Section 3.9, "Programming the Alt Key."
† †The final lines contain the ICON rule. These lines tell WorkSpace where to find the parts for the open and closed versions of the "scrimshaw" icon. Note that this rule combines the generic icons for open and closed executables with the unique "scrimshaw" badge that identifies it as a distinctive application. The ICON rule is described in IDREF="35039" TYPE="TITLE"Section 3.13, "Getting the Icon Picture."LBL="3.3" HELPID=""ID="10863"Naming File TypesID="ch32"It is important that your file type have a unique name so that it doesn't collide with Silicon Graphics types or types added by other developers. One way to create a unique type name is to include your company's initials or stock symbol. Even if you choose your type name carefully, you still need to check the existing type names to make sure that you have not duplicated an existing name. Use theID="ch33"ID="ch34"† †grep(1) command to search through existing .ftr files:grep your_number /usr/lib/filetype/*/*.ftr† †Substitute your proposed new type name for the words "your_number." If grep doesn't find your number, then go ahead and use it.You name a file type by using the TYPE rule.   You can define more than one file type in a single file, as long as each new file type begins with the TYPE rule. The TYPE rule always goes on the first line of the file type definition. Here is the syntax and description for the TYPE rule:Syntax:TYPE type-nameDescription:ID="ch35"type-name is a one-word ASCII string. Legal type names can be any legal C language variable name. You should ideally choose a name that is in some way descriptive of the file type it represents. All rules that follow a TYPE declaration apply to that type, until the next TYPE declaration is encountered in the FTR file. Each TYPE declaration must have a unique type name.Example:TYPE GenericExecutableLBL="3.4" HELPID=""ID="27184"Categorizing File TypesID="ch36"ID="ch37"Use the SUPERTYPE rule to tell other file types that your file type should be treated as a "subset" of a larger type such as executables or directories. For example, you can create a executable with a custom icon, then use the SUPERTYPE rule to tell other WorkSpace file types that the icon represents an executable. You can use any existing file type as a SUPERTYPE. For a list of existing file types, use the grep(1) command:grep TYPE /usr/lib/filetype/*/*.ftrHere is the syntax and description for the SUPERTYPE rule:Syntax:SUPERTYPE type-name [type-name ... ]Description:type-nameID="ch38" is the TYPE name of any valid file type. Use SUPERTYPE to identify the file type as a "subset" of one or more other file types. This information can be accessed by other file types by calling isSuper(1) from within their CMD rules (OPEN, ALTOPEN, etc.). A file type may contain several SUPERTYPE rules. See the isSuper(1) man page for more information.ID="ch39"Example:SUPERTYPE ExecutableDirectories are a special case. WorkSpace automatically handles the DROP, OPEN, and ALTOPEN rules for all directories marked as `SUPERTYPE Directory'.LBL="3.5" HELPID=""ID="39636"Matching File Types with ApplicationsID="ch310"ID="ch311"ID="12850"WorkSpace needs some way to figure out which FTRs pair up with which files. Your FTRs will not work if they don't include some way for WorkSpace to match them with the appropriate files. To do this, include the MATCH rule in your file type definition. This section explains how to use the MATCH rule to identify your files. The method you use depends on the kind of file you are matching and on the file permissions. First, here's the MATCH rule syntax and description:Syntax:MATCH match-expression;Description:match-expressionID="ch312" is a logical expression that should evaluate to true if, and only if, a file is of the type declared by TYPE. The match-expression must consist only of valid MATCH functions, as described later in this section. The match-expression can use multiple lines, but must terminate with a semicolon (;). Multiple match-expressions are not permitted for a given type. The MATCH rule is employed each time a file is encountered by the WorkSpace, to assign a type to that file.Example:MATCH tag == 0x00001005;The easiest way to match your application with its FTRs is to use the ID="ch313"ID="ch314"tag(1) command to assign a unique number to the application itself. You can then label the associated FTRs with this same unique number, using the MATCH rule, as shown in the example above. For more information on matching your files with the tag command, see IDREF="39636" TYPE="TITLE"Section 3.5, "Matching File Types with Applications."There are a few situations in which you cannot use† †tag to label your files. You cannot use tag if:your file is not executableyou don't have the necessary permissions to change the file† †For more information on matching your files without using the tag command, see IDREF="56776" TYPE="TITLE"Section 3.5.1, "Matching Files without the tag Command."ID="35959"To tag your application and its associated FTRs using the tag command, follow these steps:The tag command attaches an identification number to your application.   Before you tag your application, you need to select a number that is not already in use. Silicon Graphics assigns each company (or individual developer) a block of ID numbers for tagging files. If your company doesn't already have an assigned block of numbers, just send a request to Silicon Graphics. The best way is to e-mail your request to this e-mail address:workspacetags@sgi.comOnce you have your block of numbers, you can select a number from the block of numbers assigned to your company. Make sure that you select a number that is not in use. To verify that the number you choose is not in use, use the grep(1) command to search through all the FTR files. Begin the search by entering the cd command to change to the /usr/lib/filetype directory and type:grep "tag == your_number"Substitute the number you want to use for the words, your_number. If grep finds the number already in use, pick another number. After you select a unique tag number for your application, cd to the directory that contains your application and tag it using theID="ch315"† †tag command. This is the syntax:tag number filenameReplace the word† †number with the number that you are assigning to the application and filename with the name of your application. For more information on the tag command, see the tag(1) man page.After tagging the application itself, include the tag in your application's FTRs, using the MATCH rule. Just include a line like this in your FTR file:ID="ch316"MATCH tag ==number;where number is the unique tag number assigned to your application. You can also use the tag command to automatically assign a tag number for a predefined file type. Silicon Graphics provides a set of generic types, called predefined types, that you can use for utilities that do not require a personalized look. These predefined file types come complete with icons, FTRs, and tag numbers. Use the appropriateID="ch317"† †tag command arguments to get the desired file type features. For more information on tag arguments, see the tag(1) man page. The predefined file types are listed in IDREF="30180" TYPE="TITLE"Appendix D, "Predefined File Types."LBL="3.5.1" HELPID=""ID="56776"Matching Files without the tag CommandIf you cannot use the tag command to match your application with the corresponding FTRs, you need to write a sequence of expressions that check files for distinguishing characteristics. Once you have written a sequence of expressions that adequately defines your application file, include that sequence in your FTR file, using the MATCH rule. For example, you can use this MATCH rule to match a C source file:MATCH glob("*.c") && ascii;The glob function returns TRUE if the file's name matches the string within the quotes. The ascii function returns TRUE if the first 512 bytes of the file are all printable ASCII characters. (IDREF="40184" TYPE="TABLE"Table 3-3
 lists all of the available match-expression functions.) The && conditional operator tells WorkSpace that the functions on either side of it must both return TRUE for a valid match. See IDREF="44766" TYPE="TITLE""Valid Match-Expressions"
 for a list of all of the operators, constants and numerical representations that you can use in your match-expressions.LBL="" HELPID=""Writing Effective Match ExpressionsThe most effective way to order match-expressions in a single MATCH rule is to choose a set of expressions, each of which tests for a single characteristic, and conjoin them all using "and" conditionals (&&).The order in which you list the expressions in a MATCH rule is important. Order the expressions so that the maximum number of files are "weeded out" by the first expressions. This is advised because the conditional operator, &&, stops evaluation as soon as one side of the conditional is found to be false. Therefore, the more likely an expression is to be false, the further to the left of the MATCH rule you should place it.For instance, in the previous MATCH expression example, it is more efficient to place the glob("*.c") expression first because there are many more ASCII text files than there are files that end in .c.Since WorkSpace scans FTR files sequentially, you must make sure that your match rule is specific enough not to "catch" any unwanted files. For example, suppose you define a type named "myDataFile" using this MATCH rule:MATCH ascii;Now every text file in your system will be defined as a file of type "myDataFile."LBL="" HELPID=""ID="44766"Valid Match-ExpressionsID="ch318"This section describes the syntax and function of valid match-expressions.  † †You can use these C language operators in a match-expression:ID="ch319"ID="ch320"
+
-
* 
/ 
& 
| 
^
! 
% 
( )You can use these C language conditional operators in a match-expression:ID="ch321"
&& 
|| 
== 
!= 
< 
> 
<= 
>=The `==' operator works for string comparisons in addition to numerical comparisons.You can use these constants in a match-expression:ID="ch322"ID="ch323"true falseYou can represent numbers in match-expressions in decimal, octal, or hexadecimal notation. See IDREF="12188" TYPE="TABLE"Table 3-2
. COLUMNS="2"LEFT="0" WIDTH="83"RepresentationLEFT="90" WIDTH="356"Syntax LEFT="0" WIDTH="83"decimalID="ch324"LEFT="90" WIDTH="356"num LEFT="0" WIDTH="83"octalID="ch325"LEFT="90" WIDTH="356"0num LEFT="0" WIDTH="83"hexadecimalID="ch326"LEFT="90" WIDTH="356"0xnumLBL="3-2"Table 3-2 ID="12188"Numerical Representations in Match-ExpressionsLBL="" HELPID=""Functions† †ID="ch327"IDREF="40184" TYPE="TABLE"Table 3-3 lists the valid match-expression functions.COLUMNS="2"LEFT="0" WIDTH="84"Function SyntaxID="ch328"ID="ch329"LEFT="90" WIDTH="356"Definition LEFT="0" WIDTH="84" asciiID="ch330"LEFT="90" WIDTH="356"Returns TRUE if the first 512 bytes of the file are all printable 
ASCII characters.LEFT="0" WIDTH="84"char(ID="ch331"n)LEFT="90" WIDTH="356"Returns the nth byte in the file as a signed character; range is 
-128 to 127.LEFT="0" WIDTH="84"dircontains("ID="ch332"string"
)LEFT="90" WIDTH="356"Returns TRUE if the file is a directory and contains the file 
named by string.LEFT="0" WIDTH="84"glob("ID="ch333"string")LEFT="90" WIDTH="356"Returns TRUE if the file's name matches string; allows use of the 
following expansions in string for pattern matching: { } [ ] * ? and 
backslash (see sh(1) file name expansion).LEFT="0" WIDTH="84"linkcountLEFT="90" WIDTH="356"Returns the number of hard links to the file.LEFT="0" WIDTH="84"long(ID="ch334"n)LEFT="90" WIDTH="356"Returns the nth byte in the file as a signed long integer; range is 
-231 to 231 - 1.LEFT="0" WIDTH="84"modeID="ch335"LEFT="90" WIDTH="356"Returns the mode bits of the file (see chmod(1)).LEFT="0" WIDTH="84"print(ID="ch336"expr or 
"string")LEFT="90" WIDTH="356"Prints the value of the expression expr or string to stdout each 
time the rule is evaluated; used for debugging. Always returns 
true.LEFT="0" WIDTH="84"short(ID="ch337"n)LEFT="90" WIDTH="356"Returns the nth byte of the file as a signed short integer; range is 
-32768 to 32767.LEFT="0" WIDTH="84"sizeID="ch338"LEFT="90" WIDTH="356"Returns the size of the file in bytes.LEFT="0" WIDTH="84"string(ID="ch339"n,m)LEFT="90" WIDTH="356"Returns a string from the file that is m bytes (characters) long, 
beginning at the nth byte of the file.LEFT="0" WIDTH="84"uchar  (ID="ch340"n)LEFT="90" WIDTH="356"Returns the nth byte of the file as an unsigned character; range 
is 0 to 255.LEFT="0" WIDTH="84"tagID="ch341"LEFT="90" WIDTH="356"Returns the specific WorkSpace application tag injected into an 
executable file by the tag injection tool (see the tag(1) man page.) 
Returns -1 if the file is not a tagged file.LEFT="0" WIDTH="84"ushort(ID="ch342"n)LEFT="90" WIDTH="356"Returns the nth byte of the file as an unsigned short integer; 
range is 0 to 65535.LBL="3-3"Table 3-3 ID="40184"Match-Expression FunctionsLBL="" HELPID=""ID="30222"Predefined File TypesFor some applications, you may not want to create a unique file type and icon. Several predefined file types exist and you can use them as necessary. If you use a predefined file type for your application, ID="ch343"tagID="ch344" can automatically assign it a tag number. Just use the appropriate command line arguments as described in the† †tag(1) man page. The predefined file types and their tag numbers are listed in IDREF="30180" TYPE="TITLE"Appendix D
.LBL="3.6" HELPID=""ID="92689"Matching Non-Plain FilesID="ch345"ID="ch346"Syntax:SPECIALFILEDescription:SPECIALFILE is used to distinguish a file typing rule used for matching non-plain files. Device files and other non-plain files can cause damage to physical devices if they are matched using standard file typing rules. Special files are matched using only rules containing SPECIALFILE, which are written so as not to interfere with actual physical devices. Similarly, plain files are not matched using rules containing a SPECIALFILE rule.ID="ch347"ID="ch348"Example:SPECIALFILELBL="3.7" HELPID=""ID="34462"Adding a Descriptive Phrase ID="ch349"Use the LEGEND rule to provide WorkSpace with a brief phrase that describes the file type. This phrase appears when a user views your icon's directory as a list. It also appears when a user highlights your icon, then selects the "Get File Info" item from the WorkSpace pop-up menu. Here is the syntax and description for the LEGEND rule:Syntax:ID="ch350"LEGEND text-stringDescription:text-string is a string that describes the file type in plain language that a user can understand. Legends that are longer than 25 characters might be truncated in some circumstances.Example:LEGEND C program source fileLBL="3.8" HELPID=""ID="33157"Programming Icon Open BehaviorID="ch351"Use the CMD OPEN rule to tell WorkSpace what to do when a user opens your icon. Users can open your icon either by double-clicking on it, or by selecting it and then choosing the "Open" item from the WorkSpace pop-up menu. Here is the syntax and description for the CMD OPEN rule:Syntax:CMD OPEN† †sh-expression[;† †sh-expression; ... ;† †sh-expression]Description:The OPEN rule should reflect the most frequently used function that would be applied to a file of the given type. ID="ch352"sh-expression can be any valid Bourne shell expression. Any expression can use multiple lines. Any number of expressions can be used, and must be separated by semicolons (;). The final expression should not end with a semicolon. Variables can be defined and used as in a Bourne shell script, including environment variables. See IDREF="71351" TYPE="TITLE"Appendix A
 for a list of special environment variables set by the WorkSpace. These environment variables can be used to refer to the currently selected icons within the WorkSpace or Directory View.ID="ch353"Example:CMD OPEN $WINEDITOR $SELECTEDLBL="3.9" HELPID=""ID="33173"Programming the Alt KeyID="ch354"By using the CMD ALTOPEN rule, you can tell WorkSpace what to do when users double-click on your icon while depressing the <Alt> key. Here is the syntax and description for the CMD ALTOPEN rule:Syntax:CMD ALTOPEN sh-expression[; sh-expression; ... ; sh-expression]Description:The ALTOPEN rule provides added functionality for power users. Typically, ALTOPEN pops up a launch window to let the user edit arguments. sh-expression can be any valid Bourne shell expression. Any expression can use multiple lines. Any number of expressions can be used, and must be separated by semicolons (;). The final expression should not end with a semicolon. Variables can be defined and used as in a Bourne shell script, including environment variables. See IDREF="71351" TYPE="TITLE"Appendix A
 for a list of special environment variables set by WorkSpace. These environment variables can be used to refer to the currently selected icons within the WorkSpace or Directory View.Example:CMD ALTOPEN launch -c $LEADER $RESTLBL="3.10" HELPID=""ID="91613"Programming Drop BehaviorID="ch355"You can use the CMD DROP rule to tell WorkSpace what to do when a user drags another icon and drops it on top of your application's icon. Here is the syntax and description for the CMP DROP rule:Syntax:CMD DROP sh-expression[; sh-expression; ... ; sh-expression]Description:The DROP rule is invoked whenever a selected (file) icon is "dropped" onto another icon in the WorkSpace or Directory View windows. When this happens, WorkSpace checks to see if the file type being dropped upon has a DROP rule to handle the files being dropped. In this way, you can write rules that allow one icon to process the contents of other icons. Simply drag the selected icons that you want processed and put them on top of the target icon (that is., the one with the DROP rule).ID="ch356"Example:CMD DROP $TARGET $SELECTEDLBL="3.11" HELPID=""ID="40547"Programming Print BehaviorID="ch357"ID="ch358"Use the CMD PRINT rule to tell WorkSpace what to do when a user highlights your icon, then selects "Print" from the WorkSpace pop-up menu. Here is the syntax and description for the CMD PRINT rule; see also IDREF="55672" TYPE="TITLE"Chapter 5, "Printing From WorkSpace,"
 for information on writing rules to convert your new file type into one of the printable types.Syntax:CMD PRINT sh-expression[; sh-expression; ... ; sh-expression]Description:sh-expression can be any valid Bourne shell expression. Any expression can use multiple lines. Any number of expressions can be used, and must be separated by semicolons (;). The final expression should not end with a semicolon. Variables can be defined and used as in a Bourne shell script, including environment variables. See IDREF="71351" TYPE="TITLE"Appendix A
 for a list of special environment variables set by WorkSpace. These environment variables can be used to refer to the currently selected icons within the WorkSpace or Directory View. The recommended method of implementing the PRINT rule is to use the WorkSpace's print-job routing utility, routeprint. See the routeprint(1) man page for details on its syntax.ID="ch359"Example:CMD PRINT routeprint $LEADER $RESTLBL="3.12" HELPID=""ID="31739"Adding Menu ItemsID="ch360"ID="ch361"To add menu items to the WorkSpace pop-up menu (the menu that appears when you depress the right mouse button from inside a WorkSpace window) use the MENUCMD rule. Menu items added using this rule appear in the WorkSpace pop-up menu only when the icon is selected. To add menu items that always appear in the WorkSpace pop-up menu, see IDREF="56674" TYPE="TITLE"Chapter 7, "Adding Items to the WorkSpace Menu."
 Here is the syntax and description for the MENUCMD rule:Syntax:MENUCMD "string" sh-expression[; sh-expression; ... ; sh-expression]Description:MENUCMD inserts the menu entry ID="ch362"string into the WorkSpace or Directory View menu if a single file of the appropriate type is selected, or if a group of all of the same, appropriate type is selected. If the menu entry is chosen, the actions described by the† †sh-expressions are performed on each of the selected files.Example:MENUCMD "Empty Dumpster" \rm -rf $LEADER/*If you use the MENUCMD rule, your new menu item appears only when your icon is selected. You can also add menu items that always appear in the WorkSpace menu, regardless of which icons are selected or not selected. To do this, write a stylized shell script called a transfer device, described in IDREF="56674" TYPE="TITLE"Chapter 7
.LBL="3.13" HELPID=""ID="35039"† †Getting the Icon PictureID="ch363"ID="ch364"Use the ICON rule, described in this section, to tell WorkSpace where to find the file(s) containing the picture(s) of the icon for a file type. The simplest way to do this is to provide the full IRIX pathname. For example, if the ID="ch365"ID="ch366".fti file is in the directory called /usr/lib/filetype/install/iconlib, you would simply write that pathname directly into your FTR file. If you prefer not to use the absolute pathname in your FTR, you can use a relative pathname, as long as the icon file resides anywhere within the† †/usr/lib/filetype directory structure. To make use of relative pathnames, list the pathname relative to the directory containing the FTR file that contains the ICON rule. If you choose to do this, take care to keep path names used in FTR files synchronized with icon locations.For each executable there are three distinct pictures: one for the generic opened executable, one for the generic closed executable and one for the unique identifying badge that "floats" over the generic parts. To write your own ICON rule, use the icon description language, described inIDREF="25750" TYPE="TITLE"Appendix B, "The Icon Description Language."
 You need refer to IDREF="25750" TYPE="TITLE"Appendix B
 if only if you want to do something unusual. Otherwise, use the basic format from the example below to tell WorkSpace where to find your icon files. Here is the syntax and description for the ICON rule:Syntax:ID="ch367" ICON icon-description-routine† †Description: icon-description-routine† †is a routine written using the icon description language, detailed below. The routine can continue for any number of lines. The ICON rule is invoked any time a file of the specified type needs to be displayed in WorkSpace or Directory View. The rule is evaluated each time the icon is painted by the application that needs it.Example: ICON {† †  if (opened) {
† †  include("../iconlib/generic.open.fti");
† †  } else {
† †  include("../iconlib/generic.closed.fti");
† †  }
† †  include("../iconlib/ack.fti");
}The example above shows you exactly how to write the standard ICON rule. The first line invokes the ICON rule. The next two lines tell WorkSpace where to find the parts of the icon representing the open and closed "flying carpet" that makes up the generic executable icons. The unique badge is in a file named ack.fti.You can use these lines for your own ICON rule routine just by substituting the appropriate pathnames, for the pathnames above (the pathnames are inside the quotes on lines 3 and 5 in the example above). Notice that this example gives the pathname of the icon files (.fti files) relative to the directory in which the FTR file is located. You can use the full pathname if you prefer. Your icon description routine would then look like this, assuming that ack.fti was placed in /usr/lib/filetype/iconlib:
ICON {
 if (opened) {
  include("/usr/lib/filetype/iconlib/generic.fti");
 } else {
  include("/usr/lib/filetype/iconlib/generic.fti");
 }
 include("/usr/lib/filetype/iconlib/ack.fti");
}LBL="4"ID="53113"How to Create and Program an Icon: an ExampleThis chapter contains these sections:IDREF="51027" TYPE="TITLE"Section 4.1, "The Basic Steps for Creating a New Icon"IDREF="34807" TYPE="TITLE"Section 4.2, "Tag the Application"IDREF="15912" TYPE="TITLE"Section 4.3, "Create a Picture"IDREF="19756" TYPE="TITLE"Section 4.4, "Define a File Type"IDREF="25205" TYPE="TITLE"Section 4.5, "Rebuild the WorkSpace FTR Database"IDREF="30725" TYPE="TITLE"Section 4.6, "Write an Installation Script"IDREF="41208" TYPE="TITLE"Section 4.7, "The VortexApp FTRs"IDREF="19991" TYPE="TITLE"Section 4.8, "How to Copy an Existing File Type"LBL="4.1" HELPID=""ID="51027"The Basic Steps for Creating a New IconThis chapter provides a detailed example that illustrates how to create a new WorkSpace icon. The example shows how to create a working icon for an application called ID="ch41"ID="ch42"VortexApp. The VortexApp application is a simple text editor. This chapter shows how to write FTRs for the new† †VortexApp file type. For an alternate approach, see IDREF="19991" TYPE="TITLE"Section 4.8, "How to Copy an Existing File Type."To draw and program the icon, follow these basic steps:ID="ch43"Tag the application. Create a picture.Define a file type.Rebuild the WorkSpace FTR Database.Write an installation script.LBL="4.2" HELPID=""ID="34807"Tag the ApplicationThe first step is to tag the application with its own unique identification number so that WorkSpace has a way of matching theID="ch44"† †VortexApp application with the corresponding FTRs. You cannot tag your application if it is not an executable, or if you do not have write and execute permissions for the file. If you cannot† †tag the application, skip this step. You will have to use another method to help WorkSpace match your application with its FTRs. Use the method described in IDREF="56776" TYPE="TITLE"Section 3.5.1, "Matching Files without the tag Command."
 Since the† †VortexApp is an executable, you can tag it using the tag command. First, you need your own set of tag numbers to choose from. Send an e-mail request to Silicon Graphics at this mail address:workspacetags@sgi.comAfter Silicon Graphics sends you a block of your own registered tag numbers, you can tag your application. In this case, assume that you assign the VortexExecutable file type a specific tag number, using the tag(1) command. cd to the directory containing the† †VortexApp application and type:tag 0x00001001 VortexAppLBL="4.3" HELPID=""ID="15912"Create a PictureThe next step is to decide on a picture for the icon. If possible, consult with a designer or graphics artist for the designname='mdash' font=symbol charset=fontspecific code=190 
			descr='[mdash]' it makes a big difference in the final product. For the VortexApp, the designer chooses a simple sketch of an unsmiley face. IDREF="17843" TYPE="TITLE"Chapter 2, "Using IconSmith,"
 describes exactly how to draw such an icon. Save the icon in a file called VortexApp.fti. For the moment, do not worry about where to place these files; just put them anywhere that you have write permission. In this case, assume you put the files in the† †/usr/tmp directory.LBL="4.4" HELPID=""ID="19756"Define a File TypeThis section explains how to program the VortexApp icon. This includes naming it, telling WorkSpace where to find the icon files (.fti files) associated with it, and making the icon act as you want it to within the WorkSpace (for example, opening the application when a user double-clicks on the icon).This section assumes that you are writing your FTRs completely from scratch. You might prefer instead to modify an existing file type. To learn how to find the FTRs for an existing icon, see IDREF="19991" TYPE="TITLE"Section 4.8, "How to Copy an Existing File Type."LBL="4.4.1" HELPID=""Define the Icon's BehaviorBefore programming behavior for the VortexApp icon, decide how it should act within the WorkSpace. Assume you decide on these behaviors:When a user double-clicks on the† †VortexApp icon, WorkSpace runs the application.When a user drops another icon onto the VortexApp icon, WorkSpace brings up the† †VortexApp with the file represented by the dropped icon. Users can edit this file using the VortexApp, as usual.Note that this second behavior makes no provision for rejecting icons that represent files unsuitable for editing. You could enhance the VortexApp file type by including a line that tells WorkSpace to notify users when they drop an icon of the wrong SUPERTYPE onto the VortexApp icon. LBL="" HELPID=""Line 1: Name the File TypeAssume that you decide to name your new file type "VortexExecutable." Before using that name, you must first make sure that it is not already in use. Check all possible directories for the proposed file type name, since a file type defined in one directory can override a file type of the same name defined in another directory. To search for the file type name, "VortexExecutable," in the /usr/lib/filetype directory, follow these steps:cd /usr/lib/filetype† †grep "VortexExecutable" */*.ftr† †You must also check in the $HOME/.workspace directories:cd $HOME/.workspacegrep "VortexExecutable" */*.ftrIf you find another file type of the name you have chosen, then pick a new name for your file type. It's important to check the $HOME/.workspace directories, too, because any file type in one of these directories overrides a file type of the same name in any of the /usr/lib/filetype directories.Assume that you do not find an existing file type with the name "VortexExecutable," so it is fine to name the new file type. Using the editor of your choice, open a file in† †/usr/tmp (or anywhere you have write permissions) and name the new file type by typing in this line:TYPE VortexExecutableLBL="" HELPID=""Line 2: Classify the IconUse the SUPERTYPE rule to tell WorkSpace what type of file your icon represents. Since† †VortexApp is an executable, you add this line to the FTRs:SUPERTYPE EXECUTABLELBL="" HELPID=""Line 3: Match the File TypePut the tag number in the file type definition by adding this line to the FTRs:MATCH  tag == 0x00001001;If you were unable to use the tag command to assign an identification number to the application itself, you would need a slightly more complicated MATCH rule to match your application with its FTRs. For more information, see IDREF="56776" TYPE="TITLE"Section 3.5.1, "Matching Files without the tag Command."LBL="" HELPID=""Line 4: Provide A Descriptive PhraseFinally, provide a "legend" for the file type. The legend is a brief descriptive phrase that appears when users view a directory as a list or select "Get File Info" from the WorkSpace menu. To add the legend for† †VortexApp, add this line to the FTRs:LEGEND  Vortex text editorLBL="" HELPID=""Line 5: Opening the IconTo tell WorkSpace what to do when a user opens the† †VortexApp icon, include this line in the FTRs:CMD OPEN   $LEADER $REST$LEADER refers to the opened application, in this case† †VortexApp. WorkSpace uses $LEADER to open $REST. In this case, $REST means any other selected icons in the same window. $LEADER and $REST are WorkSpace environmental variables. These variables are listed and described in IDREF="71351" TYPE="TITLE"Appendix A, "WorkSpace Environment Variables."LBL="" HELPID=""Line 6: Dropping onto the IconTo tell WorkSpace what to do when a user drops another icon onto the† †VortexApp icon, include this line in the FTRs:CMD DROP $TARGET $SELECTED$TARGET refers to the icon that the user dropped another icon on, in this case VortexApp; $SELECTED refers to the icon that the user dropped onto the† †VortexApp icon. $TARGET and $SELECTED are WorkSpace environmental variables. These variables are listed and described in IDREF="71351" TYPE="TITLE"Appendix A
.LBL="" HELPID=""Line 7: Opening the Icon With the Alt Key DownIf a user opens† †VortexApp while depressing the <Alt>† †key, WorkSpace runs the launch(1) program. This behavior is set by including this line in the FTRs:CMD ALTOPEN launch -c $LEADER $RESTAgain, $LEADER refers to the opened application,† †VortexApp and $REST refers to any other selected icons in the same window. launch runs the launch program and -c is a command line argument to launch. See the launch(1) man page for more information.LBL="" HELPID=""Line 8: Add the Icon PictureTo tell WorkSpace where to find the picture for the† †VortexApp icon, add these lines to the FTRs:ICON  {
 if (opened) {
  include("../iconlib/generic.open.fti");
 } else {
  include("../iconlib/generic.closed.fti");
 }
 include("../iconlib/VortexApp.fti");
}These lines tell WorkSpace how to find pictures for the† †VortexApp icon in the opened and closed states.The pathname of the fti files is listed relative to the location of the FTR file containing the ICON rule. Relative pathnames work as long as the icon files are located within the /usr/lib/filetype directory structure. Alternatively, you can use the absolute pathnames to the files: /usr/local/lib/iconlib/generic.open.fti/usr/local/lib/iconlib/generic.closed.fti /usr/local/lib/iconlib/VortexApp.ftiLBL="4.4.2" HELPID=""Save the FTR FileOnce you have finished defining the new file type, save your changes to the FTR file and quit the editor.LBL="4.4.3" HELPID=""Place the .ftr and .fti FilesBefore you can define the file type, you need an FTR file. For VortexApp, assume that you create a file called VortexApp.ftr. It is not really important what you call the file, as long as the name ends with .ftr, but it is helpful if the name is reasonably descriptive. You can create the VortexApp.ftr file anywhere that you have write permissions, then move it to the appropriate directory later. In this case, assume that you put the file in the† †/usr/tmp directory.The next step is to put the FTR file in the appropriate directory. You must become superuser before you can add an FTR file to any of the FTR file directories in /usr/lib/filetype.In this case, we put the .ftr file in the /usr/lib/filetype/install directory. This is the standard directory for FTRs for applications not created and administered by Silicon Graphics. For a list of all the available FTR file directories, see IDREF="51651" TYPE="TITLE"Appendix C, "FTR File Directories."
† †Once you have put your .ftr file in the appropriate directory, cd to that directory and create a subdirectory called† †iconlib. Then put your .fti files in the new iconlib directory. (If the iconlib directory already exists, just add your .fti files to the existing directory.) You must be superuser to make the† †iconlib directory and to add your† †.fti file to it.LBL="4.5" HELPID=""ID="25205"Rebuild the WorkSpace FTR DatabaseWhen you have put the finished .ftr and .fti files in the correct directories, recompile the compiled FTR files that are in the workspace.ctr file. WorkSpace will not read your new FTRs until after you compile this file. To do this, open a shell and follow these steps:cd /usr/lib/filetype† †su† †make workspace.ctr† †Then quit and restart WorkSpace to see your changes.LBL="4.6" HELPID=""ID="30725"Write an Installation ScriptYou must add commands to your program's makefile to:tag the executables it produces copy† †.fti and† †.ftr files to the appropriate directories invoke make in† †/usr/lib/filetype to update WorkSpace's databaseSee the† †make(1) and† †sh(1) man pages for more information.LBL="4.7" HELPID=""ID="41208"The VortexApp FTRsID="ch45"This section provides the set of FTRs that define the file type called "VortexExecutable."TYPE VortexExecutable
SUPERTYPE Executable
MATCH tag == 0x00001001;
LEGEND Vortex text editor
CMD OPEN $LEADER $REST
CMD ALTOPEN launch -c $LEADER $REST
CMD DROP $TARGET $SELECTED
ICON {
 if (opened) {
  include("../iconlib/generic.open.fti");
† † } else {
  include("../iconlib/generic.closed.fti");
 }
 include("../iconlib/VortexApp.fti"):
}LBL="4.8" HELPID=""ID="19991"How to Copy an Existing File TypeOne way of defining a new file type is to copy an existing file type that is similar to what you want. It is a little easier to modify an existing file type than it is to write one from scratch.ID="ch46"The first step is to choose a file type that produces icon behavior similar to what you want from your new file type (that is, does the same thing when you double-click on the icon, acts the same way when you drop the icon on another icon, and so on.)Let us assume that we want the VortexApp icon to work a lot like the jot icon acts. (jot is a text editor provided by Silicon Graphics.) You find the FTRs for† †jot, copy them to your VortexApp own FTR file, and modify them to fit your own icon.To find the set of FTRs that define the file type for the jot icon, you go to WorkSpace and locate the jot icon. Since the jot file type has its own distinctive icon, its easy to find. Select the jot icon then hold down the right mouse button to get the WorkSpace menu. When the menu appears, select the "Get File Info" menu item. A window like the one in IDREF="25154" TYPE="GRAPHIC"Figure 4-1
 appears. LBL="4-1" FILE="figure4.1.bw" POSITION="INLINE" SCALE="FALSE"LBL="4-1"Figure 4-1 ID="25154"The "Get File Info" WindowLook at the line labeled, "Type." In this case, the line reads:Type: jot text editorThe string "jot text editor" is produced by the LEGEND rule; you can use this string to find the FTRs that define the jot file type. To do this, open a shell and follow these steps:cd /usr/lib/filetype† †grep "jot text editor" */*.ftr† †The system responds with this line:system/sgiutil.ftr  LEGEND jot text editorThis tells you that the jot FTRs are in the† †/usr/lib/filetype/system directory in a file named sgiutil.ftr. Now you can open the sgiutil.ftr file using the text editor of your choice, and search for the "jot text editor" string again. This tells you exactly where the† †jot FTRs are in the sgiutil.ftr file.† †If jot file type did not have its own icon, this search would not give you the file name. Now you can† †cd to the file with the jot FTRs and copy them into the FTR file for your new file type. Then rename and modify these copied FTRs to fit your new file type, as described in IDREF="19756" TYPE="TITLE"Section 4.4, "Define a File Type."LBL="5"ID="55672"Printing From WorkSpaceThis chapter contains these sections:IDREF="43588" TYPE="TITLE"Section 5.1, "About routeprint"IDREF="99077" TYPE="TITLE"Section 5.2, "Converting a File for Printing"IDREF="68180" TYPE="TITLE"Section 5.3, "The Print Conversion Rules"IDREF="11590" TYPE="TITLE"Section 5.4, "The Current Printer"LBL="5.1" HELPID=""ID="43588"About routeprintTo print a file, WorkSpace invokes the routeprint(1) command. routeprint knows how to convert most files into printable form, even if the conversion requires several steps.You can show routeprint how to convert your application's data files into printable format by adding one or more CONVERT rules to your application's FTR file. This chapter explains the process routeprint uses to convert data files into a printable format, what file types routeprint already recognizes, and how to write your own print CONVERT rule to allow your application to tap into routeprint's powerful printing capabilities.LBL="5.2" HELPID=""ID="99077"Converting a File for PrintingWorkSpace already has rules for printing many types of files, such as ASCII, PostScriptID="ch51"Æ, and RGB image files. The easiest method of printing a file of arbitrary format is to break down the printing process into small, modular steps. For example, instead of writing dozens of specialized rules to print man pages directly for each kind of printer, you can instead convert man pages to nroff format and then convert the nroff format to the format required for the current printer.The diagram shown in IDREF="33580" TYPE="GRAPHIC"Figure 5-1
 illustrates the steps by which existing WorkSpace file types are converted for printing. Each box represents one or more file types; the arrows between them indicate the steps by which the file types are converted. The values associated with the arrows represent the cost of the conversion. This concept is talked about more in IDREF="24707" TYPE="TITLE""Print Costs"
 later in this chapter.LBL="5-1" FILE="figure5.1.bw" POSITION="INLINE" SCALE="FALSE"LBL="5-1"Figure 5-1 ID="33580"File Conversions for Printing Standard WorkSpace Files.This modular approach to printing has two major advantages:The modular steps are reusable. Because you can reuse each modular printing step, you end up having to write fewer rules. routeprint† †can pick the most efficient route for printing. There is often more than one sequence of conversion steps to print a file. routeprint chooses the sequence of steps that provides the best possible image quality.This modular, multi-step conversion to printable form is called the print conversion pipelineID="ch52", a series of IRIX commands that process a copy of the file's data in modular increments. The print conversion rules are designed to take advantage of this method of processing printable files.WorkSpace already has rules for printing a large number file types. You can use grep to list all these file types, by typing:grep -i convert /usr/lib/filetype/*/*.ftrLBL="" HELPID=""ID="24707"Print CostsFrequently, there is more than one set of steps that routeprint can use to print your file. To compare different ways of printing a file of a particular type, routeprint associates cost numbers with each conversion, then chooses the series of conversions with the lowest total cost. When creating print conversion rules, cost can be used to reflect processing cost, or be used as a measure of output quality. Printing cost is defined as being inversely proportional to the quality of the output.LBL="5.3" HELPID=""ID="68180"The Print Conversion RulesThere are three parts to a complete print conversion rule:the CONVERT rulethe COST rulethe FILTER ruleLBL="5.3.1" HELPID=""The CONVERT RuleID="ch53"ID="ch54"Syntax:CONVERT source-type-name† †destination-type-nameDescription:source-type-name is the file type you are converting from. destination-type-name is the file type you are converting to.Example:CONVERT NroffFile PostScriptFileDo not use the convert rule to convert directly to a new printer type; convert to a standard workspace file type instead. Silicon Graphics reserves the right to alter printer types, so converting to a standard file type (for example, PostScript) is a more portable solution.LBL="5.3.2" HELPID=""The COST RuleID="ch55"ID="ch56"Syntax:COST non-negative-integerDescription:non-negative-integer represents the ID="ch57"arc cost, or incremental cost of the conversion. This cost is used to reflect processing complexity or can also be used inversely reflect the output quality. When routeprint selects a conversion sequence, it takes the arc costs into account, choosing the print conversion sequence with the least total cost. The COST rule is required; if you omit it, routeprint assumes the cost of the conversion is zero, which may result in inappropriate choice of printers.Example:COST 50LBL="5.3.3" HELPID=""The FILTER RuleID="ch58"ID="ch59"Syntax:FILTER filter-expressionDescription:The FILTER rule represents part of an IRIX pipeline that prepares a file for printing. filter-expression can be any single IRIX command line expression, and generally takes the form of one or more piped commands. In the general case, the first command within a single FILTER rule receives input from stdin; the last command in the rule send its output to stdout. routeprint concatenates all the FILTER rules in the print conversion pipeline to form one continuous command that sends the selected file to its destination printer.There are three special cases in creating FILTER rules:"first" case"last" case"setvar" caseIn a "first" case rule, the FILTER rule is the very first rule in the print conversion pipeline. In this case, routeprint passes the list of selected files to the first command in the FILTER rule as arguments. If a first case FILTER rule begins with a command that does not accept the files in this fashion, prepend the cat command to your rule:FILTER cat | tbl - | psroff -tThe files will then be piped to the next command's stdin.In a "last" case rule, the FILTER rule is the very last rule in the print conversion pipeline. This rule contains a command that sends output directly to a printer (such as lp). Last case rules are already provided for many file types. To ensure compatibility between your application and future printing software releases, you should refrain from writing your own last case rules. Instead, write rules that convert from your file type to any of the existing file types, and let the built-in print conversion rules do the rest.† †In a "setvar" case rule, the FILTER rule is used to set an environment variable used later in the print conversion pipeline. The first CONVERT rule in the example below sets a variable that defines an nroff macro used in the second rule. In all setvar cases, stdin is passed to stdout transparently. Thus, you can include setvar as part of the pipeline in a single FILTER rule.CONVERT mmNroffFile NroffFIle COST 1 FILTER setvar MACRO=mmCONVERT mmNroffFile PostScriptFile COST 50 FILTER eqn | tbl | psroff -$MACRO -tLBL="5.4" HELPID=""ID="11590"The Current Printer† †ID="ch510"The current printer is the system default printer that the user sets with the Print Manager or, alternatively, the printer specified by the ID="ch511"-p option to routeprint. If no default is set and -p is not used, an error message is returned by routeprint to either stdout or a notifier window (if the -g option to routeprint was set). routeprintID="ch512"ID="ch513"ID="ch514" sets the WorkSpace environment variable $CURRENTPRINTER to the currently selected default printer.LBL="6"ID="90757"Creating WorkSpace Templates† †ID="ch61"ID="ch62"This chapter contains these sections:IDREF="44873" TYPE="TITLE"Section 6.1, "About WorkSpace Templating"IDREF="41881" TYPE="TITLE"Section 6.2, "Using WorkSpace in Template Mode"LBL="6.1" HELPID=""ID="44873"About WorkSpace TemplatingWorkSpace templating allows you to orchestrate WorkSpace startup windows and their contents. Use this feature to create a WorkSpace template that provides your users with all of the icons necessary to your application. There are two important uses for templating:ID="ch63"You can advertise an icon by causing it to appear directly in WorkSpace's main (blue) window.   This makes it easy for users to find the icon; they do not have to rummage through numerous directory views looking for it. You can limit access to certain parts of the file system. This makes the file system seem less complicated to inexperienced users. For example, you may want to "lock" the root directory out of the WorkSpace.LBL="6.2" HELPID=""ID="41881"Using WorkSpace in Template ModeYou set WorkSpace templates interactively by invoking a special flag to the workspace command from the shell. When you run WorkSpace in template mode, be sure that you are logged in on an ordinary user account, not as root, tutor, or any other special account. Otherwise, your template will produce an environment that is not representative of a typical user account. While you do invoke root privileges to run WorkSpace in template mode, WorkSpace preserves the original login environment for you. To use the WorkSpace in template mode, you must first quit WorkSpace if you are using it. Open a shell window, and follow these steps:su
workspace -tNote that you must type su from a user account; do not log in as root. If you like, specify a name after the -t option. This name determines the name of the template file; by default it is set to your login name ($USER). The name option lets you identify your WorkSpace templates by your product or company name. Refer to the workspace(1) man page for more information. When WorkSpace comes up in template mode, it looks identical to WorkSpace in the normal mode. The only difference is the addition of four items to the WorkSpace menu:Save TemplateGet RootSet Lock OnSet Lock OffThese functions are explained below.LBL="" HELPID=""Save Template† †ID="ch64"The "Save Template" menu item saves your WorkSpace template to a file named:ID="ch65"name.wsrcwhere† †name is either the name you specify when invoking WorkSpace from the command line (described above), or $USER by default. When you use the "Save Template" command, WorkSpace first attempts to write the template file to the /usr/lib/workspace directory. If you do not have permission to write to that directory, WorkSpace offers you the option of creating that file in your own WorkSpace directory. In this case, you must install your new template file in the† †/usr/lib/workspace† †directory before other users can access it. If more than one WorkSpace template exists in this directory, WorkSpace uses all of the templates in an additive manner. Be sure to install your templates into this directory on a user's machine as part of your installation process.LBL="" HELPID=""Get Root† †ID="ch66"Under normal circumstances, the root (/) directory cannot be removed from the WorkSpace. WorkSpace in template mode allows you to remove the root directory and limit access from the WorkSpace to other directories (see ID="ch67"ID="ch68"IDREF="96170" TYPE="TITLE""Set Lock On/Off"
.) The Get Root menu item lets you retrieve the root directory and return it to the WorkSpace window once it has been put away.LBL="" HELPID=""ID="96170"Set Lock On/OffID="ch69"The "ID="ch610"Set Lock Off" and "Set Lock On" menu entries allow you to limit the user's access to specific IRIX directories from within the WorkSpace. This has no effect on IRIX file permissions; it sets access permissions for WorkSpace windows only. If you lock a directory using the "Set Lock On" menu item, WorkSpace users cannot access any file or directory that is:a parent directory of the locked directoryin a parent directory of the locked directory The only exception is that users can access a file that is already in the WorkSpace window, even if it belongs to a locked directory.   Note that users cannot use the "Put Away" menu item to put away locked directories. To lock a directory, select it and choose the "Set Lock On" item from the WorkSpace menu.The "Set Lock Off" menu item unlocks a locked directory. The root (/) directory is locked by default; all other directories are initially unlocked. If you unlock and put away root, choose another directory to be the head of the subtree, and set a lock on it. If you choose to lock a directory other than root (/), put away any ancestors of that directory before you save the template, or they will appear in the user's WorkSpace.LBL="7"ID="56674"Adding Items to the WorkSpace MenuID="ch71"This chapter contains these sections:IDREF="86824" TYPE="TITLE"Section 7.1, "The WorkSpace Menu"IDREF="19675" TYPE="TITLE"Section 7.2, "The Transfer Menu Manager"IDREF="43942" TYPE="TITLE"Section 7.3, "Transfer Device Typing"IDREF="71396" TYPE="TITLE"Section 7.4, "Transfer Device I/O"IDREF="12364" TYPE="TITLE"Section 7.5, "Using WorkSpace Environment Variables"IDREF="35555" TYPE="TITLE"Section 7.6, "Local Transfer Devices"IDREF="18295" TYPE="TITLE"Section 7.7, "Example: shellDevice"LBL="7.1" HELPID=""ID="86824"The WorkSpace MenuThe ID="ch72"WorkSpace menu is the menu that appears when you depress the right mouse button from inside any WorkSpace window. There are two ways to add items to this menu:Use MENU CMD to add items to the WorkSpace menu only when a particular icon is selected. To learn how to do this, read IDREF="31739" TYPE="TITLE"Section 3.12, "Adding Menu Items."Use the Transfer Menu Manager to add items that always appear in the WorkSpace menu. This is explained in this chapter.To add items that always appear in the WorkSpace menu, use the ID="ch73"Transfer Menu Manager tool located in the System toolchest. LBL="7.2" HELPID=""ID="19675"The Transfer Menu ManagerIf you open the System toolchest and select the item labeled "Transfer Menu Manager," the Transfer Menu Manager window appears on your screen. It contains icons representing ID="ch74"transfer devices. Transfer devices are shell scripts that communicate with the WorkSpace and the Transfer Menu Manager through a simple set of protocols. Transfer devices exist for the rcp, tar, and cpio commands and you can add your own as necessary. Note that though the existing transfer devices are devices for transferring files, you are not restricted to file-transfer commands when writing your own transfer devices.To define new kinds of transfer devices, put a script following the correct protocol in the ID="ch75"/etc/transferDevice directory.    An icon representing your new device appears in the Transfer Menu Manager window. This works only if you follow these steps:Write a script and install it in the /etc/transferDevice directory.Define a file type for your script. (This step is optional, but recommended.)Open the Transfer Menu Manager and select your new icon.Click on the Help Button to learn how to add your new device.LBL="7.3" HELPID=""ID="43942"Transfer Device TypingThe second line of a transfer device script (the line after the shell invocation) must follow this form:#transferDevnamename can be any name addition to the "transferDev"prefix. The complete name (transferDevname) must correspond to a TYPE declaration in an FTR file. The Transfer Manager scans the set of file typing rules for this TYPE, and uses the associated ICON rule to draw the transfer device's icon within the Transfer Menu Manager window. When you create a new transfer device, write your own FTR rules, using the rules for standard shipped transfer devices as templates. Otherwise, the Transfer Menu Manager assigns a generic transfer device icon to the transfer device.LBL="7.4" HELPID=""ID="71396"Transfer Device I/O† †ID="ch76"A transfer device must be able to handle the following strings as arguments:ID="ch77"menuversionsOKThe meaning of these strings, and the output that is associated with them, is explained in the following two sections.LBL="7.4.1" HELPID=""menu The transfer device is called with this argument by both the WorkSpace and the Transfer Menu Manager. The transfer device must respond by echoing one or more character strings in the following format:echo "token1 menu-item-string1"† †
echo "token2 menu-item-string2"† †
...menu-item-string is the text of the menu item that you wish to appear in the Transfer submenu of the WorkSpace and Directory View menus; you can include spaces. These items appear only after the user sets the transfer device with the Transfer Menu Manager. A transfer device may insert any number of menu items.token is a one-word token that WorkSpace uses as an argument in calling the transfer device when a user chooses its associated menu item from the Transfer submenu. Thus, your transfer device must also accept each token string as an argument, and respond with the appropriate action described in its associated menu item.LBL="7.4.2" HELPID=""versionsOKWhen a user tries to set your transfer device using the Transfer Menu Manager, the device is called with ``versionsOK'' as an argument. Your device must echo one of the following strings:echo "local" echo "remote" echo "remote local"If it echoes the first string, the Transfer Menu Manager allows the user to set only the local version of the device. If it echoes the second string, the user can set only the remote versions of the device. If it echoes the last string, the user can set either version.LBL="7.5" HELPID=""ID="12364"Using WorkSpace Environment VariablesCurrently, Silicon Graphics supports only the WorkSpace environment variable $SELECTED for use within transfer devices. This variable contains the list of selected icons from the WorkSpace. See IDREF="71351" TYPE="TITLE"Appendix A, "WorkSpace Environment Variables,"
 for more information.LBL="7.6" HELPID=""ID="35555"Local Transfer DevicesYou can make a transfer device available only to a particular user, by placing the transfer device in the user's ID="ch78"$HOME/.workspace/localTransferLinks directory. It appears in the Transfer Menu Manager window like any other transfer device, but only when you start the window system from that particular user's account.LBL="7.7" HELPID=""ID="18295"Example: shellDeviceThis section provides an example transfer device that allows you to open a shell window on any selected directory. Note that this transfer device inserts only one menu item in the Transfer submenu. Transfer devices can insert any number of items into the Transfer submenu. Make sure to set the device's execute permissions.ID="ch79"#!/bin/sh 
#transferDevShell

# User Preference Variables: 
# true or false 
† †openMultiple=false

case $1 
† †in 
† †  menu") 
† †     echo "open Open a Shell Window" 
† †  ;;
† †  "versionsOK") 
† †     echo "local" 
† †  ;;
† †  "open") 
† †        if [ -z "$SELECTED" ]; then 
† †             # Workspace puts us in the correct directory.
† †             title=`pwd`
† †             winterm -t $title
† †        else
† †             # Check that the user has made a valid
† †             # number of selections.
† †             set -- $SELECTED
† †             if [ $openMultiple = false -a $# -gt 1 ]; then
† †                 inform "Too many selections; cannot open shell."
† †                 exit 1
† †             fi
† †             # Go to the proper directory and open the window.
† †             for selection in $SELECTED; do
† †                 if [ -d $selection ]; then
† †                    cd $selection
† †                 else
† †                    dir=`dirname $selection`
† †                    cd $dir
     fi
† †                 title=`pwd`
† †                 winterm -t $title
† †              done
† †         fi
† †     ;;
esac
exit 0LBL="A"ID="71351"WorkSpace Environment VariablesHere is a list of environment variables used by WorkSpace. You can use any of these variables as part of the OPEN, ALTOPEN, or PRINT file typing rules, or as part of the FILTER print conversion rule.$LEADER If one or more icons are currently selected from the WorkSpace, LEADER is set to the icon whose text field is highlighted. If no icons are selected, it is set to null.$REST If more than one icon is currently selected from the WorkSpace, REST contains the list of names of all selected icons except the highlighted icon (see LEADER above). Otherwise, it is set to null.$LEADERTYPE If one or more icons are currently selected from the WorkSpace, LEADERTYPE is set to the TYPE of the icon whose text field is highlighted. If no icons are selected, it is set to null.$RESTTYPE When more than one icon is currently selected from the WorkSpace, RESTTYPE contains the TYPE for all selected icons except the highlighted icon, if the remainder of the selected icons are all of the same TYPE. If they are not the same TYPE, or only one icon is selected, RESTTYPE is set to null.$RESTTYPELIST Contains the list of TYPEs corresponding to the arguments in REST. If only one icon is selected, RESTTYPELIST is set to null.$ARGC Contains the number of selected icons.$TARGET Set only for the CMD DROP rule, TARGET contains the name of the icon being dropped upon; otherwise it is set to null.$TARGETTYPE Set only for the CMD DROP rule, TARGETTYPE contains the TYPE of the icon being dropped upon; otherwise it is set to null.$SELECTED Contains the names of the icons being dropped on TARGET, or null, if none are being dropped.$SELECTEDTYPE If all of the icons named in SELECTED are of the same TYPE, SELECTEDTYPE contains that TYPE; otherwise it is set to null.$SELECTEDTYPELIST Contains a list of TYPEs corresponding to the TYPEs of the selected icons named in SELECTED. If only one icon is selected, it is set to null.$WINEDITOR Contains the name for the text editor invoked from WorkSpace. The default editor is jot. To use an editor that does not generate its own window by default, you must set WINEDITOR to the appropriate winterm command line sequence. Thus, for vi, you would set WINEDITOR† †by typing:setenv WINEDITOR 'winterm -c vi'$WINTERM Contains the name of the window terminal invoked from WorkSpace using winterm(1). Currently supported window terminals are wsh and xterm. The default window terminal is wsh.LBL="B"ID="25750"The Icon Description LanguageUse IconSmith to draw your icons. To learn how to use IconSmith, see IDREF="17843" TYPE="TITLE"Chapter 2, "Using IconSmith."
 After you draw your icon, include it in the FTR file using the ICON rule described in IDREF="39636" TYPE="TITLE"Section 3.5, "Matching File Types with Applications."
To write the ICON rule, use the† †icon description language. This appendix describes the icon description languageID="appb1"The icon description language is a restricted subset of the C programming language. It includes line and polygon drawing routines from the IRIS Graphics Library‘ (GL), as well as some additional routines that are not in the GL. The description routine for a given icon is similar in structure to a C subroutine without the subroutine and variable declarations. The valid symbols and functions in the icon description language are described below. LBL="" HELPID=""Operators† †ID="appb2"You can use these C language operators in an icon description routine:+
-
*
/
&
|
^
!
%
=
( )
{ }You can use these C language conditional operators in an icon description routine:&&
||
==
!=
<
>
<=
>=LBL="" HELPID=""Constants† †ID="appb3"You can use these logical constants in an icon description routine:true falseLBL="" HELPID=""Variables† †ID="appb4"The following icon status variables are set by WorkSpace. You can use them in an icon description routine:opened located selected current disabledThese variables have values of either true or false. You can use them in a conditional statement to alter the appearance of an icon when it has been manipulated in various ways from the WorkSpace. You can use other legal C variables in an icon description routine, without a declaration; all variables are represented as type float. Any variable name is acceptable, provided it does not collide with any of the predefined constants, variables or function names in the icon description language.LBL="" HELPID=""FunctionsID="appb5"The icon description functions comprise, for the most part, a very restricted subset of the C language version of the IRIS Graphics Library, modified for 2-D drawing. IDREF="94943" TYPE="TABLE"See Table B-1
 for a list of all the icon description functions.COLUMNS="2"LEFT="0" WIDTH="119"Function LEFT="125" WIDTH="356"DefinitionLEFT="0" WIDTH="119"arc(x, y, r, startang, endang)LEFT="125" WIDTH="356"Draw an arc starting at icon coordinates x, y, radius r, starting 
at angle startang, ending at angle endang. Angle measures are 
in tenths of degrees.LEFT="0" WIDTH="119"arcf(x, y, r, startang, endang)LEFT="125" WIDTH="356"Like arc, but filled with the current pen color.LEFT="0" WIDTH="119"bclos(color)LEFT="125" WIDTH="356"Like pclos, but uses color for the border (outline) color of the 
polygon.LEFT="0" WIDTH="119"bgnclosedline()LEFT="125" WIDTH="356"Begin drawing a closed, unfilled figure drawn in the current 
pen color. Used in conjunction with vertex and endclosedline.LEFT="0" WIDTH="119"bgnline()LEFT="125" WIDTH="356"Like bgnclosedline, except the figure is not closed. Used in 
conjunction with vertex and endline.LEFT="0" WIDTH="119"bgnoutlinepolygonLEFT="125" WIDTH="356"Begin drawing a polygon filled with the current pen color. The 
polygon is outlined with a color specified by 
endoutlinepolygon. Also used in conjunction with vertex.LEFT="0" WIDTH="119"bgnpoint()LEFT="125" WIDTH="356"Begin drawing a series of unconnected points defined using 
calls to vertex. Used in conjunction with vertex and endpoint.LEFT="0" WIDTH="119"bgnpolygon()LEFT="125" WIDTH="356"Like bgnoutlinepolygon except the polygon is not outlined. 
Used in conjunction with vertex and endpolygon.LEFT="0" WIDTH="119"color(n)LEFT="125" WIDTH="356"Set current pen color to color index n.LEFT="0" WIDTH="119"draw(x, y)LEFT="125" WIDTH="356"Draw a line in the current color from the current pen location 
to x, y.LEFT="0" WIDTH="119"endclosedline()LEFT="125" WIDTH="356"Finish a closed, unfilled figure started with bgnclosedline.LEFT="0" WIDTH="119"endline()LEFT="125" WIDTH="356"Finish an open, unfilled figure started with bgnline.LEFT="0" WIDTH="119"endoutlinepolygon(color)LEFT="125" WIDTH="356"Finish a filled polygon started with bgnoutlinepolygon and 
outline it with color.LEFT="0" WIDTH="119"endpoint()LEFT="125" WIDTH="356"Finish a series of points started with bgnpoint.LEFT="0" WIDTH="119"endpolygon()LEFT="125" WIDTH="356"Finish a filled, unoutlined polygon started with bgnpolygon.LEFT="0" WIDTH="119"for (expr; expr; expr) exprLEFT="125" WIDTH="356"Note that shorthand operators such as ++ and -- are not part of 
the icon description language, so longer hand expressions 
must be used.LEFT="0" WIDTH="119"if (expr) expr [ else expr ]LEFT="125" WIDTH="356"Standard C language if-statement.LEFT="0" WIDTH="119"include("path")LEFT="125" WIDTH="356"Tell WorkSpace to find the icon geometry in the file with 
pathname path.LEFT="0" WIDTH="119"move(x, y)LEFT="125" WIDTH="356"Move current pen location to x, y.LEFT="0" WIDTH="119"pclos()LEFT="125" WIDTH="356"Draw a line in the current pen color that closes the current 
polygon, and fill the polygon with the current color.LEFT="0" WIDTH="119"pdr(x, y)LEFT="125" WIDTH="356"Draw the side of a filled polygon in the current pen color, from 
the current pen location to x,y.LEFT="0" WIDTH="119"pmv(x, y)LEFT="125" WIDTH="356"Begin a filled polygon at location x, y.LEFT="0" WIDTH="119"print(expr or "string")LEFT="125" WIDTH="356"Print the value of the expression expr or string to stdout; used 
for debugging.LEFT="0" WIDTH="119"vertex(x,y)LEFT="125" WIDTH="356"Specify a coordinate used for drawing points, lines and 
polygons by bgnpoint, bgnline, bgnpolygon, and so forth.LBL="B-1"Table B-1 ID="94943"Icon Description FunctionsLBL="C"ID="51651"FTR File DirectoriesThere are eight directories in which WorkSpace file types are defined. They are listed here in the order WorkSpace scans them:$HOME/.workspace/local† †$HOME/.workspace/install† †$HOME/.workspace/system† †$HOME/.workspace/default† †/usr/lib/filetype/local† †/usr/lib/filetype/install† †/usr/lib/filetype/system† †† †/usr/lib/filetype/default† †These files are listed in order of precedence. For example, any file type defined in the $HOME/.workspace/local directory overrides any file type of the same name in any of the other directories. Similarly, a file type defined in the /usr/lib/filetype/install directory overrides a file type of the same name in the /usr/lib/filetype/system and /usr/lib/filetype/default directories.In particular, Silicon Graphics uses the /usr/lib/filetype/system and /usr/lib/filetype/default directories to define and maintain system standards. Be especially careful not to override important defaults set in these directories.† †LBL="D"ID="30180"Predefined File TypesThis appendix lists the predefined file types and their associated tag numbers that are available for your use. Use a predefined file type for utilities that do not need a unique, personalized look.TYPE GenericWindowedExecutableMATCH tag == 0x00000000;
TYPE ttyOut1-NargExecutableMATCH tag == 0x00000620;
TYPE ttyLaunchExecutableMATCH tag == 0x00000500;
TYPE ttyOutExecutableMATCH (tag == 0x00000600) || (tag == 0x00000610);
TYPE ttyLaunchOutExecutableMATCH (tag == 0x00000700) || (tag == 0x00000710);
TYPE ttyLaunchOut1-NargExecutableMATCH tag == 0x00000720;
TYPE ttyExecutableMATCH (tag == 0x00000400) || (tag == 0x00000410);
TYPE LaunchExecutableMATCH tag == 0x00000100;
TYPE ttyLaunch1-NargExecutableMATCH tag == 0x00000520;
TYPE ttyOut2argExecutableMATCH tag == 0x00000602;
TYPE Generic1-NargExecutableMATCH tag == 0x00000020;
TYPE ttyLaunchOut1argExecutableMATCH tag == 0x00000701;
TYPE tty1-NargExecutableMATCH tag == 0x00000420;
TYPE Generic1argExecutableMATCH tag == 0x00000001;
TYPE ttyOut1argExecutableMATCH tag == 0x00000601;
TYPE ttyLaunchOut3argExecutableMATCH tag == 0x00000703;
TYPE tty2argExecutableMATCH tag == 0x00000402;
TYPE Generic2argExecutableMATCH tag == 0x00000002;
TYPE ttyLaunchOut2argExecutableMATCH tag == 0x00000702;
TYPE Generic3argExecutableMATCH tag == 0x00000003;
TYPE ttyLaunch1argExecutableMATCH tag == 0x00000501;
TYPE Launch1-NargExecutableMATCH tag == 0x00000120;
TYPE Launch2argExecutableMATCH tag == 0x00000102;
TYPE Launch1argExecutableMATCH tag == 0x00000101;LBL="E"ID="12773"Man PagesThis appendix lists the man pages mentioned in this book.COLUMNS="2"LEFT="0" WIDTH="108"Man Page  LEFT="115" WIDTH="356"SynopsisID="appe1"LEFT="0" WIDTH="108"confirm(1G) LEFT="115" WIDTH="356"displays a message in a window with a choice of responsesLEFT="0" WIDTH="108"dirviewID="appe2"(1G) LEFT="115" WIDTH="356"graphical interface to a directoryLEFT="0" WIDTH="108"iconsmithID="appe3"(1)LEFT="115" WIDTH="356" an interactive tool for creating iconsLEFT="0" WIDTH="108"informID="appe4"(1G)LEFT="115" WIDTH="356" displays a message in a windowLEFT="0" WIDTH="108"isSuperID="appe5"(1) LEFT="115" WIDTH="356"checks if a given TYPE is of a given SUPERTYPELEFT="0" WIDTH="108"jotID="appe6"(1G) LEFT="115" WIDTH="356"a simple mouse-based editorLEFT="0" WIDTH="108"launchID="appe7"(1) LEFT="115" WIDTH="356"puts up a window that prompts to complete the command line 
of an executableLEFT="0" WIDTH="108"routeprintID="appe8"(1) LEFT="115" WIDTH="356"routes files to printers using WorkSpace print conversion rulesLEFT="0" WIDTH="108"tagID="appe9"(1)LEFT="115" WIDTH="356" tags a MIPS executable with a magic number; for use in file 
typingLEFT="0" WIDTH="108"transfermanagerID="appe10"(1G) LEFT="115" WIDTH="356"adds new menu commands, dudeLEFT="0" WIDTH="108"wintermID="appe11"(1)LEFT="115" WIDTH="356" helps launch applications that require a terminal emulatorLEFT="0" WIDTH="108"workspaceID="appe12"(1G) LEFT="115" WIDTH="356"the WorkSpace visual interfaceLEFT="0" WIDTH="108"xconfirm(1G)LEFT="115" WIDTH="356" adds a general purpose dialog boxLBL="E-1"Table E-1 ID="11459"WorkSpace Man Page Summary To view a man page on-line, type (from the shell) the man command along with the name of the specific man page. For example, to view the iconsmith man page, you would type:man iconsmitharc costIDREF="ch57"The COST RuleasciiIDREF="ch330"Functions† †charIDREF="ch331"Functions† † CMD ALTOPEN ruleIDREF="ch354"Programming the Alt Key CMD DROP ruleIDREF="ch355"Programming Drop BehaviorCMD OPEN ruleIDREF="ch351"Programming Icon Open BehaviorCMD PRINT ruleIDREF="ch358"Programming Print Behaviorconfirm(1G)IDREF="appe1"Man PagesCONVERT ruleIDREF="ch54"The CONVERT RuleCOST ruleIDREF="ch56"The COST RuleCreating an icon basic stepsIDREF="ch14"Creating an Icon: the Basic Stepscreating new icons, exampleIDREF="ch42"The Basic Steps for Creating a New Iconcurrent printerIDREF="ch510"The Current Printer† †decimal representationsIDREF="ch324"Valid Match-Expressionsdescriptive phraseIDREF="ch350"Adding a Descriptive Phrase dircontainsIDREF="ch332"Functions† †dirview(1G)IDREF="appe2"Man Pagesdrawing withIDREF="ch210"Drawing with IconSmithdropping iconsIDREF="ch356"Programming Drop Behaviorenvironment variables, WorkSpaceIDREF="ch353"Programming Icon Open Behaviorexample for icon creationIDREF="ch43"The Basic Steps for Creating a New Iconexpression functions, listIDREF="ch329"Functions† † file types predefinedIDREF="ch13"About the IRIS WorkSpacefile types categorizing IDREF="ch38"Categorizing File Types matching non-plain filesIDREF="ch347"Matching Non-Plain Files required componentsIDREF="ch31"File Typing Rules and Definitionsfile types, namingIDREF="ch34"Naming File Types file typing rules CMD OPENIDREF="ch351"Programming Icon Open Behavior MATCHIDREF="ch312"Matching File Types with ApplicationsIDREF="ch311"Matching File Types with Applications MENUCMD IDREF="ch361"Adding Menu Itemsfile typing rules CMD ALTOPENIDREF="ch354"Programming the Alt Key CMD DROPIDREF="ch355"Programming Drop Behavior CMD PRINTIDREF="ch357"Programming Print Behavior LEGENDIDREF="ch349"Adding a Descriptive Phrase  SPECIALFILEIDREF="ch345"Matching Non-Plain Files SUPERTYPEIDREF="ch36"Categorizing File Types TYPEIDREF="ch32"Naming File Typesfile typing rules, ICONIDREF="ch363"† †Getting the Icon Picturefile typing rules, MATCHIDREF="ch310"Matching File Types with Applicationsfile typing rules, MENUCMDIDREF="ch360"Adding Menu Itemsfile typing rules, recompilingIDREF="ch113"Compiling Your Source FilesIDREF="ch115"Compiling Your Source Filesfile typing rules, source filesIDREF="ch114"Compiling Your Source FilesfileiconsIDREF="intro1"Introduction filetypes predefinedIDREF="ch317"Matching File Types with ApplicationsFILTER ruleIDREF="ch59"The FILTER RuleFTRs, see file typing rulesIDREF="ch116"Compiling Your Source FilesGet RootIDREF="ch66"Get Root† †globIDREF="ch333"Functions† †hexadecimal representations IDREF="ch326"Valid Match-Expressionsicon description constantsIDREF="appb3"Constants† †icon description functionsIDREF="appb5"Functionsicon description languageIDREF="ch22"About IconSmithIDREF="appb1"The Icon Description Languageicon description operatorsIDREF="appb2"Operators† †icon files, placementIDREF="ch366"† †Getting the Icon PictureICON ruleIDREF="ch364"† †Getting the Icon Pictureicon status variablesIDREF="appb4"Variables† †icons including in FTRsIDREF="ch367"† †Getting the Icon Picture programming guidelinesIDREF="ch18"Programming an IconIconSmith3-DIDREF="ch215"Keeping the 3-D Lookboundary boxIDREF="ch253"Icon SizecaretIDREF="ch24"CaretcolorIDREF="ch259"Color ConventionscolorsIDREF="ch256"Changing Colorsconcave polygonsIDREF="ch242"Concave PolygonsConstraints windowIDREF="ch245"Constraints: Gravity (Object) Snap and Grid SnapconventionsIDREF="ch260"Color ConventionsIDREF="ch251"Composition ConventionsdeletingIDREF="ch214"DeletingDeselect Part PathsIDREF="ch230"Deselect Part PathsdrawingIDREF="ch266"Drawing a Circledrawing circleIDREF="ch270"Drawing a Circledrawing isometric circleIDREF="ch273"Isometric Circlesdrawing ovalIDREF="ch271"Drawing an Ovaldrawing pathsIDREF="ch212"Drawing Pathsdrawing shapesIDREF="ch213"Drawing Filled ShapesEdit Path Properties windowIDREF="ch264"Color ConventionsenlargeIDREF="ch237"Transformationsgeneric materialIDREF="ch223"Sharing Design Elementsgeneric partsIDREF="ch252"Composition ConventionsGL CheckIDREF="ch243"Concave PolygonsgravityIDREF="ch244"Constraints: Gravity (Object) Snap and Grid SnapIDREF="ch248"Controlling GravitygridIDREF="ch246"Controlling the GridGrid SpacingIDREF="ch267"Drawing a CircleiconIDREF="ch29"Starting IconSmithIcon ColorIDREF="ch263"Color ConventionsimportIDREF="ch276"Import Existing ObjectimportingIDREF="ch222"Sharing Design ElementsIDREF="ch226"Templatesisometric viewIDREF="ch277"Import Existing ObjectOutline ColorIDREF="ch261"Color ConventionsPaletteIDREF="ch258"Changing ColorsPartialIDREF="ch229"PartialpathIDREF="ch27"Pathpolygon limitIDREF="ch211"Drawing with IconSmithPreview boxIDREF="ch218"The Preview Boxsample materialIDREF="ch224"Sharing Design ElementsScaleIDREF="ch238"TransformationsIDREF="ch216"Drawing For All scalesIDREF="ch217"The Preview BoxIDREF="ch219"Changing Drawing SizeScale XIDREF="ch240"Scale X and YScale YIDREF="ch239"Scale X and YscavengingIDREF="ch275"Import Existing ObjectIDREF="ch220"Sharing Design ElementsSelect AllIDREF="ch234"Select AllSelect NextIDREF="ch232"Select NextselectingIDREF="ch227"SelectingShadow ColorIDREF="ch262"Color Conventionsshared vertexIDREF="ch233"Select Nextsharing elementsIDREF="ch221"Sharing Design ElementsShow BoundsIDREF="ch255"Icon SizestartingIDREF="ch28"Starting IconSmithstyleIDREF="ch250"Composition ConventionstemplatesIDREF="ch225"TemplatesTransformIDREF="ch274"Isometric TransformationIDREF="ch268"Drawing a CircleIDREF="ch236"TransformationsIDREF="ch272"Drawing an Ovaltransformation pinIDREF="ch25"Transformation PintransformationsIDREF="ch235"TransformationsvertexIDREF="ch26"Vertexwheel spokesIDREF="ch269"Drawing a Circleiconsmith(1)IDREF="appe3"Man Pagesinform(1G)IDREF="appe4"Man PagesisSuper(1)IDREF="appe5"Man Pages with SUPERTYPE ruleIDREF="ch39"Categorizing File Typesjot FTRs IDREF="ch45"The VortexApp FTRsjot(1G)IDREF="appe6"Man Pageslaunch(1)IDREF="appe7"Man Pages LEGEND ruleIDREF="ch349"Adding a Descriptive Phrase limiting root accessIDREF="ch68"Get Root† †locking and unlocking filesIDREF="ch69"Set Lock On/OfflongIDREF="ch334"Functions† †MATCH expression functions, listIDREF="ch328"Functions† †MATCH expressionsIDREF="ch318"Valid Match-ExpressionsMATCH ruleIDREF="ch311"Matching File Types with ApplicationsIDREF="ch312"Matching File Types with Applicationsmatch-expression conditionalsIDREF="ch321"Valid Match-Expressions constantsIDREF="ch322"Valid Match-Expressions functionsIDREF="ch327"Functions† †match-expressionnumericalrepresentationIDREF="ch323"Valid Match-Expressionsmatch-expressionsIDREF="ch320"Valid Match-Expressions matchingIDREF="ch312"Matching File Types with Applicationsmatching non-plain filesIDREF="ch348"Matching Non-Plain Filesmenu items, adding with MENUCMDIDREF="ch362"Adding Menu ItemsMENUCMD ruleIDREF="ch361"Adding Menu ItemsmodeIDREF="ch335"Functions† †naming file typesIDREF="ch35"Naming File Typesnaming, FTR filesIDREF="ch111"Naming FTR Filesoctal representationsIDREF="ch325"Valid Match-Expressionsopening icons, the CMD OPEN ruleIDREF="ch352"Programming Icon Open Behavior predefined file typesIDREF="ch13"About the IRIS WorkSpacepredefined file typesIDREF="ch317"Matching File Types with ApplicationsprintIDREF="ch336"Functions† †print conversion pipelineIDREF="ch52"Converting a File for Printingprint conversion rules CONVERTIDREF="ch53"The CONVERT Rule COST ruleIDREF="ch55"The COST Rule FILTERIDREF="ch58"The FILTER Rule printingIDREF="ch357"Programming Print Behaviorprinting routeprint(1)IDREF="ch514"The Current Printer† †printing, routeprintIDREF="ch513"The Current Printer† †routeprint(1)IDREF="appe8"Man Pages in CMD PRINT ruleIDREF="ch359"Programming Print Behavior with FILTER ruleIDREF="ch512"The Current Printer† †Save TemplateIDREF="ch64"Save Template† †shortIDREF="ch337"Functions† †sizeIDREF="ch338"Functions† †SPECIALFILE ruleIDREF="ch346"Matching Non-Plain FilesstringIDREF="ch339"Functions† †SUPERTYPE ruleIDREF="ch37"Categorizing File TypestagIDREF="ch341"Functions† †tag commandIDREF="ch313"Matching File Types with Applicationstag numbers automatic assignment IDREF="ch344"Predefined File Typestag(1)IDREF="appe9"Man Pages usingIDREF="ch314"Matching File Types with Applicationstagging predefined file typesIDREF="ch13"About the IRIS WorkSpace the MATCH ruleIDREF="ch312"Matching File Types with Applicationstagging applicationsIDREF="ch315"Matching File Types with Applicationstagging FTRsIDREF="ch316"Matching File Types with Applicationstemplates, creatingIDREF="ch61"Creating WorkSpace Templates† †transfer device I/OIDREF="ch76"Transfer Device I/O† †transfer devices creatingIDREF="ch75"The Transfer Menu Managertransfer managerIDREF="appe10"Man PagesIDREF="ch73"The WorkSpace Menu TYPE ruleIDREF="ch32"Naming File TypesucharIDREF="ch340"Functions† †ushortIDREF="ch342"Functions† †winterm(1)IDREF="appe11"Man PagesWorkSpace menu adding itemsIDREF="ch71"Adding Items to the WorkSpace MenuWorkSpace templates, see templatesIDREF="ch62"Creating WorkSpace Templates† †workspace(1G)IDREF="appe12"Man PagesWorkSpace, descriptionIDREF="ch12"About the IRIS WorkSpace