
      ----------------------------------------------------------------
      README for ~4Dgifts/examples/X11/Xlib/cursor source code example
      ----------------------------------------------------------------

    
    Introduction:
    	Cursor.c is meant to be the sixth in a series of beginning
        X Windows programs.  None of the examples in this directory
        use qidgest, but instead use Xlib functionality.  This program
        takes the information presented in placewin.c and expands upon
        it by allowing you to change your cursor into another shape, in
	this case, everyone's friend Gumby.



    Fundamental building blocks:

	We need a new include file to do cursor work with, the file
	cursorfont.h, which contains definitions for the different 
	types of cursors.



    Local declarations in main():

	New in this program is the variable cursor, and cursor_shape.
	We will be using cursor_shape to set the cursor to one of many
	pre-defined cursor types that are listed on pages 641-642 of
	O'Reilly Volume 2.  In this example, we will be using gumby.
	Cursor will be used later to store cursor information.



    Setting the Cursor:

	We set the cursor by using XCreateFontCursor (line 66).  We
	are using XCreateFontCursor rather than XCreateGlyphCursor
	or XCreatePixmapCursor because the cursors we are interested
	in are defined as fonts.  XCreateFontCursor then loads information
	about Gumby into our cursor variable.

	Next we use XDefineCursor (line 67) so that our window knows
	that we want our cursor to be Gumby whenever we move inside it.
	Judicious use of this call in a multiple-window program allows
	different windows to display different cursors.

	In this program, since we do not have an explicit endpoint, we
	then call XFreeCursor (line 68) so we don't hang up the cursor
	ID after we kill the program.



    Exiting the program:

        To quit this window/end this program you will need to select "Quit"
        from the menu, or kill it via the lightning bolt, or hitting Ctrl-C in
        the shell window you invoked the program from in the first place.  Any
        of these methods will still result in your shell appearing to be hung.
        Hitting Ctrl-C should return your shell prompt to you.

        This method of exiting the program will change in queue.c, where
        we examine how to use the queue to politely exit a program.

