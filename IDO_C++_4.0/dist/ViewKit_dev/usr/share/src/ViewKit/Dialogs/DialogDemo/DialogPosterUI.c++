/////////////////////////////////////////////////////////////
//
// Source file for DialogPosterUI
//
//    This file generated by a BuilderXcessory. DO NOT MODIFY
//    IF YOU WANT TO RELOAD INTO BUILDER. USE SUBCLASSING TO
//    MAKE EXTENSIONS
//
/////////////////////////////////////////////////////////////


#include "DialogPosterUI.h"  // Generated header file for this class
#include <Sgm/Grid.h> 
#include <Xm/PushB.h> 
#include <Xm/RowColumn.h> 
#include <Xm/Separator.h> 
#include <Xm/ToggleB.h> 


// These are default resources for widgets in objects of this class
// All resources will be prepended by *<name> at instantiation,
// where <name> is the name of the specific instance, as well as the
// name of the baseWidget. These are only defaults, and may be overriden
// in a resource file by providing a more specific resource name

String  DialogPosterUI::_defaultDialogPosterUIResources[] = {
        "*warning.labelString:  Warning",
        "*question.labelString:  Question",
        "*error.labelString:  Error",
        "*modal.labelString:  Modal",
        "*post.labelString:  Post",
        "*unpostlast.labelString:  Unpost Last",
        "*unpostall.labelString:  Unpost All",
        NULL
};

DialogPosterUI::DialogPosterUI(const char *name, Widget parent) : 
         VkComponent(name) 
{ 
    Arg args[6];
    int count;

    // Load any class-defaulted resources for this object

    setDefaultResources(parent, _defaultDialogPosterUIResources  );


    // Create an unmanaged widget as the top of the widget hierarchy

    _baseWidget = _grid = XtVaCreateWidget ( _name,
                              sgGridWidgetClass,
                              parent,
                              XmNnumRows, 	3, 
                              XmNnumColumns, 	2, 
                              NULL ) ;

    // install a callback to guard against unexpected widget destruction

    installDestroyHandler();


    // Create widgets used in this component
    // All variables are data members of this class

    count = 0;
    XtSetArg ( args[count], XmNresizeHorizontal, 	 FALSE ); count++;
    XtSetArg ( args[count], XmNrow, 	0); count++;
    XtSetArg ( args[count], XmNcolumn, 	0); count++;
    _radioBox = XmCreateRadioBox( _baseWidget, 
                              "radioBox",
                              args, count );
    XtManageChild( _radioBox );


    _warning = XtVaCreateManagedWidget  ( "warning",
                              xmToggleButtonWidgetClass,
                              _radioBox, 
                              NULL ) ;

    XtAddCallback ( _warning,
                              XmNvalueChangedCallback,
                              &DialogPosterUI::changeToWarningCallback,
                              (XtPointer) this ); 


    _question = XtVaCreateManagedWidget  ( "question",
                              xmToggleButtonWidgetClass,
                              _radioBox, 
                              NULL ) ;

    XtAddCallback ( _question,
                              XmNvalueChangedCallback,
                              &DialogPosterUI::changeToQuestionCallback,
                              (XtPointer) this ); 


    _error = XtVaCreateManagedWidget  ( "error",
                              xmToggleButtonWidgetClass,
                              _radioBox, 
                              NULL ) ;

    XtAddCallback ( _error,
                              XmNvalueChangedCallback,
                              &DialogPosterUI::changeToErrorCallback,
                              (XtPointer) this ); 


    _separator = XtVaCreateManagedWidget  ( "separator",
                              xmSeparatorWidgetClass,
                              _baseWidget, 
                              XmNresizeVertical, 	FALSE, 
                              XmNrow, 	 1, 
                              XmNcolumn, 0, 
                              NULL ) ;


    _separator1 = XtVaCreateManagedWidget  ( "separator1",
                              xmSeparatorWidgetClass,
                              _baseWidget, 
                              XmNresizeVertical, 	FALSE, 
                              XmNrow, 	 1, 
                              XmNcolumn, 1, 
                              NULL ) ;


    count = 0;
    XtSetArg ( args[count], XmNresizeVertical, 	 FALSE ); count++;
    XtSetArg ( args[count], XmNresizeHorizontal, 	 FALSE ); count++;
    XtSetArg ( args[count], XmNrow, 	2); count++;
    XtSetArg ( args[count], XmNcolumn, 	0); count++;
    _radioBox1 = XmCreateRowColumn( _baseWidget, 
				    "radioBox1",
				    args, count );
    XtManageChild( _radioBox1 );


    _modal = XtVaCreateManagedWidget  ( "modal",
                              xmToggleButtonWidgetClass,
                              _radioBox1, 
                              NULL ) ;

    XtAddCallback ( _modal,
                              XmNvalueChangedCallback,
                              &DialogPosterUI::changeModalCallback,
                              (XtPointer) this ); 


    _rowColumn = XtVaCreateManagedWidget  ( "rowColumn",
                              xmRowColumnWidgetClass,
                              _baseWidget, 
                              XmNresizeVertical, 	FALSE, 
                              XmNresizeHorizontal, 	FALSE, 
                              XmNrow, 	0, 
                              XmNcolumn, 	1, 
                              NULL ) ;


    _post = XtVaCreateManagedWidget  ( "post",
                              xmPushButtonWidgetClass,
                              _rowColumn, 
                              XmNrecomputeSize, 	TRUE, 
                              NULL ) ;

    XtAddCallback ( _post,
                              XmNactivateCallback,
                              &DialogPosterUI::postCallback,
                              (XtPointer) this ); 


    _unpostlast = XtVaCreateManagedWidget  ( "unpostlast",
                              xmPushButtonWidgetClass,
                              _rowColumn, 
                              XmNrecomputeSize, 	TRUE, 
                              NULL ) ;

    XtAddCallback ( _unpostlast,
                              XmNactivateCallback,
                              &DialogPosterUI::unpostLastCallback,
                              (XtPointer) this ); 


    _unpostall = XtVaCreateManagedWidget  ( "unpostall",
                              xmPushButtonWidgetClass,
                              _rowColumn, 
                              XmNrecomputeSize, 	TRUE, 
                              NULL ) ;

    XtAddCallback ( _unpostall,
                              XmNactivateCallback,
                              &DialogPosterUI::unpostAllCallback,
                              (XtPointer) this ); 


}


DialogPosterUI::~DialogPosterUI() 
{
    // Empty Destructor. Base class destroys widgets
}

const char* DialogPosterUI::className() 
{
    return ("DialogPosterUI");
}

void DialogPosterUI::changeModalCallback (Widget w, XtPointer clientData, XtPointer callData) 
{ 
    DialogPosterUI* obj = (DialogPosterUI*) clientData;

    obj->changeModal(w, callData);
}

void DialogPosterUI::changeToErrorCallback (Widget w, XtPointer clientData, XtPointer callData) 
{ 
    DialogPosterUI* obj = (DialogPosterUI*) clientData;

    obj->changeToError(w, callData);
}

void DialogPosterUI::changeToQuestionCallback (Widget w, XtPointer clientData, XtPointer callData) 
{ 
    DialogPosterUI* obj = (DialogPosterUI*) clientData;

    obj->changeToQuestion(w, callData);
}

void DialogPosterUI::changeToWarningCallback (Widget w, XtPointer clientData, XtPointer callData) 
{ 
    DialogPosterUI* obj = (DialogPosterUI*) clientData;

    obj->changeToWarning(w, callData);
}

void DialogPosterUI::postCallback (Widget w, XtPointer clientData, XtPointer callData) 
{ 
    DialogPosterUI* obj = (DialogPosterUI*) clientData;

    obj->post(w, callData);
}

void DialogPosterUI::unpostAllCallback (Widget w, XtPointer clientData, XtPointer callData) 
{ 
    DialogPosterUI* obj = (DialogPosterUI*) clientData;

    obj->unpostAll(w, callData);
}

void DialogPosterUI::unpostLastCallback (Widget w, XtPointer clientData, XtPointer callData) 
{ 
    DialogPosterUI* obj = (DialogPosterUI*) clientData;

    obj->unpostLast(w, callData);
}



void DialogPosterUI::changeModal(Widget, XtPointer) 
{
    // Empty virtual function. Called from changeModalCallback.
    // Derived classes can override.
}

void DialogPosterUI::changeToError(Widget, XtPointer) 
{
    // Empty virtual function. Called from changeToErrorCallback.
    // Derived classes can override.
}

void DialogPosterUI::changeToQuestion(Widget, XtPointer) 
{
    // Empty virtual function. Called from changeToQuestionCallback.
    // Derived classes can override.
}

void DialogPosterUI::changeToWarning(Widget, XtPointer) 
{
    // Empty virtual function. Called from changeToWarningCallback.
    // Derived classes can override.
}

void DialogPosterUI::post(Widget, XtPointer) 
{
    // Empty virtual function. Called from postCallback.
    // Derived classes can override.
}

void DialogPosterUI::unpostAll(Widget, XtPointer) 
{
    // Empty virtual function. Called from unpostAllCallback.
    // Derived classes can override.
}

void DialogPosterUI::unpostLast(Widget, XtPointer) 
{
    // Empty virtual function. Called from unpostLastCallback.
    // Derived classes can override.
}



